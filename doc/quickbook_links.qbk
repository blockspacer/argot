[/==============================================================================
  Copyright (c) 2019 Matt Calabrese

  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================/]

[/****************************************************************************/]
[/******* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY BY HAND. *******/]
[/****************************************************************************/]

[def argot_accumulate argot::accumulate]
[def argot::accumulate_fn [link argot.ref.argot.accumulate `argot::accumulate_fn`]]
[def argot::accumulate_t [link argot.ref.argot.accumulate `argot::accumulate_t`]]
[def argot::accumulate_v [link argot.ref.argot.accumulate `argot::accumulate_v`]]
[def argot::accumulate [link argot.ref.argot.accumulate `argot::accumulate`]]
[def argot::result_of_accumulate_t [link argot.ref.argot.accumulate `argot::result_of_accumulate_t`]]
[def argot::result_of_accumulate [link argot.ref.argot.accumulate `argot::result_of_accumulate`]]

[def argot_as_call_object argot::as_call_object]
[def argot::as_call_object_fn [link argot.ref.argot.as_call_object `argot::as_call_object_fn`]]
[def argot::as_call_object_t [link argot.ref.argot.as_call_object `argot::as_call_object_t`]]
[def argot::as_call_object_v [link argot.ref.argot.as_call_object `argot::as_call_object_v`]]
[def argot::as_call_object [link argot.ref.argot.as_call_object `argot::as_call_object`]]
[def argot::result_of_as_call_object_t [link argot.ref.argot.as_call_object `argot::result_of_as_call_object_t`]]
[def argot::result_of_as_call_object [link argot.ref.argot.as_call_object `argot::result_of_as_call_object`]]

[def argot_async_call argot::async_call]
[def argot::async_call_fn [link argot.ref.argot.async_call `argot::async_call_fn`]]
[def argot::async_call_t [link argot.ref.argot.async_call `argot::async_call_t`]]
[def argot::async_call_v [link argot.ref.argot.async_call `argot::async_call_v`]]
[def argot::async_call [link argot.ref.argot.async_call `argot::async_call`]]
[def argot::result_of_async_call_t [link argot.ref.argot.async_call `argot::result_of_async_call_t`]]
[def argot::result_of_async_call [link argot.ref.argot.async_call `argot::result_of_async_call`]]

[def argot_basic_result_of argot::basic_result_of]
[def argot::basic_result_of_fn [link argot.ref.argot.basic_result_of `argot::basic_result_of_fn`]]
[def argot::basic_result_of_t [link argot.ref.argot.basic_result_of `argot::basic_result_of_t`]]
[def argot::basic_result_of_v [link argot.ref.argot.basic_result_of `argot::basic_result_of_v`]]
[def argot::basic_result_of [link argot.ref.argot.basic_result_of `argot::basic_result_of`]]
[def argot::result_of_basic_result_of_t [link argot.ref.argot.basic_result_of `argot::result_of_basic_result_of_t`]]
[def argot::result_of_basic_result_of [link argot.ref.argot.basic_result_of `argot::result_of_basic_result_of`]]

[def argot_call argot::call]
[def argot::call_fn [link argot.ref.argot.call `argot::call_fn`]]
[def argot::call_t [link argot.ref.argot.call `argot::call_t`]]
[def argot::call_v [link argot.ref.argot.call `argot::call_v`]]
[def argot::call [link argot.ref.argot.call `argot::call`]]
[def argot::result_of_call_t [link argot.ref.argot.call `argot::result_of_call_t`]]
[def argot::result_of_call [link argot.ref.argot.call `argot::result_of_call`]]

[def argot_call_object_base argot::call_object_base]
[def argot::call_object_base_fn [link argot.ref.argot.call_object_base `argot::call_object_base_fn`]]
[def argot::call_object_base_t [link argot.ref.argot.call_object_base `argot::call_object_base_t`]]
[def argot::call_object_base_v [link argot.ref.argot.call_object_base `argot::call_object_base_v`]]
[def argot::call_object_base [link argot.ref.argot.call_object_base `argot::call_object_base`]]
[def argot::result_of_call_object_base_t [link argot.ref.argot.call_object_base `argot::result_of_call_object_base_t`]]
[def argot::result_of_call_object_base [link argot.ref.argot.call_object_base `argot::result_of_call_object_base`]]

[def argot_case argot::case]
[def argot::case_fn [link argot.ref.argot.case `argot::case_fn`]]
[def argot::case_t [link argot.ref.argot.case `argot::case_t`]]
[def argot::case_v [link argot.ref.argot.case `argot::case_v`]]
[def argot::case [link argot.ref.argot.case `argot::case`]]
[def argot::result_of_case_t [link argot.ref.argot.case `argot::result_of_case_t`]]
[def argot::result_of_case [link argot.ref.argot.case `argot::result_of_case`]]

[def argot_compose argot::compose]
[def argot::compose_fn [link argot.ref.argot.compose `argot::compose_fn`]]
[def argot::compose_t [link argot.ref.argot.compose `argot::compose_t`]]
[def argot::compose_v [link argot.ref.argot.compose `argot::compose_v`]]
[def argot::compose [link argot.ref.argot.compose `argot::compose`]]
[def argot::result_of_compose_t [link argot.ref.argot.compose `argot::result_of_compose_t`]]
[def argot::result_of_compose [link argot.ref.argot.compose `argot::result_of_compose`]]

[def argot_config argot::config]
[def argot::config_fn [link argot.ref.argot.config `argot::config_fn`]]
[def argot::config_t [link argot.ref.argot.config `argot::config_t`]]
[def argot::config_v [link argot.ref.argot.config `argot::config_v`]]
[def argot::config [link argot.ref.argot.config `argot::config`]]
[def argot::result_of_config_t [link argot.ref.argot.config `argot::result_of_config_t`]]
[def argot::result_of_config [link argot.ref.argot.config `argot::result_of_config`]]

[def argot_contained argot::contained]
[def argot::contained_fn [link argot.ref.argot.contained `argot::contained_fn`]]
[def argot::contained_t [link argot.ref.argot.contained `argot::contained_t`]]
[def argot::contained_v [link argot.ref.argot.contained `argot::contained_v`]]
[def argot::contained [link argot.ref.argot.contained `argot::contained`]]
[def argot::result_of_contained_t [link argot.ref.argot.contained `argot::result_of_contained_t`]]
[def argot::result_of_contained [link argot.ref.argot.contained `argot::result_of_contained`]]

[def argot_contextually_convert_to_bool argot::contextually_convert_to_bool]
[def argot::contextually_convert_to_bool_fn [link argot.ref.argot.contextually_convert_to_bool `argot::contextually_convert_to_bool_fn`]]
[def argot::contextually_convert_to_bool_t [link argot.ref.argot.contextually_convert_to_bool `argot::contextually_convert_to_bool_t`]]
[def argot::contextually_convert_to_bool_v [link argot.ref.argot.contextually_convert_to_bool `argot::contextually_convert_to_bool_v`]]
[def argot::contextually_convert_to_bool [link argot.ref.argot.contextually_convert_to_bool `argot::contextually_convert_to_bool`]]
[def argot::result_of_contextually_convert_to_bool_t [link argot.ref.argot.contextually_convert_to_bool `argot::result_of_contextually_convert_to_bool_t`]]
[def argot::result_of_contextually_convert_to_bool [link argot.ref.argot.contextually_convert_to_bool `argot::result_of_contextually_convert_to_bool`]]

[def argot_convert_future argot::convert_future]
[def argot::convert_future_fn [link argot.ref.argot.convert_future `argot::convert_future_fn`]]
[def argot::convert_future_t [link argot.ref.argot.convert_future `argot::convert_future_t`]]
[def argot::convert_future_v [link argot.ref.argot.convert_future `argot::convert_future_v`]]
[def argot::convert_future [link argot.ref.argot.convert_future `argot::convert_future`]]
[def argot::result_of_convert_future_t [link argot.ref.argot.convert_future `argot::result_of_convert_future_t`]]
[def argot::result_of_convert_future [link argot.ref.argot.convert_future `argot::result_of_convert_future`]]

[def argot_default_ argot::default_]
[def argot::default_fn [link argot.ref.argot.default_ `argot::default_fn`]]
[def argot::default_t [link argot.ref.argot.default_ `argot::default_t`]]
[def argot::default_v [link argot.ref.argot.default_ `argot::default_v`]]
[def argot::default_ [link argot.ref.argot.default_ `argot::default_`]]
[def argot::result_of_default_t [link argot.ref.argot.default_ `argot::result_of_default_t`]]
[def argot::result_of_default_ [link argot.ref.argot.default_ `argot::result_of_default_`]]

[def argot_discriminated_union argot::discriminated_union]
[def argot::discriminated_union_fn [link argot.ref.argot.discriminated_union `argot::discriminated_union_fn`]]
[def argot::discriminated_union_t [link argot.ref.argot.discriminated_union `argot::discriminated_union_t`]]
[def argot::discriminated_union_v [link argot.ref.argot.discriminated_union `argot::discriminated_union_v`]]
[def argot::discriminated_union [link argot.ref.argot.discriminated_union `argot::discriminated_union`]]
[def argot::result_of_discriminated_union_t [link argot.ref.argot.discriminated_union `argot::result_of_discriminated_union_t`]]
[def argot::result_of_discriminated_union [link argot.ref.argot.discriminated_union `argot::result_of_discriminated_union`]]

[def argot_empty_switch_body argot::empty_switch_body]
[def argot::empty_switch_body_fn [link argot.ref.argot.empty_switch_body `argot::empty_switch_body_fn`]]
[def argot::empty_switch_body_t [link argot.ref.argot.empty_switch_body `argot::empty_switch_body_t`]]
[def argot::empty_switch_body_v [link argot.ref.argot.empty_switch_body `argot::empty_switch_body_v`]]
[def argot::empty_switch_body [link argot.ref.argot.empty_switch_body `argot::empty_switch_body`]]
[def argot::result_of_empty_switch_body_t [link argot.ref.argot.empty_switch_body `argot::result_of_empty_switch_body_t`]]
[def argot::result_of_empty_switch_body [link argot.ref.argot.empty_switch_body `argot::result_of_empty_switch_body`]]

[def argot_forgetful_async_call argot::forgetful_async_call]
[def argot::forgetful_async_call_fn [link argot.ref.argot.forgetful_async_call `argot::forgetful_async_call_fn`]]
[def argot::forgetful_async_call_t [link argot.ref.argot.forgetful_async_call `argot::forgetful_async_call_t`]]
[def argot::forgetful_async_call_v [link argot.ref.argot.forgetful_async_call `argot::forgetful_async_call_v`]]
[def argot::forgetful_async_call [link argot.ref.argot.forgetful_async_call `argot::forgetful_async_call`]]
[def argot::result_of_forgetful_async_call_t [link argot.ref.argot.forgetful_async_call `argot::result_of_forgetful_async_call_t`]]
[def argot::result_of_forgetful_async_call [link argot.ref.argot.forgetful_async_call `argot::result_of_forgetful_async_call`]]

[def argot_forgetful_call argot::forgetful_call]
[def argot::forgetful_call_fn [link argot.ref.argot.forgetful_call `argot::forgetful_call_fn`]]
[def argot::forgetful_call_t [link argot.ref.argot.forgetful_call `argot::forgetful_call_t`]]
[def argot::forgetful_call_v [link argot.ref.argot.forgetful_call `argot::forgetful_call_v`]]
[def argot::forgetful_call [link argot.ref.argot.forgetful_call `argot::forgetful_call`]]
[def argot::result_of_forgetful_call_t [link argot.ref.argot.forgetful_call `argot::result_of_forgetful_call_t`]]
[def argot::result_of_forgetful_call [link argot.ref.argot.forgetful_call `argot::result_of_forgetful_call`]]

[def argot_forward_arguments_as_tuple argot::forward_arguments_as_tuple]
[def argot::forward_arguments_as_tuple_fn [link argot.ref.argot.forward_arguments_as_tuple `argot::forward_arguments_as_tuple_fn`]]
[def argot::forward_arguments_as_tuple_t [link argot.ref.argot.forward_arguments_as_tuple `argot::forward_arguments_as_tuple_t`]]
[def argot::forward_arguments_as_tuple_v [link argot.ref.argot.forward_arguments_as_tuple `argot::forward_arguments_as_tuple_v`]]
[def argot::forward_arguments_as_tuple [link argot.ref.argot.forward_arguments_as_tuple `argot::forward_arguments_as_tuple`]]
[def argot::result_of_forward_arguments_as_tuple_t [link argot.ref.argot.forward_arguments_as_tuple `argot::result_of_forward_arguments_as_tuple_t`]]
[def argot::result_of_forward_arguments_as_tuple [link argot.ref.argot.forward_arguments_as_tuple `argot::result_of_forward_arguments_as_tuple`]]

[def argot_future_spawner argot::future_spawner]
[def argot::future_spawner_fn [link argot.ref.argot.future_spawner `argot::future_spawner_fn`]]
[def argot::future_spawner_t [link argot.ref.argot.future_spawner `argot::future_spawner_t`]]
[def argot::future_spawner_v [link argot.ref.argot.future_spawner `argot::future_spawner_v`]]
[def argot::future_spawner [link argot.ref.argot.future_spawner `argot::future_spawner`]]
[def argot::result_of_future_spawner_t [link argot.ref.argot.future_spawner `argot::result_of_future_spawner_t`]]
[def argot::result_of_future_spawner [link argot.ref.argot.future_spawner `argot::result_of_future_spawner`]]

[def argot_future_traits argot::future_traits]
[def argot::future_traits_fn [link argot.ref.argot.future_traits `argot::future_traits_fn`]]
[def argot::future_traits_t [link argot.ref.argot.future_traits `argot::future_traits_t`]]
[def argot::future_traits_v [link argot.ref.argot.future_traits `argot::future_traits_v`]]
[def argot::future_traits [link argot.ref.argot.future_traits `argot::future_traits`]]
[def argot::result_of_future_traits_t [link argot.ref.argot.future_traits `argot::result_of_future_traits_t`]]
[def argot::result_of_future_traits [link argot.ref.argot.future_traits `argot::result_of_future_traits`]]

[def argot_identity argot::identity]
[def argot::identity_fn [link argot.ref.argot.identity `argot::identity_fn`]]
[def argot::identity_t [link argot.ref.argot.identity `argot::identity_t`]]
[def argot::identity_v [link argot.ref.argot.identity `argot::identity_v`]]
[def argot::identity [link argot.ref.argot.identity `argot::identity`]]
[def argot::result_of_identity_t [link argot.ref.argot.identity `argot::result_of_identity_t`]]
[def argot::result_of_identity [link argot.ref.argot.identity `argot::result_of_identity`]]

[def argot_impossible argot::impossible]
[def argot::impossible_fn [link argot.ref.argot.impossible `argot::impossible_fn`]]
[def argot::impossible_t [link argot.ref.argot.impossible `argot::impossible_t`]]
[def argot::impossible_v [link argot.ref.argot.impossible `argot::impossible_v`]]
[def argot::impossible [link argot.ref.argot.impossible `argot::impossible`]]
[def argot::result_of_impossible_t [link argot.ref.argot.impossible `argot::result_of_impossible_t`]]
[def argot::result_of_impossible [link argot.ref.argot.impossible `argot::result_of_impossible`]]

[def argot_in_place_default_init argot::in_place_default_init]
[def argot::in_place_default_init_fn [link argot.ref.argot.in_place_default_init `argot::in_place_default_init_fn`]]
[def argot::in_place_default_init_t [link argot.ref.argot.in_place_default_init `argot::in_place_default_init_t`]]
[def argot::in_place_default_init_v [link argot.ref.argot.in_place_default_init `argot::in_place_default_init_v`]]
[def argot::in_place_default_init [link argot.ref.argot.in_place_default_init `argot::in_place_default_init`]]
[def argot::result_of_in_place_default_init_t [link argot.ref.argot.in_place_default_init `argot::result_of_in_place_default_init_t`]]
[def argot::result_of_in_place_default_init [link argot.ref.argot.in_place_default_init `argot::result_of_in_place_default_init`]]

[def argot_in_place_with_result argot::in_place_with_result]
[def argot::in_place_with_result_fn [link argot.ref.argot.in_place_with_result `argot::in_place_with_result_fn`]]
[def argot::in_place_with_result_t [link argot.ref.argot.in_place_with_result `argot::in_place_with_result_t`]]
[def argot::in_place_with_result_v [link argot.ref.argot.in_place_with_result `argot::in_place_with_result_v`]]
[def argot::in_place_with_result [link argot.ref.argot.in_place_with_result `argot::in_place_with_result`]]
[def argot::result_of_in_place_with_result_t [link argot.ref.argot.in_place_with_result `argot::result_of_in_place_with_result_t`]]
[def argot::result_of_in_place_with_result [link argot.ref.argot.in_place_with_result `argot::result_of_in_place_with_result`]]

[def argot_invocable_reference argot::invocable_reference]
[def argot::invocable_reference_fn [link argot.ref.argot.invocable_reference `argot::invocable_reference_fn`]]
[def argot::invocable_reference_t [link argot.ref.argot.invocable_reference `argot::invocable_reference_t`]]
[def argot::invocable_reference_v [link argot.ref.argot.invocable_reference `argot::invocable_reference_v`]]
[def argot::invocable_reference [link argot.ref.argot.invocable_reference `argot::invocable_reference`]]
[def argot::result_of_invocable_reference_t [link argot.ref.argot.invocable_reference `argot::result_of_invocable_reference_t`]]
[def argot::result_of_invocable_reference [link argot.ref.argot.invocable_reference `argot::result_of_invocable_reference`]]

[def argot_lazy_expand argot::lazy_expand]
[def argot::lazy_expand_fn [link argot.ref.argot.lazy_expand `argot::lazy_expand_fn`]]
[def argot::lazy_expand_t [link argot.ref.argot.lazy_expand `argot::lazy_expand_t`]]
[def argot::lazy_expand_v [link argot.ref.argot.lazy_expand `argot::lazy_expand_v`]]
[def argot::lazy_expand [link argot.ref.argot.lazy_expand `argot::lazy_expand`]]
[def argot::result_of_lazy_expand_t [link argot.ref.argot.lazy_expand `argot::result_of_lazy_expand_t`]]
[def argot::result_of_lazy_expand [link argot.ref.argot.lazy_expand `argot::result_of_lazy_expand`]]

[def argot_no_unique_address argot::no_unique_address]
[def argot::no_unique_address_fn [link argot.ref.argot.no_unique_address `argot::no_unique_address_fn`]]
[def argot::no_unique_address_t [link argot.ref.argot.no_unique_address `argot::no_unique_address_t`]]
[def argot::no_unique_address_v [link argot.ref.argot.no_unique_address `argot::no_unique_address_v`]]
[def argot::no_unique_address [link argot.ref.argot.no_unique_address `argot::no_unique_address`]]
[def argot::result_of_no_unique_address_t [link argot.ref.argot.no_unique_address `argot::result_of_no_unique_address_t`]]
[def argot::result_of_no_unique_address [link argot.ref.argot.no_unique_address `argot::result_of_no_unique_address`]]

[def argot_opaque_optional argot::opaque_optional]
[def argot::opaque_optional_fn [link argot.ref.argot.opaque_optional `argot::opaque_optional_fn`]]
[def argot::opaque_optional_t [link argot.ref.argot.opaque_optional `argot::opaque_optional_t`]]
[def argot::opaque_optional_v [link argot.ref.argot.opaque_optional `argot::opaque_optional_v`]]
[def argot::opaque_optional [link argot.ref.argot.opaque_optional `argot::opaque_optional`]]
[def argot::result_of_opaque_optional_t [link argot.ref.argot.opaque_optional `argot::result_of_opaque_optional_t`]]
[def argot::result_of_opaque_optional [link argot.ref.argot.opaque_optional `argot::result_of_opaque_optional`]]

[def argot_operators argot::operators]
[def argot::operators_fn [link argot.ref.argot.operators `argot::operators_fn`]]
[def argot::operators_t [link argot.ref.argot.operators `argot::operators_t`]]
[def argot::operators_v [link argot.ref.argot.operators `argot::operators_v`]]
[def argot::operators [link argot.ref.argot.operators `argot::operators`]]
[def argot::result_of_operators_t [link argot.ref.argot.operators `argot::result_of_operators_t`]]
[def argot::result_of_operators [link argot.ref.argot.operators `argot::result_of_operators`]]

[def argot_output argot::output]
[def argot::output_fn [link argot.ref.argot.output `argot::output_fn`]]
[def argot::output_t [link argot.ref.argot.output `argot::output_t`]]
[def argot::output_v [link argot.ref.argot.output `argot::output_v`]]
[def argot::output [link argot.ref.argot.output `argot::output`]]
[def argot::result_of_output_t [link argot.ref.argot.output `argot::result_of_output_t`]]
[def argot::result_of_output [link argot.ref.argot.output `argot::result_of_output`]]

[def argot_side_effect argot::side_effect]
[def argot::side_effect_fn [link argot.ref.argot.side_effect `argot::side_effect_fn`]]
[def argot::side_effect_t [link argot.ref.argot.side_effect `argot::side_effect_t`]]
[def argot::side_effect_v [link argot.ref.argot.side_effect `argot::side_effect_v`]]
[def argot::side_effect [link argot.ref.argot.side_effect `argot::side_effect`]]
[def argot::result_of_side_effect_t [link argot.ref.argot.side_effect `argot::result_of_side_effect_t`]]
[def argot::result_of_side_effect [link argot.ref.argot.side_effect `argot::result_of_side_effect`]]

[def argot_tag argot::tag]
[def argot::tag_fn [link argot.ref.argot.tag `argot::tag_fn`]]
[def argot::tag_t [link argot.ref.argot.tag `argot::tag_t`]]
[def argot::tag_v [link argot.ref.argot.tag `argot::tag_v`]]
[def argot::tag [link argot.ref.argot.tag `argot::tag`]]
[def argot::result_of_tag_t [link argot.ref.argot.tag `argot::result_of_tag_t`]]
[def argot::result_of_tag [link argot.ref.argot.tag `argot::result_of_tag`]]

[def argot_type_list argot::type_list]
[def argot::type_list_fn [link argot.ref.argot.type_list `argot::type_list_fn`]]
[def argot::type_list_t [link argot.ref.argot.type_list `argot::type_list_t`]]
[def argot::type_list_v [link argot.ref.argot.type_list `argot::type_list_v`]]
[def argot::type_list [link argot.ref.argot.type_list `argot::type_list`]]
[def argot::result_of_type_list_t [link argot.ref.argot.type_list `argot::result_of_type_list_t`]]
[def argot::result_of_type_list [link argot.ref.argot.type_list `argot::result_of_type_list`]]

[def argot_union_ argot::union_]
[def argot::union_fn [link argot.ref.argot.union_ `argot::union_fn`]]
[def argot::union_t [link argot.ref.argot.union_ `argot::union_t`]]
[def argot::union_v [link argot.ref.argot.union_ `argot::union_v`]]
[def argot::union_ [link argot.ref.argot.union_ `argot::union_`]]
[def argot::result_of_union_t [link argot.ref.argot.union_ `argot::result_of_union_t`]]
[def argot::result_of_union_ [link argot.ref.argot.union_ `argot::result_of_union_`]]

[def argot_unreachable_function argot::unreachable_function]
[def argot::unreachable_function_fn [link argot.ref.argot.unreachable_function `argot::unreachable_function_fn`]]
[def argot::unreachable_function_t [link argot.ref.argot.unreachable_function `argot::unreachable_function_t`]]
[def argot::unreachable_function_v [link argot.ref.argot.unreachable_function `argot::unreachable_function_v`]]
[def argot::unreachable_function [link argot.ref.argot.unreachable_function `argot::unreachable_function`]]
[def argot::result_of_unreachable_function_t [link argot.ref.argot.unreachable_function `argot::result_of_unreachable_function_t`]]
[def argot::result_of_unreachable_function [link argot.ref.argot.unreachable_function `argot::result_of_unreachable_function`]]

[def argot_value_list argot::value_list]
[def argot::value_list_fn [link argot.ref.argot.value_list `argot::value_list_fn`]]
[def argot::value_list_t [link argot.ref.argot.value_list `argot::value_list_t`]]
[def argot::value_list_v [link argot.ref.argot.value_list `argot::value_list_v`]]
[def argot::value_list [link argot.ref.argot.value_list `argot::value_list`]]
[def argot::result_of_value_list_t [link argot.ref.argot.value_list `argot::result_of_value_list_t`]]
[def argot::result_of_value_list [link argot.ref.argot.value_list `argot::result_of_value_list`]]

[def argot_value_zipper argot::value_zipper]
[def argot::value_zipper_fn [link argot.ref.argot.value_zipper `argot::value_zipper_fn`]]
[def argot::value_zipper_t [link argot.ref.argot.value_zipper `argot::value_zipper_t`]]
[def argot::value_zipper_v [link argot.ref.argot.value_zipper `argot::value_zipper_v`]]
[def argot::value_zipper [link argot.ref.argot.value_zipper `argot::value_zipper`]]
[def argot::result_of_value_zipper_t [link argot.ref.argot.value_zipper `argot::result_of_value_zipper_t`]]
[def argot::result_of_value_zipper [link argot.ref.argot.value_zipper `argot::result_of_value_zipper`]]

[def argot_void_ argot::void_]
[def argot::void_fn [link argot.ref.argot.void_ `argot::void_fn`]]
[def argot::void_t [link argot.ref.argot.void_ `argot::void_t`]]
[def argot::void_v [link argot.ref.argot.void_ `argot::void_v`]]
[def argot::void_ [link argot.ref.argot.void_ `argot::void_`]]
[def argot::result_of_void_t [link argot.ref.argot.void_ `argot::result_of_void_t`]]
[def argot::result_of_void_ [link argot.ref.argot.void_ `argot::result_of_void_`]]

[def argot_zipper argot::zipper]
[def argot::zipper_fn [link argot.ref.argot.zipper `argot::zipper_fn`]]
[def argot::zipper_t [link argot.ref.argot.zipper `argot::zipper_t`]]
[def argot::zipper_v [link argot.ref.argot.zipper `argot::zipper_v`]]
[def argot::zipper [link argot.ref.argot.zipper `argot::zipper`]]
[def argot::result_of_zipper_t [link argot.ref.argot.zipper `argot::result_of_zipper_t`]]
[def argot::result_of_zipper [link argot.ref.argot.zipper `argot::result_of_zipper`]]

[def conc_alternative_of_by_value conc::alternative_of_by_value]
[def conc::alternative_of_by_value_fn [link argot.ref.conc.alternative_of_by_value `conc::alternative_of_by_value_fn`]]
[def conc::alternative_of_by_value_t [link argot.ref.conc.alternative_of_by_value `conc::alternative_of_by_value_t`]]
[def conc::alternative_of_by_value_v [link argot.ref.conc.alternative_of_by_value `conc::alternative_of_by_value_v`]]
[def conc::alternative_of_by_value [link argot.ref.conc.alternative_of_by_value `conc::alternative_of_by_value`]]
[def conc::result_of_alternative_of_by_value_t [link argot.ref.conc.alternative_of_by_value `conc::result_of_alternative_of_by_value_t`]]
[def conc::result_of_alternative_of_by_value [link argot.ref.conc.alternative_of_by_value `conc::result_of_alternative_of_by_value`]]

[def conc_bind_call conc::bind_call]
[def conc::bind_call_fn [link argot.ref.conc.bind_call `conc::bind_call_fn`]]
[def conc::bind_call_t [link argot.ref.conc.bind_call `conc::bind_call_t`]]
[def conc::bind_call_v [link argot.ref.conc.bind_call `conc::bind_call_v`]]
[def conc::bind_call [link argot.ref.conc.bind_call `conc::bind_call`]]
[def conc::result_of_bind_call_t [link argot.ref.conc.bind_call `conc::result_of_bind_call_t`]]
[def conc::result_of_bind_call [link argot.ref.conc.bind_call `conc::result_of_bind_call`]]

[def conc_bless conc::bless]
[def conc::bless_fn [link argot.ref.conc.bless `conc::bless_fn`]]
[def conc::bless_t [link argot.ref.conc.bless `conc::bless_t`]]
[def conc::bless_v [link argot.ref.conc.bless `conc::bless_v`]]
[def conc::bless [link argot.ref.conc.bless `conc::bless`]]
[def conc::result_of_bless_t [link argot.ref.conc.bless `conc::result_of_bless_t`]]
[def conc::result_of_bless [link argot.ref.conc.bless `conc::result_of_bless`]]

[def conc_bless_result conc::bless_result]
[def conc::bless_result_fn [link argot.ref.conc.bless_result `conc::bless_result_fn`]]
[def conc::bless_result_t [link argot.ref.conc.bless_result `conc::bless_result_t`]]
[def conc::bless_result_v [link argot.ref.conc.bless_result `conc::bless_result_v`]]
[def conc::bless_result [link argot.ref.conc.bless_result `conc::bless_result`]]
[def conc::result_of_bless_result_t [link argot.ref.conc.bless_result `conc::result_of_bless_result_t`]]
[def conc::result_of_bless_result [link argot.ref.conc.bless_result `conc::result_of_bless_result`]]

[def conc_conc_generator conc::conc_generator]
[def conc::conc_generator_fn [link argot.ref.conc.conc_generator `conc::conc_generator_fn`]]
[def conc::conc_generator_t [link argot.ref.conc.conc_generator `conc::conc_generator_t`]]
[def conc::conc_generator_v [link argot.ref.conc.conc_generator `conc::conc_generator_v`]]
[def conc::conc_generator [link argot.ref.conc.conc_generator `conc::conc_generator`]]
[def conc::result_of_conc_generator_t [link argot.ref.conc.conc_generator `conc::result_of_conc_generator_t`]]
[def conc::result_of_conc_generator [link argot.ref.conc.conc_generator `conc::result_of_conc_generator`]]

[def conc_default_to_value_of conc::default_to_value_of]
[def conc::default_to_value_of_fn [link argot.ref.conc.default_to_value_of `conc::default_to_value_of_fn`]]
[def conc::default_to_value_of_t [link argot.ref.conc.default_to_value_of `conc::default_to_value_of_t`]]
[def conc::default_to_value_of_v [link argot.ref.conc.default_to_value_of `conc::default_to_value_of_v`]]
[def conc::default_to_value_of [link argot.ref.conc.default_to_value_of `conc::default_to_value_of`]]
[def conc::result_of_default_to_value_of_t [link argot.ref.conc.default_to_value_of `conc::result_of_default_to_value_of_t`]]
[def conc::result_of_default_to_value_of [link argot.ref.conc.default_to_value_of `conc::result_of_default_to_value_of`]]

[def conc_expand conc::expand]
[def conc::expand_fn [link argot.ref.conc.expand `conc::expand_fn`]]
[def conc::expand_t [link argot.ref.conc.expand `conc::expand_t`]]
[def conc::expand_v [link argot.ref.conc.expand `conc::expand_v`]]
[def conc::expand [link argot.ref.conc.expand `conc::expand`]]
[def conc::result_of_expand_t [link argot.ref.conc.expand `conc::result_of_expand_t`]]
[def conc::result_of_expand [link argot.ref.conc.expand `conc::result_of_expand`]]

[def conc_group conc::group]
[def conc::group_fn [link argot.ref.conc.group `conc::group_fn`]]
[def conc::group_t [link argot.ref.conc.group `conc::group_t`]]
[def conc::group_v [link argot.ref.conc.group `conc::group_v`]]
[def conc::group [link argot.ref.conc.group `conc::group`]]
[def conc::result_of_group_t [link argot.ref.conc.group `conc::result_of_group_t`]]
[def conc::result_of_group [link argot.ref.conc.group `conc::result_of_group`]]

[def conc_lift conc::lift]
[def conc::lift_fn [link argot.ref.conc.lift `conc::lift_fn`]]
[def conc::lift_t [link argot.ref.conc.lift `conc::lift_t`]]
[def conc::lift_v [link argot.ref.conc.lift `conc::lift_v`]]
[def conc::lift [link argot.ref.conc.lift `conc::lift`]]
[def conc::result_of_lift_t [link argot.ref.conc.lift `conc::result_of_lift_t`]]
[def conc::result_of_lift [link argot.ref.conc.lift `conc::result_of_lift`]]

[def conc_lift_call conc::lift_call]
[def conc::lift_call_fn [link argot.ref.conc.lift_call `conc::lift_call_fn`]]
[def conc::lift_call_t [link argot.ref.conc.lift_call `conc::lift_call_t`]]
[def conc::lift_call_v [link argot.ref.conc.lift_call `conc::lift_call_v`]]
[def conc::lift_call [link argot.ref.conc.lift_call `conc::lift_call`]]
[def conc::result_of_lift_call_t [link argot.ref.conc.lift_call `conc::result_of_lift_call_t`]]
[def conc::result_of_lift_call [link argot.ref.conc.lift_call `conc::result_of_lift_call`]]

[def conc_lift_result conc::lift_result]
[def conc::lift_result_fn [link argot.ref.conc.lift_result `conc::lift_result_fn`]]
[def conc::lift_result_t [link argot.ref.conc.lift_result `conc::lift_result_t`]]
[def conc::lift_result_v [link argot.ref.conc.lift_result `conc::lift_result_v`]]
[def conc::lift_result [link argot.ref.conc.lift_result `conc::lift_result`]]
[def conc::result_of_lift_result_t [link argot.ref.conc.lift_result `conc::result_of_lift_result_t`]]
[def conc::result_of_lift_result [link argot.ref.conc.lift_result `conc::result_of_lift_result`]]

[def conc_nothing conc::nothing]
[def conc::nothing_fn [link argot.ref.conc.nothing `conc::nothing_fn`]]
[def conc::nothing_t [link argot.ref.conc.nothing `conc::nothing_t`]]
[def conc::nothing_v [link argot.ref.conc.nothing `conc::nothing_v`]]
[def conc::nothing [link argot.ref.conc.nothing `conc::nothing`]]
[def conc::result_of_nothing_t [link argot.ref.conc.nothing `conc::result_of_nothing_t`]]
[def conc::result_of_nothing [link argot.ref.conc.nothing `conc::result_of_nothing`]]

[def conc_reference_to conc::reference_to]
[def conc::reference_to_fn [link argot.ref.conc.reference_to `conc::reference_to_fn`]]
[def conc::reference_to_t [link argot.ref.conc.reference_to `conc::reference_to_t`]]
[def conc::reference_to_v [link argot.ref.conc.reference_to `conc::reference_to_v`]]
[def conc::reference_to [link argot.ref.conc.reference_to `conc::reference_to`]]
[def conc::result_of_reference_to_t [link argot.ref.conc.reference_to `conc::result_of_reference_to_t`]]
[def conc::result_of_reference_to [link argot.ref.conc.reference_to `conc::result_of_reference_to`]]

[def conc_unpack_by_value conc::unpack_by_value]
[def conc::unpack_by_value_fn [link argot.ref.conc.unpack_by_value `conc::unpack_by_value_fn`]]
[def conc::unpack_by_value_t [link argot.ref.conc.unpack_by_value `conc::unpack_by_value_t`]]
[def conc::unpack_by_value_v [link argot.ref.conc.unpack_by_value `conc::unpack_by_value_v`]]
[def conc::unpack_by_value [link argot.ref.conc.unpack_by_value `conc::unpack_by_value`]]
[def conc::result_of_unpack_by_value_t [link argot.ref.conc.unpack_by_value `conc::result_of_unpack_by_value_t`]]
[def conc::result_of_unpack_by_value [link argot.ref.conc.unpack_by_value `conc::result_of_unpack_by_value`]]

[def conc_value_of conc::value_of]
[def conc::value_of_fn [link argot.ref.conc.value_of `conc::value_of_fn`]]
[def conc::value_of_t [link argot.ref.conc.value_of `conc::value_of_t`]]
[def conc::value_of_v [link argot.ref.conc.value_of `conc::value_of_v`]]
[def conc::value_of [link argot.ref.conc.value_of `conc::value_of`]]
[def conc::result_of_value_of_t [link argot.ref.conc.value_of `conc::result_of_value_of_t`]]
[def conc::result_of_value_of [link argot.ref.conc.value_of `conc::result_of_value_of`]]

[def conc_when_ready conc::when_ready]
[def conc::when_ready_fn [link argot.ref.conc.when_ready `conc::when_ready_fn`]]
[def conc::when_ready_t [link argot.ref.conc.when_ready `conc::when_ready_t`]]
[def conc::when_ready_v [link argot.ref.conc.when_ready `conc::when_ready_v`]]
[def conc::when_ready [link argot.ref.conc.when_ready `conc::when_ready`]]
[def conc::result_of_when_ready_t [link argot.ref.conc.when_ready `conc::result_of_when_ready_t`]]
[def conc::result_of_when_ready [link argot.ref.conc.when_ready `conc::result_of_when_ready`]]

[def conc_traits_argument_list_kinds_of conc_traits::argument_list_kinds_of]
[def conc_traits::argument_list_kinds_of_fn [link argot.ref.conc_traits.argument_list_kinds_of `conc_traits::argument_list_kinds_of_fn`]]
[def conc_traits::argument_list_kinds_of_t [link argot.ref.conc_traits.argument_list_kinds_of `conc_traits::argument_list_kinds_of_t`]]
[def conc_traits::argument_list_kinds_of_v [link argot.ref.conc_traits.argument_list_kinds_of `conc_traits::argument_list_kinds_of_v`]]
[def conc_traits::argument_list_kinds_of [link argot.ref.conc_traits.argument_list_kinds_of `conc_traits::argument_list_kinds_of`]]
[def conc_traits::result_of_argument_list_kinds_of_t [link argot.ref.conc_traits.argument_list_kinds_of `conc_traits::result_of_argument_list_kinds_of_t`]]
[def conc_traits::result_of_argument_list_kinds_of [link argot.ref.conc_traits.argument_list_kinds_of `conc_traits::result_of_argument_list_kinds_of`]]

[def conc_traits_argument_list_kinds_of_destructive conc_traits::argument_list_kinds_of_destructive]
[def conc_traits::argument_list_kinds_of_destructive_fn [link argot.ref.conc_traits.argument_list_kinds_of_destructive `conc_traits::argument_list_kinds_of_destructive_fn`]]
[def conc_traits::argument_list_kinds_of_destructive_t [link argot.ref.conc_traits.argument_list_kinds_of_destructive `conc_traits::argument_list_kinds_of_destructive_t`]]
[def conc_traits::argument_list_kinds_of_destructive_v [link argot.ref.conc_traits.argument_list_kinds_of_destructive `conc_traits::argument_list_kinds_of_destructive_v`]]
[def conc_traits::argument_list_kinds_of_destructive [link argot.ref.conc_traits.argument_list_kinds_of_destructive `conc_traits::argument_list_kinds_of_destructive`]]
[def conc_traits::result_of_argument_list_kinds_of_destructive_t [link argot.ref.conc_traits.argument_list_kinds_of_destructive `conc_traits::result_of_argument_list_kinds_of_destructive_t`]]
[def conc_traits::result_of_argument_list_kinds_of_destructive [link argot.ref.conc_traits.argument_list_kinds_of_destructive `conc_traits::result_of_argument_list_kinds_of_destructive`]]

[def conc_traits_argument_list_kinds_of_persistent conc_traits::argument_list_kinds_of_persistent]
[def conc_traits::argument_list_kinds_of_persistent_fn [link argot.ref.conc_traits.argument_list_kinds_of_persistent `conc_traits::argument_list_kinds_of_persistent_fn`]]
[def conc_traits::argument_list_kinds_of_persistent_t [link argot.ref.conc_traits.argument_list_kinds_of_persistent `conc_traits::argument_list_kinds_of_persistent_t`]]
[def conc_traits::argument_list_kinds_of_persistent_v [link argot.ref.conc_traits.argument_list_kinds_of_persistent `conc_traits::argument_list_kinds_of_persistent_v`]]
[def conc_traits::argument_list_kinds_of_persistent [link argot.ref.conc_traits.argument_list_kinds_of_persistent `conc_traits::argument_list_kinds_of_persistent`]]
[def conc_traits::result_of_argument_list_kinds_of_persistent_t [link argot.ref.conc_traits.argument_list_kinds_of_persistent `conc_traits::result_of_argument_list_kinds_of_persistent_t`]]
[def conc_traits::result_of_argument_list_kinds_of_persistent [link argot.ref.conc_traits.argument_list_kinds_of_persistent `conc_traits::result_of_argument_list_kinds_of_persistent`]]

[def conc_traits_as_future conc_traits::as_future]
[def conc_traits::as_future_fn [link argot.ref.conc_traits.as_future `conc_traits::as_future_fn`]]
[def conc_traits::as_future_t [link argot.ref.conc_traits.as_future `conc_traits::as_future_t`]]
[def conc_traits::as_future_v [link argot.ref.conc_traits.as_future `conc_traits::as_future_v`]]
[def conc_traits::as_future [link argot.ref.conc_traits.as_future `conc_traits::as_future`]]
[def conc_traits::result_of_as_future_t [link argot.ref.conc_traits.as_future `conc_traits::result_of_as_future_t`]]
[def conc_traits::result_of_as_future [link argot.ref.conc_traits.as_future `conc_traits::result_of_as_future`]]

[def conc_traits_destructive_forgetful_then_provide conc_traits::destructive_forgetful_then_provide]
[def conc_traits::destructive_forgetful_then_provide_fn [link argot.ref.conc_traits.destructive_forgetful_then_provide `conc_traits::destructive_forgetful_then_provide_fn`]]
[def conc_traits::destructive_forgetful_then_provide_t [link argot.ref.conc_traits.destructive_forgetful_then_provide `conc_traits::destructive_forgetful_then_provide_t`]]
[def conc_traits::destructive_forgetful_then_provide_v [link argot.ref.conc_traits.destructive_forgetful_then_provide `conc_traits::destructive_forgetful_then_provide_v`]]
[def conc_traits::destructive_forgetful_then_provide [link argot.ref.conc_traits.destructive_forgetful_then_provide `conc_traits::destructive_forgetful_then_provide`]]
[def conc_traits::result_of_destructive_forgetful_then_provide_t [link argot.ref.conc_traits.destructive_forgetful_then_provide `conc_traits::result_of_destructive_forgetful_then_provide_t`]]
[def conc_traits::result_of_destructive_forgetful_then_provide [link argot.ref.conc_traits.destructive_forgetful_then_provide `conc_traits::result_of_destructive_forgetful_then_provide`]]

[def conc_traits_destructive_then_provide conc_traits::destructive_then_provide]
[def conc_traits::destructive_then_provide_fn [link argot.ref.conc_traits.destructive_then_provide `conc_traits::destructive_then_provide_fn`]]
[def conc_traits::destructive_then_provide_t [link argot.ref.conc_traits.destructive_then_provide `conc_traits::destructive_then_provide_t`]]
[def conc_traits::destructive_then_provide_v [link argot.ref.conc_traits.destructive_then_provide `conc_traits::destructive_then_provide_v`]]
[def conc_traits::destructive_then_provide [link argot.ref.conc_traits.destructive_then_provide `conc_traits::destructive_then_provide`]]
[def conc_traits::result_of_destructive_then_provide_t [link argot.ref.conc_traits.destructive_then_provide `conc_traits::result_of_destructive_then_provide_t`]]
[def conc_traits::result_of_destructive_then_provide [link argot.ref.conc_traits.destructive_then_provide `conc_traits::result_of_destructive_then_provide`]]

[def conc_traits_persistent_forgetful_then_provide conc_traits::persistent_forgetful_then_provide]
[def conc_traits::persistent_forgetful_then_provide_fn [link argot.ref.conc_traits.persistent_forgetful_then_provide `conc_traits::persistent_forgetful_then_provide_fn`]]
[def conc_traits::persistent_forgetful_then_provide_t [link argot.ref.conc_traits.persistent_forgetful_then_provide `conc_traits::persistent_forgetful_then_provide_t`]]
[def conc_traits::persistent_forgetful_then_provide_v [link argot.ref.conc_traits.persistent_forgetful_then_provide `conc_traits::persistent_forgetful_then_provide_v`]]
[def conc_traits::persistent_forgetful_then_provide [link argot.ref.conc_traits.persistent_forgetful_then_provide `conc_traits::persistent_forgetful_then_provide`]]
[def conc_traits::result_of_persistent_forgetful_then_provide_t [link argot.ref.conc_traits.persistent_forgetful_then_provide `conc_traits::result_of_persistent_forgetful_then_provide_t`]]
[def conc_traits::result_of_persistent_forgetful_then_provide [link argot.ref.conc_traits.persistent_forgetful_then_provide `conc_traits::result_of_persistent_forgetful_then_provide`]]

[def conc_traits_persistent_then_provide conc_traits::persistent_then_provide]
[def conc_traits::persistent_then_provide_fn [link argot.ref.conc_traits.persistent_then_provide `conc_traits::persistent_then_provide_fn`]]
[def conc_traits::persistent_then_provide_t [link argot.ref.conc_traits.persistent_then_provide `conc_traits::persistent_then_provide_t`]]
[def conc_traits::persistent_then_provide_v [link argot.ref.conc_traits.persistent_then_provide `conc_traits::persistent_then_provide_v`]]
[def conc_traits::persistent_then_provide [link argot.ref.conc_traits.persistent_then_provide `conc_traits::persistent_then_provide`]]
[def conc_traits::result_of_persistent_then_provide_t [link argot.ref.conc_traits.persistent_then_provide `conc_traits::result_of_persistent_then_provide_t`]]
[def conc_traits::result_of_persistent_then_provide [link argot.ref.conc_traits.persistent_then_provide `conc_traits::result_of_persistent_then_provide`]]

[def conc_traits_then_provide conc_traits::then_provide]
[def conc_traits::then_provide_fn [link argot.ref.conc_traits.then_provide `conc_traits::then_provide_fn`]]
[def conc_traits::then_provide_t [link argot.ref.conc_traits.then_provide `conc_traits::then_provide_t`]]
[def conc_traits::then_provide_v [link argot.ref.conc_traits.then_provide `conc_traits::then_provide_v`]]
[def conc_traits::then_provide [link argot.ref.conc_traits.then_provide `conc_traits::then_provide`]]
[def conc_traits::result_of_then_provide_t [link argot.ref.conc_traits.then_provide `conc_traits::result_of_then_provide_t`]]
[def conc_traits::result_of_then_provide [link argot.ref.conc_traits.then_provide `conc_traits::result_of_then_provide`]]

[def executor_defer_to executor::defer_to]
[def executor::defer_to_fn [link argot.ref.executor.defer_to `executor::defer_to_fn`]]
[def executor::defer_to_t [link argot.ref.executor.defer_to `executor::defer_to_t`]]
[def executor::defer_to_v [link argot.ref.executor.defer_to `executor::defer_to_v`]]
[def executor::defer_to [link argot.ref.executor.defer_to `executor::defer_to`]]
[def executor::result_of_defer_to_t [link argot.ref.executor.defer_to `executor::result_of_defer_to_t`]]
[def executor::result_of_defer_to [link argot.ref.executor.defer_to `executor::result_of_defer_to`]]

[def executor_dispatch_to executor::dispatch_to]
[def executor::dispatch_to_fn [link argot.ref.executor.dispatch_to `executor::dispatch_to_fn`]]
[def executor::dispatch_to_t [link argot.ref.executor.dispatch_to `executor::dispatch_to_t`]]
[def executor::dispatch_to_v [link argot.ref.executor.dispatch_to `executor::dispatch_to_v`]]
[def executor::dispatch_to [link argot.ref.executor.dispatch_to `executor::dispatch_to`]]
[def executor::result_of_dispatch_to_t [link argot.ref.executor.dispatch_to `executor::result_of_dispatch_to_t`]]
[def executor::result_of_dispatch_to [link argot.ref.executor.dispatch_to `executor::result_of_dispatch_to`]]

[def executor_immediate executor::immediate]
[def executor::immediate_fn [link argot.ref.executor.immediate `executor::immediate_fn`]]
[def executor::immediate_t [link argot.ref.executor.immediate `executor::immediate_t`]]
[def executor::immediate_v [link argot.ref.executor.immediate `executor::immediate_v`]]
[def executor::immediate [link argot.ref.executor.immediate `executor::immediate`]]
[def executor::result_of_immediate_t [link argot.ref.executor.immediate `executor::result_of_immediate_t`]]
[def executor::result_of_immediate [link argot.ref.executor.immediate `executor::result_of_immediate`]]

[def executor_post_to executor::post_to]
[def executor::post_to_fn [link argot.ref.executor.post_to `executor::post_to_fn`]]
[def executor::post_to_t [link argot.ref.executor.post_to `executor::post_to_t`]]
[def executor::post_to_v [link argot.ref.executor.post_to `executor::post_to_v`]]
[def executor::post_to [link argot.ref.executor.post_to `executor::post_to`]]
[def executor::result_of_post_to_t [link argot.ref.executor.post_to `executor::result_of_post_to_t`]]
[def executor::result_of_post_to [link argot.ref.executor.post_to `executor::result_of_post_to`]]

[def executor_stlab executor::stlab]
[def executor::stlab_fn [link argot.ref.executor.stlab `executor::stlab_fn`]]
[def executor::stlab_t [link argot.ref.executor.stlab `executor::stlab_t`]]
[def executor::stlab_v [link argot.ref.executor.stlab `executor::stlab_v`]]
[def executor::stlab [link argot.ref.executor.stlab `executor::stlab`]]
[def executor::result_of_stlab_t [link argot.ref.executor.stlab `executor::result_of_stlab_t`]]
[def executor::result_of_stlab [link argot.ref.executor.stlab `executor::result_of_stlab`]]

[def executor_traits_bind executor_traits::bind]
[def executor_traits::bind_fn [link argot.ref.executor_traits.bind `executor_traits::bind_fn`]]
[def executor_traits::bind_t [link argot.ref.executor_traits.bind `executor_traits::bind_t`]]
[def executor_traits::bind_v [link argot.ref.executor_traits.bind `executor_traits::bind_v`]]
[def executor_traits::bind [link argot.ref.executor_traits.bind `executor_traits::bind`]]
[def executor_traits::result_of_bind_t [link argot.ref.executor_traits.bind `executor_traits::result_of_bind_t`]]
[def executor_traits::result_of_bind [link argot.ref.executor_traits.bind `executor_traits::result_of_bind`]]

[def executor_traits_execute executor_traits::execute]
[def executor_traits::execute_fn [link argot.ref.executor_traits.execute `executor_traits::execute_fn`]]
[def executor_traits::execute_t [link argot.ref.executor_traits.execute `executor_traits::execute_t`]]
[def executor_traits::execute_v [link argot.ref.executor_traits.execute `executor_traits::execute_v`]]
[def executor_traits::execute [link argot.ref.executor_traits.execute `executor_traits::execute`]]
[def executor_traits::result_of_execute_t [link argot.ref.executor_traits.execute `executor_traits::result_of_execute_t`]]
[def executor_traits::result_of_execute [link argot.ref.executor_traits.execute `executor_traits::result_of_execute`]]

[def executor_traits_execute_immediately executor_traits::execute_immediately]
[def executor_traits::execute_immediately_fn [link argot.ref.executor_traits.execute_immediately `executor_traits::execute_immediately_fn`]]
[def executor_traits::execute_immediately_t [link argot.ref.executor_traits.execute_immediately `executor_traits::execute_immediately_t`]]
[def executor_traits::execute_immediately_v [link argot.ref.executor_traits.execute_immediately `executor_traits::execute_immediately_v`]]
[def executor_traits::execute_immediately [link argot.ref.executor_traits.execute_immediately `executor_traits::execute_immediately`]]
[def executor_traits::result_of_execute_immediately_t [link argot.ref.executor_traits.execute_immediately `executor_traits::result_of_execute_immediately_t`]]
[def executor_traits::result_of_execute_immediately [link argot.ref.executor_traits.execute_immediately `executor_traits::result_of_execute_immediately`]]

[def fut_augment fut::augment]
[def fut::augment_fn [link argot.ref.fut.augment `fut::augment_fn`]]
[def fut::augment_t [link argot.ref.fut.augment `fut::augment_t`]]
[def fut::augment_v [link argot.ref.fut.augment `fut::augment_v`]]
[def fut::augment [link argot.ref.fut.augment `fut::augment`]]
[def fut::result_of_augment_t [link argot.ref.fut.augment `fut::result_of_augment_t`]]
[def fut::result_of_augment [link argot.ref.fut.augment `fut::result_of_augment`]]

[def fut_future fut::future]
[def fut::future_fn [link argot.ref.fut.future `fut::future_fn`]]
[def fut::future_t [link argot.ref.fut.future `fut::future_t`]]
[def fut::future_v [link argot.ref.fut.future `fut::future_v`]]
[def fut::future [link argot.ref.fut.future `fut::future`]]
[def fut::result_of_future_t [link argot.ref.fut.future `fut::result_of_future_t`]]
[def fut::result_of_future [link argot.ref.fut.future `fut::result_of_future`]]

[def fut_ready fut::ready]
[def fut::ready_fn [link argot.ref.fut.ready `fut::ready_fn`]]
[def fut::ready_t [link argot.ref.fut.ready `fut::ready_t`]]
[def fut::ready_v [link argot.ref.fut.ready `fut::ready_v`]]
[def fut::ready [link argot.ref.fut.ready `fut::ready`]]
[def fut::result_of_ready_t [link argot.ref.fut.ready `fut::result_of_ready_t`]]
[def fut::result_of_ready [link argot.ref.fut.ready `fut::result_of_ready`]]

[def fut_ready_as fut::ready_as]
[def fut::ready_as_fn [link argot.ref.fut.ready_as `fut::ready_as_fn`]]
[def fut::ready_as_t [link argot.ref.fut.ready_as `fut::ready_as_t`]]
[def fut::ready_as_v [link argot.ref.fut.ready_as `fut::ready_as_v`]]
[def fut::ready_as [link argot.ref.fut.ready_as `fut::ready_as`]]
[def fut::result_of_ready_as_t [link argot.ref.fut.ready_as `fut::result_of_ready_as_t`]]
[def fut::result_of_ready_as [link argot.ref.fut.ready_as `fut::result_of_ready_as`]]

[def fut_squash fut::squash]
[def fut::squash_fn [link argot.ref.fut.squash `fut::squash_fn`]]
[def fut::squash_t [link argot.ref.fut.squash `fut::squash_t`]]
[def fut::squash_v [link argot.ref.fut.squash `fut::squash_v`]]
[def fut::squash [link argot.ref.fut.squash `fut::squash`]]
[def fut::result_of_squash_t [link argot.ref.fut.squash `fut::result_of_squash_t`]]
[def fut::result_of_squash [link argot.ref.fut.squash `fut::result_of_squash`]]

[def fut_traits_config fut_traits::config]
[def fut_traits::config_fn [link argot.ref.fut_traits.config `fut_traits::config_fn`]]
[def fut_traits::config_t [link argot.ref.fut_traits.config `fut_traits::config_t`]]
[def fut_traits::config_v [link argot.ref.fut_traits.config `fut_traits::config_v`]]
[def fut_traits::config [link argot.ref.fut_traits.config `fut_traits::config`]]
[def fut_traits::result_of_config_t [link argot.ref.fut_traits.config `fut_traits::result_of_config_t`]]
[def fut_traits::result_of_config [link argot.ref.fut_traits.config `fut_traits::result_of_config`]]

[def fut_traits_destructive_forgetful_then fut_traits::destructive_forgetful_then]
[def fut_traits::destructive_forgetful_then_fn [link argot.ref.fut_traits.destructive_forgetful_then `fut_traits::destructive_forgetful_then_fn`]]
[def fut_traits::destructive_forgetful_then_t [link argot.ref.fut_traits.destructive_forgetful_then `fut_traits::destructive_forgetful_then_t`]]
[def fut_traits::destructive_forgetful_then_v [link argot.ref.fut_traits.destructive_forgetful_then `fut_traits::destructive_forgetful_then_v`]]
[def fut_traits::destructive_forgetful_then [link argot.ref.fut_traits.destructive_forgetful_then `fut_traits::destructive_forgetful_then`]]
[def fut_traits::result_of_destructive_forgetful_then_t [link argot.ref.fut_traits.destructive_forgetful_then `fut_traits::result_of_destructive_forgetful_then_t`]]
[def fut_traits::result_of_destructive_forgetful_then [link argot.ref.fut_traits.destructive_forgetful_then `fut_traits::result_of_destructive_forgetful_then`]]

[def fut_traits_destructive_then fut_traits::destructive_then]
[def fut_traits::destructive_then_fn [link argot.ref.fut_traits.destructive_then `fut_traits::destructive_then_fn`]]
[def fut_traits::destructive_then_t [link argot.ref.fut_traits.destructive_then `fut_traits::destructive_then_t`]]
[def fut_traits::destructive_then_v [link argot.ref.fut_traits.destructive_then `fut_traits::destructive_then_v`]]
[def fut_traits::destructive_then [link argot.ref.fut_traits.destructive_then `fut_traits::destructive_then`]]
[def fut_traits::result_of_destructive_then_t [link argot.ref.fut_traits.destructive_then `fut_traits::result_of_destructive_then_t`]]
[def fut_traits::result_of_destructive_then [link argot.ref.fut_traits.destructive_then `fut_traits::result_of_destructive_then`]]

[def fut_traits_forgetful_then fut_traits::forgetful_then]
[def fut_traits::forgetful_then_fn [link argot.ref.fut_traits.forgetful_then `fut_traits::forgetful_then_fn`]]
[def fut_traits::forgetful_then_t [link argot.ref.fut_traits.forgetful_then `fut_traits::forgetful_then_t`]]
[def fut_traits::forgetful_then_v [link argot.ref.fut_traits.forgetful_then `fut_traits::forgetful_then_v`]]
[def fut_traits::forgetful_then [link argot.ref.fut_traits.forgetful_then `fut_traits::forgetful_then`]]
[def fut_traits::result_of_forgetful_then_t [link argot.ref.fut_traits.forgetful_then `fut_traits::result_of_forgetful_then_t`]]
[def fut_traits::result_of_forgetful_then [link argot.ref.fut_traits.forgetful_then `fut_traits::result_of_forgetful_then`]]

[def fut_traits_persistent_forgetful_then fut_traits::persistent_forgetful_then]
[def fut_traits::persistent_forgetful_then_fn [link argot.ref.fut_traits.persistent_forgetful_then `fut_traits::persistent_forgetful_then_fn`]]
[def fut_traits::persistent_forgetful_then_t [link argot.ref.fut_traits.persistent_forgetful_then `fut_traits::persistent_forgetful_then_t`]]
[def fut_traits::persistent_forgetful_then_v [link argot.ref.fut_traits.persistent_forgetful_then `fut_traits::persistent_forgetful_then_v`]]
[def fut_traits::persistent_forgetful_then [link argot.ref.fut_traits.persistent_forgetful_then `fut_traits::persistent_forgetful_then`]]
[def fut_traits::result_of_persistent_forgetful_then_t [link argot.ref.fut_traits.persistent_forgetful_then `fut_traits::result_of_persistent_forgetful_then_t`]]
[def fut_traits::result_of_persistent_forgetful_then [link argot.ref.fut_traits.persistent_forgetful_then `fut_traits::result_of_persistent_forgetful_then`]]

[def fut_traits_persistent_then fut_traits::persistent_then]
[def fut_traits::persistent_then_fn [link argot.ref.fut_traits.persistent_then `fut_traits::persistent_then_fn`]]
[def fut_traits::persistent_then_t [link argot.ref.fut_traits.persistent_then `fut_traits::persistent_then_t`]]
[def fut_traits::persistent_then_v [link argot.ref.fut_traits.persistent_then `fut_traits::persistent_then_v`]]
[def fut_traits::persistent_then [link argot.ref.fut_traits.persistent_then `fut_traits::persistent_then`]]
[def fut_traits::result_of_persistent_then_t [link argot.ref.fut_traits.persistent_then `fut_traits::result_of_persistent_then_t`]]
[def fut_traits::result_of_persistent_then [link argot.ref.fut_traits.persistent_then `fut_traits::result_of_persistent_then`]]

[def fut_traits_then fut_traits::then]
[def fut_traits::then_fn [link argot.ref.fut_traits.then `fut_traits::then_fn`]]
[def fut_traits::then_t [link argot.ref.fut_traits.then `fut_traits::then_t`]]
[def fut_traits::then_v [link argot.ref.fut_traits.then `fut_traits::then_v`]]
[def fut_traits::then [link argot.ref.fut_traits.then `fut_traits::then`]]
[def fut_traits::result_of_then_t [link argot.ref.fut_traits.then `fut_traits::result_of_then_t`]]
[def fut_traits::result_of_then [link argot.ref.fut_traits.then `fut_traits::result_of_then`]]

[def fut_traits_value_type fut_traits::value_type]
[def fut_traits::value_type_fn [link argot.ref.fut_traits.value_type `fut_traits::value_type_fn`]]
[def fut_traits::value_type_t [link argot.ref.fut_traits.value_type `fut_traits::value_type_t`]]
[def fut_traits::value_type_v [link argot.ref.fut_traits.value_type `fut_traits::value_type_v`]]
[def fut_traits::value_type [link argot.ref.fut_traits.value_type `fut_traits::value_type`]]
[def fut_traits::result_of_value_type_t [link argot.ref.fut_traits.value_type `fut_traits::result_of_value_type_t`]]
[def fut_traits::result_of_value_type [link argot.ref.fut_traits.value_type `fut_traits::result_of_value_type`]]

[def opt_traits_element_type opt_traits::element_type]
[def opt_traits::element_type_fn [link argot.ref.opt_traits.element_type `opt_traits::element_type_fn`]]
[def opt_traits::element_type_t [link argot.ref.opt_traits.element_type `opt_traits::element_type_t`]]
[def opt_traits::element_type_v [link argot.ref.opt_traits.element_type `opt_traits::element_type_v`]]
[def opt_traits::element_type [link argot.ref.opt_traits.element_type `opt_traits::element_type`]]
[def opt_traits::result_of_element_type_t [link argot.ref.opt_traits.element_type `opt_traits::result_of_element_type_t`]]
[def opt_traits::result_of_element_type [link argot.ref.opt_traits.element_type `opt_traits::result_of_element_type`]]

[def opt_traits_get opt_traits::get]
[def opt_traits::get_fn [link argot.ref.opt_traits.get `opt_traits::get_fn`]]
[def opt_traits::get_t [link argot.ref.opt_traits.get `opt_traits::get_t`]]
[def opt_traits::get_v [link argot.ref.opt_traits.get `opt_traits::get_v`]]
[def opt_traits::get [link argot.ref.opt_traits.get `opt_traits::get`]]
[def opt_traits::result_of_get_t [link argot.ref.opt_traits.get `opt_traits::result_of_get_t`]]
[def opt_traits::result_of_get [link argot.ref.opt_traits.get `opt_traits::result_of_get`]]

[def opt_traits_has_value opt_traits::has_value]
[def opt_traits::has_value_fn [link argot.ref.opt_traits.has_value `opt_traits::has_value_fn`]]
[def opt_traits::has_value_t [link argot.ref.opt_traits.has_value `opt_traits::has_value_t`]]
[def opt_traits::has_value_v [link argot.ref.opt_traits.has_value `opt_traits::has_value_v`]]
[def opt_traits::has_value [link argot.ref.opt_traits.has_value `opt_traits::has_value`]]
[def opt_traits::result_of_has_value_t [link argot.ref.opt_traits.has_value `opt_traits::result_of_has_value_t`]]
[def opt_traits::result_of_has_value [link argot.ref.opt_traits.has_value `opt_traits::result_of_has_value`]]

[def opt_traits_nil opt_traits::nil]
[def opt_traits::nil_fn [link argot.ref.opt_traits.nil `opt_traits::nil_fn`]]
[def opt_traits::nil_t [link argot.ref.opt_traits.nil `opt_traits::nil_t`]]
[def opt_traits::nil_v [link argot.ref.opt_traits.nil `opt_traits::nil_v`]]
[def opt_traits::nil [link argot.ref.opt_traits.nil `opt_traits::nil`]]
[def opt_traits::result_of_nil_t [link argot.ref.opt_traits.nil `opt_traits::result_of_nil_t`]]
[def opt_traits::result_of_nil [link argot.ref.opt_traits.nil `opt_traits::result_of_nil`]]

[def opt_traits_nil_element_type opt_traits::nil_element_type]
[def opt_traits::nil_element_type_fn [link argot.ref.opt_traits.nil_element_type `opt_traits::nil_element_type_fn`]]
[def opt_traits::nil_element_type_t [link argot.ref.opt_traits.nil_element_type `opt_traits::nil_element_type_t`]]
[def opt_traits::nil_element_type_v [link argot.ref.opt_traits.nil_element_type `opt_traits::nil_element_type_v`]]
[def opt_traits::nil_element_type [link argot.ref.opt_traits.nil_element_type `opt_traits::nil_element_type`]]
[def opt_traits::result_of_nil_element_type_t [link argot.ref.opt_traits.nil_element_type `opt_traits::result_of_nil_element_type_t`]]
[def opt_traits::result_of_nil_element_type [link argot.ref.opt_traits.nil_element_type `opt_traits::result_of_nil_element_type`]]

[def packager_boost_future packager::boost_future]
[def packager::boost_future_fn [link argot.ref.packager.boost_future `packager::boost_future_fn`]]
[def packager::boost_future_t [link argot.ref.packager.boost_future `packager::boost_future_t`]]
[def packager::boost_future_v [link argot.ref.packager.boost_future `packager::boost_future_v`]]
[def packager::boost_future [link argot.ref.packager.boost_future `packager::boost_future`]]
[def packager::result_of_boost_future_t [link argot.ref.packager.boost_future `packager::result_of_boost_future_t`]]
[def packager::result_of_boost_future [link argot.ref.packager.boost_future `packager::result_of_boost_future`]]

[def packager_boost_shared_future packager::boost_shared_future]
[def packager::boost_shared_future_fn [link argot.ref.packager.boost_shared_future `packager::boost_shared_future_fn`]]
[def packager::boost_shared_future_t [link argot.ref.packager.boost_shared_future `packager::boost_shared_future_t`]]
[def packager::boost_shared_future_v [link argot.ref.packager.boost_shared_future `packager::boost_shared_future_v`]]
[def packager::boost_shared_future [link argot.ref.packager.boost_shared_future `packager::boost_shared_future`]]
[def packager::result_of_boost_shared_future_t [link argot.ref.packager.boost_shared_future `packager::result_of_boost_shared_future_t`]]
[def packager::result_of_boost_shared_future [link argot.ref.packager.boost_shared_future `packager::result_of_boost_shared_future`]]

[def packager_packager_base packager::packager_base]
[def packager::packager_base_fn [link argot.ref.packager.packager_base `packager::packager_base_fn`]]
[def packager::packager_base_t [link argot.ref.packager.packager_base `packager::packager_base_t`]]
[def packager::packager_base_v [link argot.ref.packager.packager_base `packager::packager_base_v`]]
[def packager::packager_base [link argot.ref.packager.packager_base `packager::packager_base`]]
[def packager::result_of_packager_base_t [link argot.ref.packager.packager_base `packager::result_of_packager_base_t`]]
[def packager::result_of_packager_base [link argot.ref.packager.packager_base `packager::result_of_packager_base`]]

[def packager_packager_template packager::packager_template]
[def packager::packager_template_fn [link argot.ref.packager.packager_template `packager::packager_template_fn`]]
[def packager::packager_template_t [link argot.ref.packager.packager_template `packager::packager_template_t`]]
[def packager::packager_template_v [link argot.ref.packager.packager_template `packager::packager_template_v`]]
[def packager::packager_template [link argot.ref.packager.packager_template `packager::packager_template`]]
[def packager::result_of_packager_template_t [link argot.ref.packager.packager_template `packager::result_of_packager_template_t`]]
[def packager::result_of_packager_template [link argot.ref.packager.packager_template `packager::result_of_packager_template`]]

[def packager_stlab packager::stlab]
[def packager::stlab_fn [link argot.ref.packager.stlab `packager::stlab_fn`]]
[def packager::stlab_t [link argot.ref.packager.stlab `packager::stlab_t`]]
[def packager::stlab_v [link argot.ref.packager.stlab `packager::stlab_v`]]
[def packager::stlab [link argot.ref.packager.stlab `packager::stlab`]]
[def packager::result_of_stlab_t [link argot.ref.packager.stlab `packager::result_of_stlab_t`]]
[def packager::result_of_stlab [link argot.ref.packager.stlab `packager::result_of_stlab`]]

[def packager_traits_package packager_traits::package]
[def packager_traits::package_fn [link argot.ref.packager_traits.package `packager_traits::package_fn`]]
[def packager_traits::package_t [link argot.ref.packager_traits.package `packager_traits::package_t`]]
[def packager_traits::package_v [link argot.ref.packager_traits.package `packager_traits::package_v`]]
[def packager_traits::package [link argot.ref.packager_traits.package `packager_traits::package`]]
[def packager_traits::result_of_package_t [link argot.ref.packager_traits.package `packager_traits::result_of_package_t`]]
[def packager_traits::result_of_package [link argot.ref.packager_traits.package `packager_traits::result_of_package`]]

[def prov_abort prov::abort]
[def prov::abort_fn [link argot.ref.prov.abort `prov::abort_fn`]]
[def prov::abort_t [link argot.ref.prov.abort `prov::abort_t`]]
[def prov::abort_v [link argot.ref.prov.abort `prov::abort_v`]]
[def prov::abort [link argot.ref.prov.abort `prov::abort`]]
[def prov::result_of_abort_t [link argot.ref.prov.abort `prov::result_of_abort_t`]]
[def prov::result_of_abort [link argot.ref.prov.abort `prov::result_of_abort`]]

[def prov_access_tuple prov::access_tuple]
[def prov::access_tuple_fn [link argot.ref.prov.access_tuple `prov::access_tuple_fn`]]
[def prov::access_tuple_t [link argot.ref.prov.access_tuple `prov::access_tuple_t`]]
[def prov::access_tuple_v [link argot.ref.prov.access_tuple `prov::access_tuple_v`]]
[def prov::access_tuple [link argot.ref.prov.access_tuple `prov::access_tuple`]]
[def prov::result_of_access_tuple_t [link argot.ref.prov.access_tuple `prov::result_of_access_tuple_t`]]
[def prov::result_of_access_tuple [link argot.ref.prov.access_tuple `prov::result_of_access_tuple`]]

[def prov_access_union prov::access_union]
[def prov::access_union_fn [link argot.ref.prov.access_union `prov::access_union_fn`]]
[def prov::access_union_t [link argot.ref.prov.access_union `prov::access_union_t`]]
[def prov::access_union_v [link argot.ref.prov.access_union `prov::access_union_v`]]
[def prov::access_union [link argot.ref.prov.access_union `prov::access_union`]]
[def prov::result_of_access_union_t [link argot.ref.prov.access_union `prov::result_of_access_union_t`]]
[def prov::result_of_access_union [link argot.ref.prov.access_union `prov::result_of_access_union`]]

[def prov_access_variant prov::access_variant]
[def prov::access_variant_fn [link argot.ref.prov.access_variant `prov::access_variant_fn`]]
[def prov::access_variant_t [link argot.ref.prov.access_variant `prov::access_variant_t`]]
[def prov::access_variant_v [link argot.ref.prov.access_variant `prov::access_variant_v`]]
[def prov::access_variant [link argot.ref.prov.access_variant `prov::access_variant`]]
[def prov::result_of_access_variant_t [link argot.ref.prov.access_variant `prov::result_of_access_variant_t`]]
[def prov::result_of_access_variant [link argot.ref.prov.access_variant `prov::result_of_access_variant`]]

[def prov_alternative_of prov::alternative_of]
[def prov::alternative_of_fn [link argot.ref.prov.alternative_of `prov::alternative_of_fn`]]
[def prov::alternative_of_t [link argot.ref.prov.alternative_of `prov::alternative_of_t`]]
[def prov::alternative_of_v [link argot.ref.prov.alternative_of `prov::alternative_of_v`]]
[def prov::alternative_of [link argot.ref.prov.alternative_of `prov::alternative_of`]]
[def prov::result_of_alternative_of_t [link argot.ref.prov.alternative_of `prov::result_of_alternative_of_t`]]
[def prov::result_of_alternative_of [link argot.ref.prov.alternative_of `prov::result_of_alternative_of`]]

[def prov_alternative_of_by_value prov::alternative_of_by_value]
[def prov::alternative_of_by_value_fn [link argot.ref.prov.alternative_of_by_value `prov::alternative_of_by_value_fn`]]
[def prov::alternative_of_by_value_t [link argot.ref.prov.alternative_of_by_value `prov::alternative_of_by_value_t`]]
[def prov::alternative_of_by_value_v [link argot.ref.prov.alternative_of_by_value `prov::alternative_of_by_value_v`]]
[def prov::alternative_of_by_value [link argot.ref.prov.alternative_of_by_value `prov::alternative_of_by_value`]]
[def prov::result_of_alternative_of_by_value_t [link argot.ref.prov.alternative_of_by_value `prov::result_of_alternative_of_by_value_t`]]
[def prov::result_of_alternative_of_by_value [link argot.ref.prov.alternative_of_by_value `prov::result_of_alternative_of_by_value`]]

[def prov_as prov::as]
[def prov::as_fn [link argot.ref.prov.as `prov::as_fn`]]
[def prov::as_t [link argot.ref.prov.as `prov::as_t`]]
[def prov::as_v [link argot.ref.prov.as `prov::as_v`]]
[def prov::as [link argot.ref.prov.as `prov::as`]]
[def prov::result_of_as_t [link argot.ref.prov.as `prov::result_of_as_t`]]
[def prov::result_of_as [link argot.ref.prov.as `prov::result_of_as`]]

[def prov_assert_ prov::assert_]
[def prov::assert_fn [link argot.ref.prov.assert_ `prov::assert_fn`]]
[def prov::assert_t [link argot.ref.prov.assert_ `prov::assert_t`]]
[def prov::assert_v [link argot.ref.prov.assert_ `prov::assert_v`]]
[def prov::assert_ [link argot.ref.prov.assert_ `prov::assert_`]]
[def prov::result_of_assert_t [link argot.ref.prov.assert_ `prov::result_of_assert_t`]]
[def prov::result_of_assert_ [link argot.ref.prov.assert_ `prov::result_of_assert_`]]

[def prov_bind_call prov::bind_call]
[def prov::bind_call_fn [link argot.ref.prov.bind_call `prov::bind_call_fn`]]
[def prov::bind_call_t [link argot.ref.prov.bind_call `prov::bind_call_t`]]
[def prov::bind_call_v [link argot.ref.prov.bind_call `prov::bind_call_v`]]
[def prov::bind_call [link argot.ref.prov.bind_call `prov::bind_call`]]
[def prov::result_of_bind_call_t [link argot.ref.prov.bind_call `prov::result_of_bind_call_t`]]
[def prov::result_of_bind_call [link argot.ref.prov.bind_call `prov::result_of_bind_call`]]

[def prov_bind_transform prov::bind_transform]
[def prov::bind_transform_fn [link argot.ref.prov.bind_transform `prov::bind_transform_fn`]]
[def prov::bind_transform_t [link argot.ref.prov.bind_transform `prov::bind_transform_t`]]
[def prov::bind_transform_v [link argot.ref.prov.bind_transform `prov::bind_transform_v`]]
[def prov::bind_transform [link argot.ref.prov.bind_transform `prov::bind_transform`]]
[def prov::result_of_bind_transform_t [link argot.ref.prov.bind_transform `prov::result_of_bind_transform_t`]]
[def prov::result_of_bind_transform [link argot.ref.prov.bind_transform `prov::result_of_bind_transform`]]

[def prov_bool_ prov::bool_]
[def prov::bool_fn [link argot.ref.prov.bool_ `prov::bool_fn`]]
[def prov::bool_t [link argot.ref.prov.bool_ `prov::bool_t`]]
[def prov::bool_v [link argot.ref.prov.bool_ `prov::bool_v`]]
[def prov::bool_ [link argot.ref.prov.bool_ `prov::bool_`]]
[def prov::result_of_bool_t [link argot.ref.prov.bool_ `prov::result_of_bool_t`]]
[def prov::result_of_bool_ [link argot.ref.prov.bool_ `prov::result_of_bool_`]]

[def prov_boost_assert prov::boost_assert]
[def prov::boost_assert_fn [link argot.ref.prov.boost_assert `prov::boost_assert_fn`]]
[def prov::boost_assert_t [link argot.ref.prov.boost_assert `prov::boost_assert_t`]]
[def prov::boost_assert_v [link argot.ref.prov.boost_assert `prov::boost_assert_v`]]
[def prov::boost_assert [link argot.ref.prov.boost_assert `prov::boost_assert`]]
[def prov::result_of_boost_assert_t [link argot.ref.prov.boost_assert `prov::result_of_boost_assert_t`]]
[def prov::result_of_boost_assert [link argot.ref.prov.boost_assert `prov::result_of_boost_assert`]]

[def prov_conditional prov::conditional]
[def prov::conditional_fn [link argot.ref.prov.conditional `prov::conditional_fn`]]
[def prov::conditional_t [link argot.ref.prov.conditional `prov::conditional_t`]]
[def prov::conditional_v [link argot.ref.prov.conditional `prov::conditional_v`]]
[def prov::conditional [link argot.ref.prov.conditional `prov::conditional`]]
[def prov::result_of_conditional_t [link argot.ref.prov.conditional `prov::result_of_conditional_t`]]
[def prov::result_of_conditional [link argot.ref.prov.conditional `prov::result_of_conditional`]]

[def prov_default_to_reference_to prov::default_to_reference_to]
[def prov::default_to_reference_to_fn [link argot.ref.prov.default_to_reference_to `prov::default_to_reference_to_fn`]]
[def prov::default_to_reference_to_t [link argot.ref.prov.default_to_reference_to `prov::default_to_reference_to_t`]]
[def prov::default_to_reference_to_v [link argot.ref.prov.default_to_reference_to `prov::default_to_reference_to_v`]]
[def prov::default_to_reference_to [link argot.ref.prov.default_to_reference_to `prov::default_to_reference_to`]]
[def prov::result_of_default_to_reference_to_t [link argot.ref.prov.default_to_reference_to `prov::result_of_default_to_reference_to_t`]]
[def prov::result_of_default_to_reference_to [link argot.ref.prov.default_to_reference_to `prov::result_of_default_to_reference_to`]]

[def prov_default_to_value_of prov::default_to_value_of]
[def prov::default_to_value_of_fn [link argot.ref.prov.default_to_value_of `prov::default_to_value_of_fn`]]
[def prov::default_to_value_of_t [link argot.ref.prov.default_to_value_of `prov::default_to_value_of_t`]]
[def prov::default_to_value_of_v [link argot.ref.prov.default_to_value_of `prov::default_to_value_of_v`]]
[def prov::default_to_value_of [link argot.ref.prov.default_to_value_of `prov::default_to_value_of`]]
[def prov::result_of_default_to_value_of_t [link argot.ref.prov.default_to_value_of `prov::result_of_default_to_value_of_t`]]
[def prov::result_of_default_to_value_of [link argot.ref.prov.default_to_value_of `prov::result_of_default_to_value_of`]]

[def prov_drop prov::drop]
[def prov::drop_fn [link argot.ref.prov.drop `prov::drop_fn`]]
[def prov::drop_t [link argot.ref.prov.drop `prov::drop_t`]]
[def prov::drop_v [link argot.ref.prov.drop `prov::drop_v`]]
[def prov::drop [link argot.ref.prov.drop `prov::drop`]]
[def prov::result_of_drop_t [link argot.ref.prov.drop `prov::result_of_drop_t`]]
[def prov::result_of_drop [link argot.ref.prov.drop `prov::result_of_drop`]]

[def prov_drop_while prov::drop_while]
[def prov::drop_while_fn [link argot.ref.prov.drop_while `prov::drop_while_fn`]]
[def prov::drop_while_t [link argot.ref.prov.drop_while `prov::drop_while_t`]]
[def prov::drop_while_v [link argot.ref.prov.drop_while `prov::drop_while_v`]]
[def prov::drop_while [link argot.ref.prov.drop_while `prov::drop_while`]]
[def prov::result_of_drop_while_t [link argot.ref.prov.drop_while `prov::result_of_drop_while_t`]]
[def prov::result_of_drop_while [link argot.ref.prov.drop_while `prov::result_of_drop_while`]]

[def prov_eat prov::eat]
[def prov::eat_fn [link argot.ref.prov.eat `prov::eat_fn`]]
[def prov::eat_t [link argot.ref.prov.eat `prov::eat_t`]]
[def prov::eat_v [link argot.ref.prov.eat `prov::eat_v`]]
[def prov::eat [link argot.ref.prov.eat `prov::eat`]]
[def prov::result_of_eat_t [link argot.ref.prov.eat `prov::result_of_eat_t`]]
[def prov::result_of_eat [link argot.ref.prov.eat `prov::result_of_eat`]]

[def prov_element_or prov::element_or]
[def prov::element_or_fn [link argot.ref.prov.element_or `prov::element_or_fn`]]
[def prov::element_or_t [link argot.ref.prov.element_or `prov::element_or_t`]]
[def prov::element_or_v [link argot.ref.prov.element_or `prov::element_or_v`]]
[def prov::element_or [link argot.ref.prov.element_or `prov::element_or`]]
[def prov::result_of_element_or_t [link argot.ref.prov.element_or `prov::result_of_element_or_t`]]
[def prov::result_of_element_or [link argot.ref.prov.element_or `prov::result_of_element_or`]]

[def prov_element_or_nothing prov::element_or_nothing]
[def prov::element_or_nothing_fn [link argot.ref.prov.element_or_nothing `prov::element_or_nothing_fn`]]
[def prov::element_or_nothing_t [link argot.ref.prov.element_or_nothing `prov::element_or_nothing_t`]]
[def prov::element_or_nothing_v [link argot.ref.prov.element_or_nothing `prov::element_or_nothing_v`]]
[def prov::element_or_nothing [link argot.ref.prov.element_or_nothing `prov::element_or_nothing`]]
[def prov::result_of_element_or_nothing_t [link argot.ref.prov.element_or_nothing `prov::result_of_element_or_nothing_t`]]
[def prov::result_of_element_or_nothing [link argot.ref.prov.element_or_nothing `prov::result_of_element_or_nothing`]]

[def prov_element_or_provision prov::element_or_provision]
[def prov::element_or_provision_fn [link argot.ref.prov.element_or_provision `prov::element_or_provision_fn`]]
[def prov::element_or_provision_t [link argot.ref.prov.element_or_provision `prov::element_or_provision_t`]]
[def prov::element_or_provision_v [link argot.ref.prov.element_or_provision `prov::element_or_provision_v`]]
[def prov::element_or_provision [link argot.ref.prov.element_or_provision `prov::element_or_provision`]]
[def prov::result_of_element_or_provision_t [link argot.ref.prov.element_or_provision `prov::result_of_element_or_provision_t`]]
[def prov::result_of_element_or_provision [link argot.ref.prov.element_or_provision `prov::result_of_element_or_provision`]]

[def prov_exit prov::exit]
[def prov::exit_fn [link argot.ref.prov.exit `prov::exit_fn`]]
[def prov::exit_t [link argot.ref.prov.exit `prov::exit_t`]]
[def prov::exit_v [link argot.ref.prov.exit `prov::exit_v`]]
[def prov::exit [link argot.ref.prov.exit `prov::exit`]]
[def prov::result_of_exit_t [link argot.ref.prov.exit `prov::result_of_exit_t`]]
[def prov::result_of_exit [link argot.ref.prov.exit `prov::result_of_exit`]]

[def prov_expand prov::expand]
[def prov::expand_fn [link argot.ref.prov.expand `prov::expand_fn`]]
[def prov::expand_t [link argot.ref.prov.expand `prov::expand_t`]]
[def prov::expand_v [link argot.ref.prov.expand `prov::expand_v`]]
[def prov::expand [link argot.ref.prov.expand `prov::expand`]]
[def prov::result_of_expand_t [link argot.ref.prov.expand `prov::result_of_expand_t`]]
[def prov::result_of_expand [link argot.ref.prov.expand `prov::result_of_expand`]]

[def prov_for_ prov::for_]
[def prov::for_fn [link argot.ref.prov.for_ `prov::for_fn`]]
[def prov::for_t [link argot.ref.prov.for_ `prov::for_t`]]
[def prov::for_v [link argot.ref.prov.for_ `prov::for_v`]]
[def prov::for_ [link argot.ref.prov.for_ `prov::for_`]]
[def prov::result_of_for_t [link argot.ref.prov.for_ `prov::result_of_for_t`]]
[def prov::result_of_for_ [link argot.ref.prov.for_ `prov::result_of_for_`]]

[def prov_group prov::group]
[def prov::group_fn [link argot.ref.prov.group `prov::group_fn`]]
[def prov::group_t [link argot.ref.prov.group `prov::group_t`]]
[def prov::group_v [link argot.ref.prov.group `prov::group_v`]]
[def prov::group [link argot.ref.prov.group `prov::group`]]
[def prov::result_of_group_t [link argot.ref.prov.group `prov::result_of_group_t`]]
[def prov::result_of_group [link argot.ref.prov.group `prov::result_of_group`]]

[def prov_index_of prov::index_of]
[def prov::index_of_fn [link argot.ref.prov.index_of `prov::index_of_fn`]]
[def prov::index_of_t [link argot.ref.prov.index_of `prov::index_of_t`]]
[def prov::index_of_v [link argot.ref.prov.index_of `prov::index_of_v`]]
[def prov::index_of [link argot.ref.prov.index_of `prov::index_of`]]
[def prov::result_of_index_of_t [link argot.ref.prov.index_of `prov::result_of_index_of_t`]]
[def prov::result_of_index_of [link argot.ref.prov.index_of `prov::result_of_index_of`]]

[def prov_integer_sequence prov::integer_sequence]
[def prov::integer_sequence_fn [link argot.ref.prov.integer_sequence `prov::integer_sequence_fn`]]
[def prov::integer_sequence_t [link argot.ref.prov.integer_sequence `prov::integer_sequence_t`]]
[def prov::integer_sequence_v [link argot.ref.prov.integer_sequence `prov::integer_sequence_v`]]
[def prov::integer_sequence [link argot.ref.prov.integer_sequence `prov::integer_sequence`]]
[def prov::result_of_integer_sequence_t [link argot.ref.prov.integer_sequence `prov::result_of_integer_sequence_t`]]
[def prov::result_of_integer_sequence [link argot.ref.prov.integer_sequence `prov::result_of_integer_sequence`]]

[def prov_lift_call prov::lift_call]
[def prov::lift_call_fn [link argot.ref.prov.lift_call `prov::lift_call_fn`]]
[def prov::lift_call_t [link argot.ref.prov.lift_call `prov::lift_call_t`]]
[def prov::lift_call_v [link argot.ref.prov.lift_call `prov::lift_call_v`]]
[def prov::lift_call [link argot.ref.prov.lift_call `prov::lift_call`]]
[def prov::result_of_lift_call_t [link argot.ref.prov.lift_call `prov::result_of_lift_call_t`]]
[def prov::result_of_lift_call [link argot.ref.prov.lift_call `prov::result_of_lift_call`]]

[def prov_lift_transform prov::lift_transform]
[def prov::lift_transform_fn [link argot.ref.prov.lift_transform `prov::lift_transform_fn`]]
[def prov::lift_transform_t [link argot.ref.prov.lift_transform `prov::lift_transform_t`]]
[def prov::lift_transform_v [link argot.ref.prov.lift_transform `prov::lift_transform_v`]]
[def prov::lift_transform [link argot.ref.prov.lift_transform `prov::lift_transform`]]
[def prov::result_of_lift_transform_t [link argot.ref.prov.lift_transform `prov::result_of_lift_transform_t`]]
[def prov::result_of_lift_transform [link argot.ref.prov.lift_transform `prov::result_of_lift_transform`]]

[def prov_nothing prov::nothing]
[def prov::nothing_fn [link argot.ref.prov.nothing `prov::nothing_fn`]]
[def prov::nothing_t [link argot.ref.prov.nothing `prov::nothing_t`]]
[def prov::nothing_v [link argot.ref.prov.nothing `prov::nothing_v`]]
[def prov::nothing [link argot.ref.prov.nothing `prov::nothing`]]
[def prov::result_of_nothing_t [link argot.ref.prov.nothing `prov::result_of_nothing_t`]]
[def prov::result_of_nothing [link argot.ref.prov.nothing `prov::result_of_nothing`]]

[def prov_provider_reference prov::provider_reference]
[def prov::provider_reference_fn [link argot.ref.prov.provider_reference `prov::provider_reference_fn`]]
[def prov::provider_reference_t [link argot.ref.prov.provider_reference `prov::provider_reference_t`]]
[def prov::provider_reference_v [link argot.ref.prov.provider_reference `prov::provider_reference_v`]]
[def prov::provider_reference [link argot.ref.prov.provider_reference `prov::provider_reference`]]
[def prov::result_of_provider_reference_t [link argot.ref.prov.provider_reference `prov::result_of_provider_reference_t`]]
[def prov::result_of_provider_reference [link argot.ref.prov.provider_reference `prov::result_of_provider_reference`]]

[def prov_quick_exit prov::quick_exit]
[def prov::quick_exit_fn [link argot.ref.prov.quick_exit `prov::quick_exit_fn`]]
[def prov::quick_exit_t [link argot.ref.prov.quick_exit `prov::quick_exit_t`]]
[def prov::quick_exit_v [link argot.ref.prov.quick_exit `prov::quick_exit_v`]]
[def prov::quick_exit [link argot.ref.prov.quick_exit `prov::quick_exit`]]
[def prov::result_of_quick_exit_t [link argot.ref.prov.quick_exit `prov::result_of_quick_exit_t`]]
[def prov::result_of_quick_exit [link argot.ref.prov.quick_exit `prov::result_of_quick_exit`]]

[def prov_reference_to prov::reference_to]
[def prov::reference_to_fn [link argot.ref.prov.reference_to `prov::reference_to_fn`]]
[def prov::reference_to_t [link argot.ref.prov.reference_to `prov::reference_to_t`]]
[def prov::reference_to_v [link argot.ref.prov.reference_to `prov::reference_to_v`]]
[def prov::reference_to [link argot.ref.prov.reference_to `prov::reference_to`]]
[def prov::result_of_reference_to_t [link argot.ref.prov.reference_to `prov::result_of_reference_to_t`]]
[def prov::result_of_reference_to [link argot.ref.prov.reference_to `prov::result_of_reference_to`]]

[def prov_rethrow prov::rethrow]
[def prov::rethrow_fn [link argot.ref.prov.rethrow `prov::rethrow_fn`]]
[def prov::rethrow_t [link argot.ref.prov.rethrow `prov::rethrow_t`]]
[def prov::rethrow_v [link argot.ref.prov.rethrow `prov::rethrow_v`]]
[def prov::rethrow [link argot.ref.prov.rethrow `prov::rethrow`]]
[def prov::result_of_rethrow_t [link argot.ref.prov.rethrow `prov::result_of_rethrow_t`]]
[def prov::result_of_rethrow [link argot.ref.prov.rethrow `prov::result_of_rethrow`]]

[def prov_run prov::run]
[def prov::run_fn [link argot.ref.prov.run `prov::run_fn`]]
[def prov::run_t [link argot.ref.prov.run `prov::run_t`]]
[def prov::run_v [link argot.ref.prov.run `prov::run_v`]]
[def prov::run [link argot.ref.prov.run `prov::run`]]
[def prov::result_of_run_t [link argot.ref.prov.run `prov::result_of_run_t`]]
[def prov::result_of_run [link argot.ref.prov.run `prov::result_of_run`]]

[def prov_squash prov::squash]
[def prov::squash_fn [link argot.ref.prov.squash `prov::squash_fn`]]
[def prov::squash_t [link argot.ref.prov.squash `prov::squash_t`]]
[def prov::squash_v [link argot.ref.prov.squash `prov::squash_v`]]
[def prov::squash [link argot.ref.prov.squash `prov::squash`]]
[def prov::result_of_squash_t [link argot.ref.prov.squash `prov::result_of_squash_t`]]
[def prov::result_of_squash [link argot.ref.prov.squash `prov::result_of_squash`]]

[def prov_switch_ prov::switch_]
[def prov::switch_fn [link argot.ref.prov.switch_ `prov::switch_fn`]]
[def prov::switch_t [link argot.ref.prov.switch_ `prov::switch_t`]]
[def prov::switch_v [link argot.ref.prov.switch_ `prov::switch_v`]]
[def prov::switch_ [link argot.ref.prov.switch_ `prov::switch_`]]
[def prov::result_of_switch_t [link argot.ref.prov.switch_ `prov::result_of_switch_t`]]
[def prov::result_of_switch_ [link argot.ref.prov.switch_ `prov::result_of_switch_`]]

[def prov_terminate prov::terminate]
[def prov::terminate_fn [link argot.ref.prov.terminate `prov::terminate_fn`]]
[def prov::terminate_t [link argot.ref.prov.terminate `prov::terminate_t`]]
[def prov::terminate_v [link argot.ref.prov.terminate `prov::terminate_v`]]
[def prov::terminate [link argot.ref.prov.terminate `prov::terminate`]]
[def prov::result_of_terminate_t [link argot.ref.prov.terminate `prov::result_of_terminate_t`]]
[def prov::result_of_terminate [link argot.ref.prov.terminate `prov::result_of_terminate`]]

[def prov_throw_ prov::throw_]
[def prov::throw_fn [link argot.ref.prov.throw_ `prov::throw_fn`]]
[def prov::throw_t [link argot.ref.prov.throw_ `prov::throw_t`]]
[def prov::throw_v [link argot.ref.prov.throw_ `prov::throw_v`]]
[def prov::throw_ [link argot.ref.prov.throw_ `prov::throw_`]]
[def prov::result_of_throw_t [link argot.ref.prov.throw_ `prov::result_of_throw_t`]]
[def prov::result_of_throw_ [link argot.ref.prov.throw_ `prov::result_of_throw_`]]

[def prov_tuple_index prov::tuple_index]
[def prov::tuple_index_fn [link argot.ref.prov.tuple_index `prov::tuple_index_fn`]]
[def prov::tuple_index_t [link argot.ref.prov.tuple_index `prov::tuple_index_t`]]
[def prov::tuple_index_v [link argot.ref.prov.tuple_index `prov::tuple_index_v`]]
[def prov::tuple_index [link argot.ref.prov.tuple_index `prov::tuple_index`]]
[def prov::result_of_tuple_index_t [link argot.ref.prov.tuple_index `prov::result_of_tuple_index_t`]]
[def prov::result_of_tuple_index [link argot.ref.prov.tuple_index `prov::result_of_tuple_index`]]

[def prov_tuple_indices prov::tuple_indices]
[def prov::tuple_indices_fn [link argot.ref.prov.tuple_indices `prov::tuple_indices_fn`]]
[def prov::tuple_indices_t [link argot.ref.prov.tuple_indices `prov::tuple_indices_t`]]
[def prov::tuple_indices_v [link argot.ref.prov.tuple_indices `prov::tuple_indices_v`]]
[def prov::tuple_indices [link argot.ref.prov.tuple_indices `prov::tuple_indices`]]
[def prov::result_of_tuple_indices_t [link argot.ref.prov.tuple_indices `prov::result_of_tuple_indices_t`]]
[def prov::result_of_tuple_indices [link argot.ref.prov.tuple_indices `prov::result_of_tuple_indices`]]

[def prov_union_index prov::union_index]
[def prov::union_index_fn [link argot.ref.prov.union_index `prov::union_index_fn`]]
[def prov::union_index_t [link argot.ref.prov.union_index `prov::union_index_t`]]
[def prov::union_index_v [link argot.ref.prov.union_index `prov::union_index_v`]]
[def prov::union_index [link argot.ref.prov.union_index `prov::union_index`]]
[def prov::result_of_union_index_t [link argot.ref.prov.union_index `prov::result_of_union_index_t`]]
[def prov::result_of_union_index [link argot.ref.prov.union_index `prov::result_of_union_index`]]

[def prov_union_indices prov::union_indices]
[def prov::union_indices_fn [link argot.ref.prov.union_indices `prov::union_indices_fn`]]
[def prov::union_indices_t [link argot.ref.prov.union_indices `prov::union_indices_t`]]
[def prov::union_indices_v [link argot.ref.prov.union_indices `prov::union_indices_v`]]
[def prov::union_indices [link argot.ref.prov.union_indices `prov::union_indices`]]
[def prov::result_of_union_indices_t [link argot.ref.prov.union_indices `prov::result_of_union_indices_t`]]
[def prov::result_of_union_indices [link argot.ref.prov.union_indices `prov::result_of_union_indices`]]

[def prov_unpack prov::unpack]
[def prov::unpack_fn [link argot.ref.prov.unpack `prov::unpack_fn`]]
[def prov::unpack_t [link argot.ref.prov.unpack `prov::unpack_t`]]
[def prov::unpack_v [link argot.ref.prov.unpack `prov::unpack_v`]]
[def prov::unpack [link argot.ref.prov.unpack `prov::unpack`]]
[def prov::result_of_unpack_t [link argot.ref.prov.unpack `prov::result_of_unpack_t`]]
[def prov::result_of_unpack [link argot.ref.prov.unpack `prov::result_of_unpack`]]

[def prov_unpack_by_value prov::unpack_by_value]
[def prov::unpack_by_value_fn [link argot.ref.prov.unpack_by_value `prov::unpack_by_value_fn`]]
[def prov::unpack_by_value_t [link argot.ref.prov.unpack_by_value `prov::unpack_by_value_t`]]
[def prov::unpack_by_value_v [link argot.ref.prov.unpack_by_value `prov::unpack_by_value_v`]]
[def prov::unpack_by_value [link argot.ref.prov.unpack_by_value `prov::unpack_by_value`]]
[def prov::result_of_unpack_by_value_t [link argot.ref.prov.unpack_by_value `prov::result_of_unpack_by_value_t`]]
[def prov::result_of_unpack_by_value [link argot.ref.prov.unpack_by_value `prov::result_of_unpack_by_value`]]

[def prov_unpack_integer_sequence prov::unpack_integer_sequence]
[def prov::unpack_integer_sequence_fn [link argot.ref.prov.unpack_integer_sequence `prov::unpack_integer_sequence_fn`]]
[def prov::unpack_integer_sequence_t [link argot.ref.prov.unpack_integer_sequence `prov::unpack_integer_sequence_t`]]
[def prov::unpack_integer_sequence_v [link argot.ref.prov.unpack_integer_sequence `prov::unpack_integer_sequence_v`]]
[def prov::unpack_integer_sequence [link argot.ref.prov.unpack_integer_sequence `prov::unpack_integer_sequence`]]
[def prov::result_of_unpack_integer_sequence_t [link argot.ref.prov.unpack_integer_sequence `prov::result_of_unpack_integer_sequence_t`]]
[def prov::result_of_unpack_integer_sequence [link argot.ref.prov.unpack_integer_sequence `prov::result_of_unpack_integer_sequence`]]

[def prov_unreachable prov::unreachable]
[def prov::unreachable_fn [link argot.ref.prov.unreachable `prov::unreachable_fn`]]
[def prov::unreachable_t [link argot.ref.prov.unreachable `prov::unreachable_t`]]
[def prov::unreachable_v [link argot.ref.prov.unreachable `prov::unreachable_v`]]
[def prov::unreachable [link argot.ref.prov.unreachable `prov::unreachable`]]
[def prov::result_of_unreachable_t [link argot.ref.prov.unreachable `prov::result_of_unreachable_t`]]
[def prov::result_of_unreachable [link argot.ref.prov.unreachable `prov::result_of_unreachable`]]

[def prov_value_in_range prov::value_in_range]
[def prov::value_in_range_fn [link argot.ref.prov.value_in_range `prov::value_in_range_fn`]]
[def prov::value_in_range_t [link argot.ref.prov.value_in_range `prov::value_in_range_t`]]
[def prov::value_in_range_v [link argot.ref.prov.value_in_range `prov::value_in_range_v`]]
[def prov::value_in_range [link argot.ref.prov.value_in_range `prov::value_in_range`]]
[def prov::result_of_value_in_range_t [link argot.ref.prov.value_in_range `prov::result_of_value_in_range_t`]]
[def prov::result_of_value_in_range [link argot.ref.prov.value_in_range `prov::result_of_value_in_range`]]

[def prov_value_in_set prov::value_in_set]
[def prov::value_in_set_fn [link argot.ref.prov.value_in_set `prov::value_in_set_fn`]]
[def prov::value_in_set_t [link argot.ref.prov.value_in_set `prov::value_in_set_t`]]
[def prov::value_in_set_v [link argot.ref.prov.value_in_set `prov::value_in_set_v`]]
[def prov::value_in_set [link argot.ref.prov.value_in_set `prov::value_in_set`]]
[def prov::result_of_value_in_set_t [link argot.ref.prov.value_in_set `prov::result_of_value_in_set_t`]]
[def prov::result_of_value_in_set [link argot.ref.prov.value_in_set `prov::result_of_value_in_set`]]

[def prov_value_of prov::value_of]
[def prov::value_of_fn [link argot.ref.prov.value_of `prov::value_of_fn`]]
[def prov::value_of_t [link argot.ref.prov.value_of `prov::value_of_t`]]
[def prov::value_of_v [link argot.ref.prov.value_of `prov::value_of_v`]]
[def prov::value_of [link argot.ref.prov.value_of `prov::value_of`]]
[def prov::result_of_value_of_t [link argot.ref.prov.value_of `prov::result_of_value_of_t`]]
[def prov::result_of_value_of [link argot.ref.prov.value_of `prov::result_of_value_of`]]

[def prov_variant_index prov::variant_index]
[def prov::variant_index_fn [link argot.ref.prov.variant_index `prov::variant_index_fn`]]
[def prov::variant_index_t [link argot.ref.prov.variant_index `prov::variant_index_t`]]
[def prov::variant_index_v [link argot.ref.prov.variant_index `prov::variant_index_v`]]
[def prov::variant_index [link argot.ref.prov.variant_index `prov::variant_index`]]
[def prov::result_of_variant_index_t [link argot.ref.prov.variant_index `prov::result_of_variant_index_t`]]
[def prov::result_of_variant_index [link argot.ref.prov.variant_index `prov::result_of_variant_index`]]

[def prov_variant_indices prov::variant_indices]
[def prov::variant_indices_fn [link argot.ref.prov.variant_indices `prov::variant_indices_fn`]]
[def prov::variant_indices_t [link argot.ref.prov.variant_indices `prov::variant_indices_t`]]
[def prov::variant_indices_v [link argot.ref.prov.variant_indices `prov::variant_indices_v`]]
[def prov::variant_indices [link argot.ref.prov.variant_indices `prov::variant_indices`]]
[def prov::result_of_variant_indices_t [link argot.ref.prov.variant_indices `prov::result_of_variant_indices_t`]]
[def prov::result_of_variant_indices [link argot.ref.prov.variant_indices `prov::result_of_variant_indices`]]

[def prov_traits_argument_list_kinds_of prov_traits::argument_list_kinds_of]
[def prov_traits::argument_list_kinds_of_fn [link argot.ref.prov_traits.argument_list_kinds_of `prov_traits::argument_list_kinds_of_fn`]]
[def prov_traits::argument_list_kinds_of_t [link argot.ref.prov_traits.argument_list_kinds_of `prov_traits::argument_list_kinds_of_t`]]
[def prov_traits::argument_list_kinds_of_v [link argot.ref.prov_traits.argument_list_kinds_of `prov_traits::argument_list_kinds_of_v`]]
[def prov_traits::argument_list_kinds_of [link argot.ref.prov_traits.argument_list_kinds_of `prov_traits::argument_list_kinds_of`]]
[def prov_traits::result_of_argument_list_kinds_of_t [link argot.ref.prov_traits.argument_list_kinds_of `prov_traits::result_of_argument_list_kinds_of_t`]]
[def prov_traits::result_of_argument_list_kinds_of [link argot.ref.prov_traits.argument_list_kinds_of `prov_traits::result_of_argument_list_kinds_of`]]

[def prov_traits_argument_list_kinds_of_destructive prov_traits::argument_list_kinds_of_destructive]
[def prov_traits::argument_list_kinds_of_destructive_fn [link argot.ref.prov_traits.argument_list_kinds_of_destructive `prov_traits::argument_list_kinds_of_destructive_fn`]]
[def prov_traits::argument_list_kinds_of_destructive_t [link argot.ref.prov_traits.argument_list_kinds_of_destructive `prov_traits::argument_list_kinds_of_destructive_t`]]
[def prov_traits::argument_list_kinds_of_destructive_v [link argot.ref.prov_traits.argument_list_kinds_of_destructive `prov_traits::argument_list_kinds_of_destructive_v`]]
[def prov_traits::argument_list_kinds_of_destructive [link argot.ref.prov_traits.argument_list_kinds_of_destructive `prov_traits::argument_list_kinds_of_destructive`]]
[def prov_traits::result_of_argument_list_kinds_of_destructive_t [link argot.ref.prov_traits.argument_list_kinds_of_destructive `prov_traits::result_of_argument_list_kinds_of_destructive_t`]]
[def prov_traits::result_of_argument_list_kinds_of_destructive [link argot.ref.prov_traits.argument_list_kinds_of_destructive `prov_traits::result_of_argument_list_kinds_of_destructive`]]

[def prov_traits_argument_list_kinds_of_persistent prov_traits::argument_list_kinds_of_persistent]
[def prov_traits::argument_list_kinds_of_persistent_fn [link argot.ref.prov_traits.argument_list_kinds_of_persistent `prov_traits::argument_list_kinds_of_persistent_fn`]]
[def prov_traits::argument_list_kinds_of_persistent_t [link argot.ref.prov_traits.argument_list_kinds_of_persistent `prov_traits::argument_list_kinds_of_persistent_t`]]
[def prov_traits::argument_list_kinds_of_persistent_v [link argot.ref.prov_traits.argument_list_kinds_of_persistent `prov_traits::argument_list_kinds_of_persistent_v`]]
[def prov_traits::argument_list_kinds_of_persistent [link argot.ref.prov_traits.argument_list_kinds_of_persistent `prov_traits::argument_list_kinds_of_persistent`]]
[def prov_traits::result_of_argument_list_kinds_of_persistent_t [link argot.ref.prov_traits.argument_list_kinds_of_persistent `prov_traits::result_of_argument_list_kinds_of_persistent_t`]]
[def prov_traits::result_of_argument_list_kinds_of_persistent [link argot.ref.prov_traits.argument_list_kinds_of_persistent `prov_traits::result_of_argument_list_kinds_of_persistent`]]

[def prov_traits_destructive_provide prov_traits::destructive_provide]
[def prov_traits::destructive_provide_fn [link argot.ref.prov_traits.destructive_provide `prov_traits::destructive_provide_fn`]]
[def prov_traits::destructive_provide_t [link argot.ref.prov_traits.destructive_provide `prov_traits::destructive_provide_t`]]
[def prov_traits::destructive_provide_v [link argot.ref.prov_traits.destructive_provide `prov_traits::destructive_provide_v`]]
[def prov_traits::destructive_provide [link argot.ref.prov_traits.destructive_provide `prov_traits::destructive_provide`]]
[def prov_traits::result_of_destructive_provide_t [link argot.ref.prov_traits.destructive_provide `prov_traits::result_of_destructive_provide_t`]]
[def prov_traits::result_of_destructive_provide [link argot.ref.prov_traits.destructive_provide `prov_traits::result_of_destructive_provide`]]

[def prov_traits_persistent_provide prov_traits::persistent_provide]
[def prov_traits::persistent_provide_fn [link argot.ref.prov_traits.persistent_provide `prov_traits::persistent_provide_fn`]]
[def prov_traits::persistent_provide_t [link argot.ref.prov_traits.persistent_provide `prov_traits::persistent_provide_t`]]
[def prov_traits::persistent_provide_v [link argot.ref.prov_traits.persistent_provide `prov_traits::persistent_provide_v`]]
[def prov_traits::persistent_provide [link argot.ref.prov_traits.persistent_provide `prov_traits::persistent_provide`]]
[def prov_traits::result_of_persistent_provide_t [link argot.ref.prov_traits.persistent_provide `prov_traits::result_of_persistent_provide_t`]]
[def prov_traits::result_of_persistent_provide [link argot.ref.prov_traits.persistent_provide `prov_traits::result_of_persistent_provide`]]

[def prov_traits_provide prov_traits::provide]
[def prov_traits::provide_fn [link argot.ref.prov_traits.provide `prov_traits::provide_fn`]]
[def prov_traits::provide_t [link argot.ref.prov_traits.provide `prov_traits::provide_t`]]
[def prov_traits::provide_v [link argot.ref.prov_traits.provide `prov_traits::provide_v`]]
[def prov_traits::provide [link argot.ref.prov_traits.provide `prov_traits::provide`]]
[def prov_traits::result_of_provide_t [link argot.ref.prov_traits.provide `prov_traits::result_of_provide_t`]]
[def prov_traits::result_of_provide [link argot.ref.prov_traits.provide `prov_traits::result_of_provide`]]

[def receiver_do_nothing receiver::do_nothing]
[def receiver::do_nothing_fn [link argot.ref.receiver.do_nothing `receiver::do_nothing_fn`]]
[def receiver::do_nothing_t [link argot.ref.receiver.do_nothing `receiver::do_nothing_t`]]
[def receiver::do_nothing_v [link argot.ref.receiver.do_nothing `receiver::do_nothing_v`]]
[def receiver::do_nothing [link argot.ref.receiver.do_nothing `receiver::do_nothing`]]
[def receiver::result_of_do_nothing_t [link argot.ref.receiver.do_nothing `receiver::result_of_do_nothing_t`]]
[def receiver::result_of_do_nothing [link argot.ref.receiver.do_nothing `receiver::result_of_do_nothing`]]

[def receiver_forgetful_invoke receiver::forgetful_invoke]
[def receiver::forgetful_invoke_fn [link argot.ref.receiver.forgetful_invoke `receiver::forgetful_invoke_fn`]]
[def receiver::forgetful_invoke_t [link argot.ref.receiver.forgetful_invoke `receiver::forgetful_invoke_t`]]
[def receiver::forgetful_invoke_v [link argot.ref.receiver.forgetful_invoke `receiver::forgetful_invoke_v`]]
[def receiver::forgetful_invoke [link argot.ref.receiver.forgetful_invoke `receiver::forgetful_invoke`]]
[def receiver::result_of_forgetful_invoke_t [link argot.ref.receiver.forgetful_invoke `receiver::result_of_forgetful_invoke_t`]]
[def receiver::result_of_forgetful_invoke [link argot.ref.receiver.forgetful_invoke `receiver::result_of_forgetful_invoke`]]

[def receiver_forward_result_to receiver::forward_result_to]
[def receiver::forward_result_to_fn [link argot.ref.receiver.forward_result_to `receiver::forward_result_to_fn`]]
[def receiver::forward_result_to_t [link argot.ref.receiver.forward_result_to `receiver::forward_result_to_t`]]
[def receiver::forward_result_to_v [link argot.ref.receiver.forward_result_to `receiver::forward_result_to_v`]]
[def receiver::forward_result_to [link argot.ref.receiver.forward_result_to `receiver::forward_result_to`]]
[def receiver::result_of_forward_result_to_t [link argot.ref.receiver.forward_result_to `receiver::result_of_forward_result_to_t`]]
[def receiver::result_of_forward_result_to [link argot.ref.receiver.forward_result_to `receiver::result_of_forward_result_to`]]

[def receiver_forward_transformed_arguments receiver::forward_transformed_arguments]
[def receiver::forward_transformed_arguments_fn [link argot.ref.receiver.forward_transformed_arguments `receiver::forward_transformed_arguments_fn`]]
[def receiver::forward_transformed_arguments_t [link argot.ref.receiver.forward_transformed_arguments `receiver::forward_transformed_arguments_t`]]
[def receiver::forward_transformed_arguments_v [link argot.ref.receiver.forward_transformed_arguments `receiver::forward_transformed_arguments_v`]]
[def receiver::forward_transformed_arguments [link argot.ref.receiver.forward_transformed_arguments `receiver::forward_transformed_arguments`]]
[def receiver::result_of_forward_transformed_arguments_t [link argot.ref.receiver.forward_transformed_arguments `receiver::result_of_forward_transformed_arguments_t`]]
[def receiver::result_of_forward_transformed_arguments [link argot.ref.receiver.forward_transformed_arguments `receiver::result_of_forward_transformed_arguments`]]

[def receiver_graphviz_dot receiver::graphviz_dot]
[def receiver::graphviz_dot_fn [link argot.ref.receiver.graphviz_dot `receiver::graphviz_dot_fn`]]
[def receiver::graphviz_dot_t [link argot.ref.receiver.graphviz_dot `receiver::graphviz_dot_t`]]
[def receiver::graphviz_dot_v [link argot.ref.receiver.graphviz_dot `receiver::graphviz_dot_v`]]
[def receiver::graphviz_dot [link argot.ref.receiver.graphviz_dot `receiver::graphviz_dot`]]
[def receiver::result_of_graphviz_dot_t [link argot.ref.receiver.graphviz_dot `receiver::result_of_graphviz_dot_t`]]
[def receiver::result_of_graphviz_dot [link argot.ref.receiver.graphviz_dot `receiver::result_of_graphviz_dot`]]

[def receiver_nested_receiver receiver::nested_receiver]
[def receiver::nested_receiver_fn [link argot.ref.receiver.nested_receiver `receiver::nested_receiver_fn`]]
[def receiver::nested_receiver_t [link argot.ref.receiver.nested_receiver `receiver::nested_receiver_t`]]
[def receiver::nested_receiver_v [link argot.ref.receiver.nested_receiver `receiver::nested_receiver_v`]]
[def receiver::nested_receiver [link argot.ref.receiver.nested_receiver `receiver::nested_receiver`]]
[def receiver::result_of_nested_receiver_t [link argot.ref.receiver.nested_receiver `receiver::result_of_nested_receiver_t`]]
[def receiver::result_of_nested_receiver [link argot.ref.receiver.nested_receiver `receiver::result_of_nested_receiver`]]

[def receiver_provide_arguments_to receiver::provide_arguments_to]
[def receiver::provide_arguments_to_fn [link argot.ref.receiver.provide_arguments_to `receiver::provide_arguments_to_fn`]]
[def receiver::provide_arguments_to_t [link argot.ref.receiver.provide_arguments_to `receiver::provide_arguments_to_t`]]
[def receiver::provide_arguments_to_v [link argot.ref.receiver.provide_arguments_to `receiver::provide_arguments_to_v`]]
[def receiver::provide_arguments_to [link argot.ref.receiver.provide_arguments_to `receiver::provide_arguments_to`]]
[def receiver::result_of_provide_arguments_to_t [link argot.ref.receiver.provide_arguments_to `receiver::result_of_provide_arguments_to_t`]]
[def receiver::result_of_provide_arguments_to [link argot.ref.receiver.provide_arguments_to `receiver::result_of_provide_arguments_to`]]

[def receiver_receiver_reference receiver::receiver_reference]
[def receiver::receiver_reference_fn [link argot.ref.receiver.receiver_reference `receiver::receiver_reference_fn`]]
[def receiver::receiver_reference_t [link argot.ref.receiver.receiver_reference `receiver::receiver_reference_t`]]
[def receiver::receiver_reference_v [link argot.ref.receiver.receiver_reference `receiver::receiver_reference_v`]]
[def receiver::receiver_reference [link argot.ref.receiver.receiver_reference `receiver::receiver_reference`]]
[def receiver::result_of_receiver_reference_t [link argot.ref.receiver.receiver_reference `receiver::result_of_receiver_reference_t`]]
[def receiver::result_of_receiver_reference [link argot.ref.receiver.receiver_reference `receiver::result_of_receiver_reference`]]

[def receiver_reduced_invoke receiver::reduced_invoke]
[def receiver::reduced_invoke_fn [link argot.ref.receiver.reduced_invoke `receiver::reduced_invoke_fn`]]
[def receiver::reduced_invoke_t [link argot.ref.receiver.reduced_invoke `receiver::reduced_invoke_t`]]
[def receiver::reduced_invoke_v [link argot.ref.receiver.reduced_invoke `receiver::reduced_invoke_v`]]
[def receiver::reduced_invoke [link argot.ref.receiver.reduced_invoke `receiver::reduced_invoke`]]
[def receiver::result_of_reduced_invoke_t [link argot.ref.receiver.reduced_invoke `receiver::result_of_reduced_invoke_t`]]
[def receiver::result_of_reduced_invoke [link argot.ref.receiver.reduced_invoke `receiver::result_of_reduced_invoke`]]

[def receiver_return_argument_list_kinds receiver::return_argument_list_kinds]
[def receiver::return_argument_list_kinds_fn [link argot.ref.receiver.return_argument_list_kinds `receiver::return_argument_list_kinds_fn`]]
[def receiver::return_argument_list_kinds_t [link argot.ref.receiver.return_argument_list_kinds `receiver::return_argument_list_kinds_t`]]
[def receiver::return_argument_list_kinds_v [link argot.ref.receiver.return_argument_list_kinds `receiver::return_argument_list_kinds_v`]]
[def receiver::return_argument_list_kinds [link argot.ref.receiver.return_argument_list_kinds `receiver::return_argument_list_kinds`]]
[def receiver::result_of_return_argument_list_kinds_t [link argot.ref.receiver.return_argument_list_kinds `receiver::result_of_return_argument_list_kinds_t`]]
[def receiver::result_of_return_argument_list_kinds [link argot.ref.receiver.return_argument_list_kinds `receiver::result_of_return_argument_list_kinds`]]

[def receiver_return_argument_references receiver::return_argument_references]
[def receiver::return_argument_references_fn [link argot.ref.receiver.return_argument_references `receiver::return_argument_references_fn`]]
[def receiver::return_argument_references_t [link argot.ref.receiver.return_argument_references `receiver::return_argument_references_t`]]
[def receiver::return_argument_references_v [link argot.ref.receiver.return_argument_references `receiver::return_argument_references_v`]]
[def receiver::return_argument_references [link argot.ref.receiver.return_argument_references `receiver::return_argument_references`]]
[def receiver::result_of_return_argument_references_t [link argot.ref.receiver.return_argument_references `receiver::result_of_return_argument_references_t`]]
[def receiver::result_of_return_argument_references [link argot.ref.receiver.return_argument_references `receiver::result_of_return_argument_references`]]

[def receiver_return_argument_values receiver::return_argument_values]
[def receiver::return_argument_values_fn [link argot.ref.receiver.return_argument_values `receiver::return_argument_values_fn`]]
[def receiver::return_argument_values_t [link argot.ref.receiver.return_argument_values `receiver::return_argument_values_t`]]
[def receiver::return_argument_values_v [link argot.ref.receiver.return_argument_values `receiver::return_argument_values_v`]]
[def receiver::return_argument_values [link argot.ref.receiver.return_argument_values `receiver::return_argument_values`]]
[def receiver::result_of_return_argument_values_t [link argot.ref.receiver.return_argument_values `receiver::result_of_return_argument_values_t`]]
[def receiver::result_of_return_argument_values [link argot.ref.receiver.return_argument_values `receiver::result_of_return_argument_values`]]

[def receiver_return_graphviz_dot receiver::return_graphviz_dot]
[def receiver::return_graphviz_dot_fn [link argot.ref.receiver.return_graphviz_dot `receiver::return_graphviz_dot_fn`]]
[def receiver::return_graphviz_dot_t [link argot.ref.receiver.return_graphviz_dot `receiver::return_graphviz_dot_t`]]
[def receiver::return_graphviz_dot_v [link argot.ref.receiver.return_graphviz_dot `receiver::return_graphviz_dot_v`]]
[def receiver::return_graphviz_dot [link argot.ref.receiver.return_graphviz_dot `receiver::return_graphviz_dot`]]
[def receiver::result_of_return_graphviz_dot_t [link argot.ref.receiver.return_graphviz_dot `receiver::result_of_return_graphviz_dot_t`]]
[def receiver::result_of_return_graphviz_dot [link argot.ref.receiver.return_graphviz_dot `receiver::result_of_return_graphviz_dot`]]

[def receiver_return_single_argument_value receiver::return_single_argument_value]
[def receiver::return_single_argument_value_fn [link argot.ref.receiver.return_single_argument_value `receiver::return_single_argument_value_fn`]]
[def receiver::return_single_argument_value_t [link argot.ref.receiver.return_single_argument_value `receiver::return_single_argument_value_t`]]
[def receiver::return_single_argument_value_v [link argot.ref.receiver.return_single_argument_value `receiver::return_single_argument_value_v`]]
[def receiver::return_single_argument_value [link argot.ref.receiver.return_single_argument_value `receiver::return_single_argument_value`]]
[def receiver::result_of_return_single_argument_value_t [link argot.ref.receiver.return_single_argument_value `receiver::result_of_return_single_argument_value_t`]]
[def receiver::result_of_return_single_argument_value [link argot.ref.receiver.return_single_argument_value `receiver::result_of_return_single_argument_value`]]

[def receiver_with_leading_arguments receiver::with_leading_arguments]
[def receiver::with_leading_arguments_fn [link argot.ref.receiver.with_leading_arguments `receiver::with_leading_arguments_fn`]]
[def receiver::with_leading_arguments_t [link argot.ref.receiver.with_leading_arguments `receiver::with_leading_arguments_t`]]
[def receiver::with_leading_arguments_v [link argot.ref.receiver.with_leading_arguments `receiver::with_leading_arguments_v`]]
[def receiver::with_leading_arguments [link argot.ref.receiver.with_leading_arguments `receiver::with_leading_arguments`]]
[def receiver::result_of_with_leading_arguments_t [link argot.ref.receiver.with_leading_arguments `receiver::result_of_with_leading_arguments_t`]]
[def receiver::result_of_with_leading_arguments [link argot.ref.receiver.with_leading_arguments `receiver::result_of_with_leading_arguments`]]

[def receiver_with_leading_values receiver::with_leading_values]
[def receiver::with_leading_values_fn [link argot.ref.receiver.with_leading_values `receiver::with_leading_values_fn`]]
[def receiver::with_leading_values_t [link argot.ref.receiver.with_leading_values `receiver::with_leading_values_t`]]
[def receiver::with_leading_values_v [link argot.ref.receiver.with_leading_values `receiver::with_leading_values_v`]]
[def receiver::with_leading_values [link argot.ref.receiver.with_leading_values `receiver::with_leading_values`]]
[def receiver::result_of_with_leading_values_t [link argot.ref.receiver.with_leading_values `receiver::result_of_with_leading_values_t`]]
[def receiver::result_of_with_leading_values [link argot.ref.receiver.with_leading_values `receiver::result_of_with_leading_values`]]

[def receiver_with_trailing_concurrent_provider receiver::with_trailing_concurrent_provider]
[def receiver::with_trailing_concurrent_provider_fn [link argot.ref.receiver.with_trailing_concurrent_provider `receiver::with_trailing_concurrent_provider_fn`]]
[def receiver::with_trailing_concurrent_provider_t [link argot.ref.receiver.with_trailing_concurrent_provider `receiver::with_trailing_concurrent_provider_t`]]
[def receiver::with_trailing_concurrent_provider_v [link argot.ref.receiver.with_trailing_concurrent_provider `receiver::with_trailing_concurrent_provider_v`]]
[def receiver::with_trailing_concurrent_provider [link argot.ref.receiver.with_trailing_concurrent_provider `receiver::with_trailing_concurrent_provider`]]
[def receiver::result_of_with_trailing_concurrent_provider_t [link argot.ref.receiver.with_trailing_concurrent_provider `receiver::result_of_with_trailing_concurrent_provider_t`]]
[def receiver::result_of_with_trailing_concurrent_provider [link argot.ref.receiver.with_trailing_concurrent_provider `receiver::result_of_with_trailing_concurrent_provider`]]

[def receiver_with_trailing_provider receiver::with_trailing_provider]
[def receiver::with_trailing_provider_fn [link argot.ref.receiver.with_trailing_provider `receiver::with_trailing_provider_fn`]]
[def receiver::with_trailing_provider_t [link argot.ref.receiver.with_trailing_provider `receiver::with_trailing_provider_t`]]
[def receiver::with_trailing_provider_v [link argot.ref.receiver.with_trailing_provider `receiver::with_trailing_provider_v`]]
[def receiver::with_trailing_provider [link argot.ref.receiver.with_trailing_provider `receiver::with_trailing_provider`]]
[def receiver::result_of_with_trailing_provider_t [link argot.ref.receiver.with_trailing_provider `receiver::result_of_with_trailing_provider_t`]]
[def receiver::result_of_with_trailing_provider [link argot.ref.receiver.with_trailing_provider `receiver::result_of_with_trailing_provider`]]

[def receiver_traits_argument_list_kinds receiver_traits::argument_list_kinds]
[def receiver_traits::argument_list_kinds_fn [link argot.ref.receiver_traits.argument_list_kinds `receiver_traits::argument_list_kinds_fn`]]
[def receiver_traits::argument_list_kinds_t [link argot.ref.receiver_traits.argument_list_kinds `receiver_traits::argument_list_kinds_t`]]
[def receiver_traits::argument_list_kinds_v [link argot.ref.receiver_traits.argument_list_kinds `receiver_traits::argument_list_kinds_v`]]
[def receiver_traits::argument_list_kinds [link argot.ref.receiver_traits.argument_list_kinds `receiver_traits::argument_list_kinds`]]
[def receiver_traits::result_of_argument_list_kinds_t [link argot.ref.receiver_traits.argument_list_kinds `receiver_traits::result_of_argument_list_kinds_t`]]
[def receiver_traits::result_of_argument_list_kinds [link argot.ref.receiver_traits.argument_list_kinds `receiver_traits::result_of_argument_list_kinds`]]

[def receiver_traits_argument_types receiver_traits::argument_types]
[def receiver_traits::argument_types_fn [link argot.ref.receiver_traits.argument_types `receiver_traits::argument_types_fn`]]
[def receiver_traits::argument_types_t [link argot.ref.receiver_traits.argument_types `receiver_traits::argument_types_t`]]
[def receiver_traits::argument_types_v [link argot.ref.receiver_traits.argument_types `receiver_traits::argument_types_v`]]
[def receiver_traits::argument_types [link argot.ref.receiver_traits.argument_types `receiver_traits::argument_types`]]
[def receiver_traits::result_of_argument_types_t [link argot.ref.receiver_traits.argument_types `receiver_traits::result_of_argument_types_t`]]
[def receiver_traits::result_of_argument_types [link argot.ref.receiver_traits.argument_types `receiver_traits::result_of_argument_types`]]

[def receiver_traits_branch_to_provision receiver_traits::branch_to_provision]
[def receiver_traits::branch_to_provision_fn [link argot.ref.receiver_traits.branch_to_provision `receiver_traits::branch_to_provision_fn`]]
[def receiver_traits::branch_to_provision_t [link argot.ref.receiver_traits.branch_to_provision `receiver_traits::branch_to_provision_t`]]
[def receiver_traits::branch_to_provision_v [link argot.ref.receiver_traits.branch_to_provision `receiver_traits::branch_to_provision_v`]]
[def receiver_traits::branch_to_provision [link argot.ref.receiver_traits.branch_to_provision `receiver_traits::branch_to_provision`]]
[def receiver_traits::result_of_branch_to_provision_t [link argot.ref.receiver_traits.branch_to_provision `receiver_traits::result_of_branch_to_provision_t`]]
[def receiver_traits::result_of_branch_to_provision [link argot.ref.receiver_traits.branch_to_provision `receiver_traits::result_of_branch_to_provision`]]

[def receiver_traits_partitioned_provider_types receiver_traits::partitioned_provider_types]
[def receiver_traits::partitioned_provider_types_fn [link argot.ref.receiver_traits.partitioned_provider_types `receiver_traits::partitioned_provider_types_fn`]]
[def receiver_traits::partitioned_provider_types_t [link argot.ref.receiver_traits.partitioned_provider_types `receiver_traits::partitioned_provider_types_t`]]
[def receiver_traits::partitioned_provider_types_v [link argot.ref.receiver_traits.partitioned_provider_types `receiver_traits::partitioned_provider_types_v`]]
[def receiver_traits::partitioned_provider_types [link argot.ref.receiver_traits.partitioned_provider_types `receiver_traits::partitioned_provider_types`]]
[def receiver_traits::result_of_partitioned_provider_types_t [link argot.ref.receiver_traits.partitioned_provider_types `receiver_traits::result_of_partitioned_provider_types_t`]]
[def receiver_traits::result_of_partitioned_provider_types [link argot.ref.receiver_traits.partitioned_provider_types `receiver_traits::result_of_partitioned_provider_types`]]

[def receiver_traits_provider_types receiver_traits::provider_types]
[def receiver_traits::provider_types_fn [link argot.ref.receiver_traits.provider_types `receiver_traits::provider_types_fn`]]
[def receiver_traits::provider_types_t [link argot.ref.receiver_traits.provider_types `receiver_traits::provider_types_t`]]
[def receiver_traits::provider_types_v [link argot.ref.receiver_traits.provider_types `receiver_traits::provider_types_v`]]
[def receiver_traits::provider_types [link argot.ref.receiver_traits.provider_types `receiver_traits::provider_types`]]
[def receiver_traits::result_of_provider_types_t [link argot.ref.receiver_traits.provider_types `receiver_traits::result_of_provider_types_t`]]
[def receiver_traits::result_of_provider_types [link argot.ref.receiver_traits.provider_types `receiver_traits::result_of_provider_types`]]

[def receiver_traits_receive receiver_traits::receive]
[def receiver_traits::receive_fn [link argot.ref.receiver_traits.receive `receiver_traits::receive_fn`]]
[def receiver_traits::receive_t [link argot.ref.receiver_traits.receive `receiver_traits::receive_t`]]
[def receiver_traits::receive_v [link argot.ref.receiver_traits.receive `receiver_traits::receive_v`]]
[def receiver_traits::receive [link argot.ref.receiver_traits.receive `receiver_traits::receive`]]
[def receiver_traits::result_of_receive_t [link argot.ref.receiver_traits.receive `receiver_traits::result_of_receive_t`]]
[def receiver_traits::result_of_receive [link argot.ref.receiver_traits.receive `receiver_traits::result_of_receive`]]

[def receiver_traits_receive_branch receiver_traits::receive_branch]
[def receiver_traits::receive_branch_fn [link argot.ref.receiver_traits.receive_branch `receiver_traits::receive_branch_fn`]]
[def receiver_traits::receive_branch_t [link argot.ref.receiver_traits.receive_branch `receiver_traits::receive_branch_t`]]
[def receiver_traits::receive_branch_v [link argot.ref.receiver_traits.receive_branch `receiver_traits::receive_branch_v`]]
[def receiver_traits::receive_branch [link argot.ref.receiver_traits.receive_branch `receiver_traits::receive_branch`]]
[def receiver_traits::result_of_receive_branch_t [link argot.ref.receiver_traits.receive_branch `receiver_traits::result_of_receive_branch_t`]]
[def receiver_traits::result_of_receive_branch [link argot.ref.receiver_traits.receive_branch `receiver_traits::result_of_receive_branch`]]

[def reducer_graphviz_dot reducer::graphviz_dot]
[def reducer::graphviz_dot_fn [link argot.ref.reducer.graphviz_dot `reducer::graphviz_dot_fn`]]
[def reducer::graphviz_dot_t [link argot.ref.reducer.graphviz_dot `reducer::graphviz_dot_t`]]
[def reducer::graphviz_dot_v [link argot.ref.reducer.graphviz_dot `reducer::graphviz_dot_v`]]
[def reducer::graphviz_dot [link argot.ref.reducer.graphviz_dot `reducer::graphviz_dot`]]
[def reducer::result_of_graphviz_dot_t [link argot.ref.reducer.graphviz_dot `reducer::result_of_graphviz_dot_t`]]
[def reducer::result_of_graphviz_dot [link argot.ref.reducer.graphviz_dot `reducer::result_of_graphviz_dot`]]

[def reducer_provide_result_to reducer::provide_result_to]
[def reducer::provide_result_to_fn [link argot.ref.reducer.provide_result_to `reducer::provide_result_to_fn`]]
[def reducer::provide_result_to_t [link argot.ref.reducer.provide_result_to `reducer::provide_result_to_t`]]
[def reducer::provide_result_to_v [link argot.ref.reducer.provide_result_to `reducer::provide_result_to_v`]]
[def reducer::provide_result_to [link argot.ref.reducer.provide_result_to `reducer::provide_result_to`]]
[def reducer::result_of_provide_result_to_t [link argot.ref.reducer.provide_result_to `reducer::result_of_provide_result_to_t`]]
[def reducer::result_of_provide_result_to [link argot.ref.reducer.provide_result_to `reducer::result_of_provide_result_to`]]

[def reducer_reducer_reference reducer::reducer_reference]
[def reducer::reducer_reference_fn [link argot.ref.reducer.reducer_reference `reducer::reducer_reference_fn`]]
[def reducer::reducer_reference_t [link argot.ref.reducer.reducer_reference `reducer::reducer_reference_t`]]
[def reducer::reducer_reference_v [link argot.ref.reducer.reducer_reference `reducer::reducer_reference_v`]]
[def reducer::reducer_reference [link argot.ref.reducer.reducer_reference `reducer::reducer_reference`]]
[def reducer::result_of_reducer_reference_t [link argot.ref.reducer.reducer_reference `reducer::result_of_reducer_reference_t`]]
[def reducer::result_of_reducer_reference [link argot.ref.reducer.reducer_reference `reducer::result_of_reducer_reference`]]

[def reducer_same_type_or_fail reducer::same_type_or_fail]
[def reducer::same_type_or_fail_fn [link argot.ref.reducer.same_type_or_fail `reducer::same_type_or_fail_fn`]]
[def reducer::same_type_or_fail_t [link argot.ref.reducer.same_type_or_fail `reducer::same_type_or_fail_t`]]
[def reducer::same_type_or_fail_v [link argot.ref.reducer.same_type_or_fail `reducer::same_type_or_fail_v`]]
[def reducer::same_type_or_fail [link argot.ref.reducer.same_type_or_fail `reducer::same_type_or_fail`]]
[def reducer::result_of_same_type_or_fail_t [link argot.ref.reducer.same_type_or_fail `reducer::result_of_same_type_or_fail_t`]]
[def reducer::result_of_same_type_or_fail [link argot.ref.reducer.same_type_or_fail `reducer::result_of_same_type_or_fail`]]

[def reducer_to reducer::to]
[def reducer::to_fn [link argot.ref.reducer.to `reducer::to_fn`]]
[def reducer::to_t [link argot.ref.reducer.to `reducer::to_t`]]
[def reducer::to_v [link argot.ref.reducer.to `reducer::to_v`]]
[def reducer::to [link argot.ref.reducer.to `reducer::to`]]
[def reducer::result_of_to_t [link argot.ref.reducer.to `reducer::result_of_to_t`]]
[def reducer::result_of_to [link argot.ref.reducer.to `reducer::result_of_to`]]

[def reducer_to_boost_variant reducer::to_boost_variant]
[def reducer::to_boost_variant_fn [link argot.ref.reducer.to_boost_variant `reducer::to_boost_variant_fn`]]
[def reducer::to_boost_variant_t [link argot.ref.reducer.to_boost_variant `reducer::to_boost_variant_t`]]
[def reducer::to_boost_variant_v [link argot.ref.reducer.to_boost_variant `reducer::to_boost_variant_v`]]
[def reducer::to_boost_variant [link argot.ref.reducer.to_boost_variant `reducer::to_boost_variant`]]
[def reducer::result_of_to_boost_variant_t [link argot.ref.reducer.to_boost_variant `reducer::result_of_to_boost_variant_t`]]
[def reducer::result_of_to_boost_variant [link argot.ref.reducer.to_boost_variant `reducer::result_of_to_boost_variant`]]

[def reducer_to_heterogeneous_variant reducer::to_heterogeneous_variant]
[def reducer::to_heterogeneous_variant_fn [link argot.ref.reducer.to_heterogeneous_variant `reducer::to_heterogeneous_variant_fn`]]
[def reducer::to_heterogeneous_variant_t [link argot.ref.reducer.to_heterogeneous_variant `reducer::to_heterogeneous_variant_t`]]
[def reducer::to_heterogeneous_variant_v [link argot.ref.reducer.to_heterogeneous_variant `reducer::to_heterogeneous_variant_v`]]
[def reducer::to_heterogeneous_variant [link argot.ref.reducer.to_heterogeneous_variant `reducer::to_heterogeneous_variant`]]
[def reducer::result_of_to_heterogeneous_variant_t [link argot.ref.reducer.to_heterogeneous_variant `reducer::result_of_to_heterogeneous_variant_t`]]
[def reducer::result_of_to_heterogeneous_variant [link argot.ref.reducer.to_heterogeneous_variant `reducer::result_of_to_heterogeneous_variant`]]

[def reducer_to_variant reducer::to_variant]
[def reducer::to_variant_fn [link argot.ref.reducer.to_variant `reducer::to_variant_fn`]]
[def reducer::to_variant_t [link argot.ref.reducer.to_variant `reducer::to_variant_t`]]
[def reducer::to_variant_v [link argot.ref.reducer.to_variant `reducer::to_variant_v`]]
[def reducer::to_variant [link argot.ref.reducer.to_variant `reducer::to_variant`]]
[def reducer::result_of_to_variant_t [link argot.ref.reducer.to_variant `reducer::result_of_to_variant_t`]]
[def reducer::result_of_to_variant [link argot.ref.reducer.to_variant `reducer::result_of_to_variant`]]

[def reducer_transform reducer::transform]
[def reducer::transform_fn [link argot.ref.reducer.transform `reducer::transform_fn`]]
[def reducer::transform_t [link argot.ref.reducer.transform `reducer::transform_t`]]
[def reducer::transform_v [link argot.ref.reducer.transform `reducer::transform_v`]]
[def reducer::transform [link argot.ref.reducer.transform `reducer::transform`]]
[def reducer::result_of_transform_t [link argot.ref.reducer.transform `reducer::result_of_transform_t`]]
[def reducer::result_of_transform [link argot.ref.reducer.transform `reducer::result_of_transform`]]

[def reducer_traits_destructive_reduce reducer_traits::destructive_reduce]
[def reducer_traits::destructive_reduce_fn [link argot.ref.reducer_traits.destructive_reduce `reducer_traits::destructive_reduce_fn`]]
[def reducer_traits::destructive_reduce_t [link argot.ref.reducer_traits.destructive_reduce `reducer_traits::destructive_reduce_t`]]
[def reducer_traits::destructive_reduce_v [link argot.ref.reducer_traits.destructive_reduce `reducer_traits::destructive_reduce_v`]]
[def reducer_traits::destructive_reduce [link argot.ref.reducer_traits.destructive_reduce `reducer_traits::destructive_reduce`]]
[def reducer_traits::result_of_destructive_reduce_t [link argot.ref.reducer_traits.destructive_reduce `reducer_traits::result_of_destructive_reduce_t`]]
[def reducer_traits::result_of_destructive_reduce [link argot.ref.reducer_traits.destructive_reduce `reducer_traits::result_of_destructive_reduce`]]

[def reducer_traits_is_homogeneous reducer_traits::is_homogeneous]
[def reducer_traits::is_homogeneous_fn [link argot.ref.reducer_traits.is_homogeneous `reducer_traits::is_homogeneous_fn`]]
[def reducer_traits::is_homogeneous_t [link argot.ref.reducer_traits.is_homogeneous `reducer_traits::is_homogeneous_t`]]
[def reducer_traits::is_homogeneous_v [link argot.ref.reducer_traits.is_homogeneous `reducer_traits::is_homogeneous_v`]]
[def reducer_traits::is_homogeneous [link argot.ref.reducer_traits.is_homogeneous `reducer_traits::is_homogeneous`]]
[def reducer_traits::result_of_is_homogeneous_t [link argot.ref.reducer_traits.is_homogeneous `reducer_traits::result_of_is_homogeneous_t`]]
[def reducer_traits::result_of_is_homogeneous [link argot.ref.reducer_traits.is_homogeneous `reducer_traits::result_of_is_homogeneous`]]

[def reducer_traits_persistent_reduce reducer_traits::persistent_reduce]
[def reducer_traits::persistent_reduce_fn [link argot.ref.reducer_traits.persistent_reduce `reducer_traits::persistent_reduce_fn`]]
[def reducer_traits::persistent_reduce_t [link argot.ref.reducer_traits.persistent_reduce `reducer_traits::persistent_reduce_t`]]
[def reducer_traits::persistent_reduce_v [link argot.ref.reducer_traits.persistent_reduce `reducer_traits::persistent_reduce_v`]]
[def reducer_traits::persistent_reduce [link argot.ref.reducer_traits.persistent_reduce `reducer_traits::persistent_reduce`]]
[def reducer_traits::result_of_persistent_reduce_t [link argot.ref.reducer_traits.persistent_reduce `reducer_traits::result_of_persistent_reduce_t`]]
[def reducer_traits::result_of_persistent_reduce [link argot.ref.reducer_traits.persistent_reduce `reducer_traits::result_of_persistent_reduce`]]

[def reducer_traits_reduce reducer_traits::reduce]
[def reducer_traits::reduce_fn [link argot.ref.reducer_traits.reduce `reducer_traits::reduce_fn`]]
[def reducer_traits::reduce_t [link argot.ref.reducer_traits.reduce `reducer_traits::reduce_t`]]
[def reducer_traits::reduce_v [link argot.ref.reducer_traits.reduce `reducer_traits::reduce_v`]]
[def reducer_traits::reduce [link argot.ref.reducer_traits.reduce `reducer_traits::reduce`]]
[def reducer_traits::result_of_reduce_t [link argot.ref.reducer_traits.reduce `reducer_traits::result_of_reduce_t`]]
[def reducer_traits::result_of_reduce [link argot.ref.reducer_traits.reduce `reducer_traits::result_of_reduce`]]

[def reducer_traits_return_types reducer_traits::return_types]
[def reducer_traits::return_types_fn [link argot.ref.reducer_traits.return_types `reducer_traits::return_types_fn`]]
[def reducer_traits::return_types_t [link argot.ref.reducer_traits.return_types `reducer_traits::return_types_t`]]
[def reducer_traits::return_types_v [link argot.ref.reducer_traits.return_types `reducer_traits::return_types_v`]]
[def reducer_traits::return_types [link argot.ref.reducer_traits.return_types `reducer_traits::return_types`]]
[def reducer_traits::result_of_return_types_t [link argot.ref.reducer_traits.return_types `reducer_traits::result_of_return_types_t`]]
[def reducer_traits::result_of_return_types [link argot.ref.reducer_traits.return_types `reducer_traits::result_of_return_types`]]

[def reducer_traits_return_types_of_call reducer_traits::return_types_of_call]
[def reducer_traits::return_types_of_call_fn [link argot.ref.reducer_traits.return_types_of_call `reducer_traits::return_types_of_call_fn`]]
[def reducer_traits::return_types_of_call_t [link argot.ref.reducer_traits.return_types_of_call `reducer_traits::return_types_of_call_t`]]
[def reducer_traits::return_types_of_call_v [link argot.ref.reducer_traits.return_types_of_call `reducer_traits::return_types_of_call_v`]]
[def reducer_traits::return_types_of_call [link argot.ref.reducer_traits.return_types_of_call `reducer_traits::return_types_of_call`]]
[def reducer_traits::result_of_return_types_of_call_t [link argot.ref.reducer_traits.return_types_of_call `reducer_traits::result_of_return_types_of_call_t`]]
[def reducer_traits::result_of_return_types_of_call [link argot.ref.reducer_traits.return_types_of_call `reducer_traits::result_of_return_types_of_call`]]

[def state_traits_equal_to state_traits::equal_to]
[def state_traits::equal_to_fn [link argot.ref.state_traits.equal_to `state_traits::equal_to_fn`]]
[def state_traits::equal_to_t [link argot.ref.state_traits.equal_to `state_traits::equal_to_t`]]
[def state_traits::equal_to_v [link argot.ref.state_traits.equal_to `state_traits::equal_to_v`]]
[def state_traits::equal_to [link argot.ref.state_traits.equal_to `state_traits::equal_to`]]
[def state_traits::result_of_equal_to_t [link argot.ref.state_traits.equal_to `state_traits::result_of_equal_to_t`]]
[def state_traits::result_of_equal_to [link argot.ref.state_traits.equal_to `state_traits::result_of_equal_to`]]

[def state_traits_greater_equal state_traits::greater_equal]
[def state_traits::greater_equal_fn [link argot.ref.state_traits.greater_equal `state_traits::greater_equal_fn`]]
[def state_traits::greater_equal_t [link argot.ref.state_traits.greater_equal `state_traits::greater_equal_t`]]
[def state_traits::greater_equal_v [link argot.ref.state_traits.greater_equal `state_traits::greater_equal_v`]]
[def state_traits::greater_equal [link argot.ref.state_traits.greater_equal `state_traits::greater_equal`]]
[def state_traits::result_of_greater_equal_t [link argot.ref.state_traits.greater_equal `state_traits::result_of_greater_equal_t`]]
[def state_traits::result_of_greater_equal [link argot.ref.state_traits.greater_equal `state_traits::result_of_greater_equal`]]

[def state_traits_greater_than state_traits::greater_than]
[def state_traits::greater_than_fn [link argot.ref.state_traits.greater_than `state_traits::greater_than_fn`]]
[def state_traits::greater_than_t [link argot.ref.state_traits.greater_than `state_traits::greater_than_t`]]
[def state_traits::greater_than_v [link argot.ref.state_traits.greater_than `state_traits::greater_than_v`]]
[def state_traits::greater_than [link argot.ref.state_traits.greater_than `state_traits::greater_than`]]
[def state_traits::result_of_greater_than_t [link argot.ref.state_traits.greater_than `state_traits::result_of_greater_than_t`]]
[def state_traits::result_of_greater_than [link argot.ref.state_traits.greater_than `state_traits::result_of_greater_than`]]

[def state_traits_hash state_traits::hash]
[def state_traits::hash_fn [link argot.ref.state_traits.hash `state_traits::hash_fn`]]
[def state_traits::hash_t [link argot.ref.state_traits.hash `state_traits::hash_t`]]
[def state_traits::hash_v [link argot.ref.state_traits.hash `state_traits::hash_v`]]
[def state_traits::hash [link argot.ref.state_traits.hash `state_traits::hash`]]
[def state_traits::result_of_hash_t [link argot.ref.state_traits.hash `state_traits::result_of_hash_t`]]
[def state_traits::result_of_hash [link argot.ref.state_traits.hash `state_traits::result_of_hash`]]

[def state_traits_hash_combine state_traits::hash_combine]
[def state_traits::hash_combine_fn [link argot.ref.state_traits.hash_combine `state_traits::hash_combine_fn`]]
[def state_traits::hash_combine_t [link argot.ref.state_traits.hash_combine `state_traits::hash_combine_t`]]
[def state_traits::hash_combine_v [link argot.ref.state_traits.hash_combine `state_traits::hash_combine_v`]]
[def state_traits::hash_combine [link argot.ref.state_traits.hash_combine `state_traits::hash_combine`]]
[def state_traits::result_of_hash_combine_t [link argot.ref.state_traits.hash_combine `state_traits::result_of_hash_combine_t`]]
[def state_traits::result_of_hash_combine [link argot.ref.state_traits.hash_combine `state_traits::result_of_hash_combine`]]

[def state_traits_less_equal state_traits::less_equal]
[def state_traits::less_equal_fn [link argot.ref.state_traits.less_equal `state_traits::less_equal_fn`]]
[def state_traits::less_equal_t [link argot.ref.state_traits.less_equal `state_traits::less_equal_t`]]
[def state_traits::less_equal_v [link argot.ref.state_traits.less_equal `state_traits::less_equal_v`]]
[def state_traits::less_equal [link argot.ref.state_traits.less_equal `state_traits::less_equal`]]
[def state_traits::result_of_less_equal_t [link argot.ref.state_traits.less_equal `state_traits::result_of_less_equal_t`]]
[def state_traits::result_of_less_equal [link argot.ref.state_traits.less_equal `state_traits::result_of_less_equal`]]

[def state_traits_less_than state_traits::less_than]
[def state_traits::less_than_fn [link argot.ref.state_traits.less_than `state_traits::less_than_fn`]]
[def state_traits::less_than_t [link argot.ref.state_traits.less_than `state_traits::less_than_t`]]
[def state_traits::less_than_v [link argot.ref.state_traits.less_than `state_traits::less_than_v`]]
[def state_traits::less_than [link argot.ref.state_traits.less_than `state_traits::less_than`]]
[def state_traits::result_of_less_than_t [link argot.ref.state_traits.less_than `state_traits::result_of_less_than_t`]]
[def state_traits::result_of_less_than [link argot.ref.state_traits.less_than `state_traits::result_of_less_than`]]

[def state_traits_not_equal_to state_traits::not_equal_to]
[def state_traits::not_equal_to_fn [link argot.ref.state_traits.not_equal_to `state_traits::not_equal_to_fn`]]
[def state_traits::not_equal_to_t [link argot.ref.state_traits.not_equal_to `state_traits::not_equal_to_t`]]
[def state_traits::not_equal_to_v [link argot.ref.state_traits.not_equal_to `state_traits::not_equal_to_v`]]
[def state_traits::not_equal_to [link argot.ref.state_traits.not_equal_to `state_traits::not_equal_to`]]
[def state_traits::result_of_not_equal_to_t [link argot.ref.state_traits.not_equal_to `state_traits::result_of_not_equal_to_t`]]
[def state_traits::result_of_not_equal_to [link argot.ref.state_traits.not_equal_to `state_traits::result_of_not_equal_to`]]

[def switch_traits_argument_list_kinds_of_body_destructive switch_traits::argument_list_kinds_of_body_destructive]
[def switch_traits::argument_list_kinds_of_body_destructive_fn [link argot.ref.switch_traits.argument_list_kinds_of_body_destructive `switch_traits::argument_list_kinds_of_body_destructive_fn`]]
[def switch_traits::argument_list_kinds_of_body_destructive_t [link argot.ref.switch_traits.argument_list_kinds_of_body_destructive `switch_traits::argument_list_kinds_of_body_destructive_t`]]
[def switch_traits::argument_list_kinds_of_body_destructive_v [link argot.ref.switch_traits.argument_list_kinds_of_body_destructive `switch_traits::argument_list_kinds_of_body_destructive_v`]]
[def switch_traits::argument_list_kinds_of_body_destructive [link argot.ref.switch_traits.argument_list_kinds_of_body_destructive `switch_traits::argument_list_kinds_of_body_destructive`]]
[def switch_traits::result_of_argument_list_kinds_of_body_destructive_t [link argot.ref.switch_traits.argument_list_kinds_of_body_destructive `switch_traits::result_of_argument_list_kinds_of_body_destructive_t`]]
[def switch_traits::result_of_argument_list_kinds_of_body_destructive [link argot.ref.switch_traits.argument_list_kinds_of_body_destructive `switch_traits::result_of_argument_list_kinds_of_body_destructive`]]

[def switch_traits_argument_list_kinds_of_body_persistent switch_traits::argument_list_kinds_of_body_persistent]
[def switch_traits::argument_list_kinds_of_body_persistent_fn [link argot.ref.switch_traits.argument_list_kinds_of_body_persistent `switch_traits::argument_list_kinds_of_body_persistent_fn`]]
[def switch_traits::argument_list_kinds_of_body_persistent_t [link argot.ref.switch_traits.argument_list_kinds_of_body_persistent `switch_traits::argument_list_kinds_of_body_persistent_t`]]
[def switch_traits::argument_list_kinds_of_body_persistent_v [link argot.ref.switch_traits.argument_list_kinds_of_body_persistent `switch_traits::argument_list_kinds_of_body_persistent_v`]]
[def switch_traits::argument_list_kinds_of_body_persistent [link argot.ref.switch_traits.argument_list_kinds_of_body_persistent `switch_traits::argument_list_kinds_of_body_persistent`]]
[def switch_traits::result_of_argument_list_kinds_of_body_persistent_t [link argot.ref.switch_traits.argument_list_kinds_of_body_persistent `switch_traits::result_of_argument_list_kinds_of_body_persistent_t`]]
[def switch_traits::result_of_argument_list_kinds_of_body_persistent [link argot.ref.switch_traits.argument_list_kinds_of_body_persistent `switch_traits::result_of_argument_list_kinds_of_body_persistent`]]

[def switch_traits_argument_list_kinds_of_case_destructive switch_traits::argument_list_kinds_of_case_destructive]
[def switch_traits::argument_list_kinds_of_case_destructive_fn [link argot.ref.switch_traits.argument_list_kinds_of_case_destructive `switch_traits::argument_list_kinds_of_case_destructive_fn`]]
[def switch_traits::argument_list_kinds_of_case_destructive_t [link argot.ref.switch_traits.argument_list_kinds_of_case_destructive `switch_traits::argument_list_kinds_of_case_destructive_t`]]
[def switch_traits::argument_list_kinds_of_case_destructive_v [link argot.ref.switch_traits.argument_list_kinds_of_case_destructive `switch_traits::argument_list_kinds_of_case_destructive_v`]]
[def switch_traits::argument_list_kinds_of_case_destructive [link argot.ref.switch_traits.argument_list_kinds_of_case_destructive `switch_traits::argument_list_kinds_of_case_destructive`]]
[def switch_traits::result_of_argument_list_kinds_of_case_destructive_t [link argot.ref.switch_traits.argument_list_kinds_of_case_destructive `switch_traits::result_of_argument_list_kinds_of_case_destructive_t`]]
[def switch_traits::result_of_argument_list_kinds_of_case_destructive [link argot.ref.switch_traits.argument_list_kinds_of_case_destructive `switch_traits::result_of_argument_list_kinds_of_case_destructive`]]

[def switch_traits_argument_list_kinds_of_case_persistent switch_traits::argument_list_kinds_of_case_persistent]
[def switch_traits::argument_list_kinds_of_case_persistent_fn [link argot.ref.switch_traits.argument_list_kinds_of_case_persistent `switch_traits::argument_list_kinds_of_case_persistent_fn`]]
[def switch_traits::argument_list_kinds_of_case_persistent_t [link argot.ref.switch_traits.argument_list_kinds_of_case_persistent `switch_traits::argument_list_kinds_of_case_persistent_t`]]
[def switch_traits::argument_list_kinds_of_case_persistent_v [link argot.ref.switch_traits.argument_list_kinds_of_case_persistent `switch_traits::argument_list_kinds_of_case_persistent_v`]]
[def switch_traits::argument_list_kinds_of_case_persistent [link argot.ref.switch_traits.argument_list_kinds_of_case_persistent `switch_traits::argument_list_kinds_of_case_persistent`]]
[def switch_traits::result_of_argument_list_kinds_of_case_persistent_t [link argot.ref.switch_traits.argument_list_kinds_of_case_persistent `switch_traits::result_of_argument_list_kinds_of_case_persistent_t`]]
[def switch_traits::result_of_argument_list_kinds_of_case_persistent [link argot.ref.switch_traits.argument_list_kinds_of_case_persistent `switch_traits::result_of_argument_list_kinds_of_case_persistent`]]

[def switch_traits_argument_list_kinds_of_default_destructive switch_traits::argument_list_kinds_of_default_destructive]
[def switch_traits::argument_list_kinds_of_default_destructive_fn [link argot.ref.switch_traits.argument_list_kinds_of_default_destructive `switch_traits::argument_list_kinds_of_default_destructive_fn`]]
[def switch_traits::argument_list_kinds_of_default_destructive_t [link argot.ref.switch_traits.argument_list_kinds_of_default_destructive `switch_traits::argument_list_kinds_of_default_destructive_t`]]
[def switch_traits::argument_list_kinds_of_default_destructive_v [link argot.ref.switch_traits.argument_list_kinds_of_default_destructive `switch_traits::argument_list_kinds_of_default_destructive_v`]]
[def switch_traits::argument_list_kinds_of_default_destructive [link argot.ref.switch_traits.argument_list_kinds_of_default_destructive `switch_traits::argument_list_kinds_of_default_destructive`]]
[def switch_traits::result_of_argument_list_kinds_of_default_destructive_t [link argot.ref.switch_traits.argument_list_kinds_of_default_destructive `switch_traits::result_of_argument_list_kinds_of_default_destructive_t`]]
[def switch_traits::result_of_argument_list_kinds_of_default_destructive [link argot.ref.switch_traits.argument_list_kinds_of_default_destructive `switch_traits::result_of_argument_list_kinds_of_default_destructive`]]

[def switch_traits_argument_list_kinds_of_default_persistent switch_traits::argument_list_kinds_of_default_persistent]
[def switch_traits::argument_list_kinds_of_default_persistent_fn [link argot.ref.switch_traits.argument_list_kinds_of_default_persistent `switch_traits::argument_list_kinds_of_default_persistent_fn`]]
[def switch_traits::argument_list_kinds_of_default_persistent_t [link argot.ref.switch_traits.argument_list_kinds_of_default_persistent `switch_traits::argument_list_kinds_of_default_persistent_t`]]
[def switch_traits::argument_list_kinds_of_default_persistent_v [link argot.ref.switch_traits.argument_list_kinds_of_default_persistent `switch_traits::argument_list_kinds_of_default_persistent_v`]]
[def switch_traits::argument_list_kinds_of_default_persistent [link argot.ref.switch_traits.argument_list_kinds_of_default_persistent `switch_traits::argument_list_kinds_of_default_persistent`]]
[def switch_traits::result_of_argument_list_kinds_of_default_persistent_t [link argot.ref.switch_traits.argument_list_kinds_of_default_persistent `switch_traits::result_of_argument_list_kinds_of_default_persistent_t`]]
[def switch_traits::result_of_argument_list_kinds_of_default_persistent [link argot.ref.switch_traits.argument_list_kinds_of_default_persistent `switch_traits::result_of_argument_list_kinds_of_default_persistent`]]

[def switch_traits_case_value_for_type_at switch_traits::case_value_for_type_at]
[def switch_traits::case_value_for_type_at_fn [link argot.ref.switch_traits.case_value_for_type_at `switch_traits::case_value_for_type_at_fn`]]
[def switch_traits::case_value_for_type_at_t [link argot.ref.switch_traits.case_value_for_type_at `switch_traits::case_value_for_type_at_t`]]
[def switch_traits::case_value_for_type_at_v [link argot.ref.switch_traits.case_value_for_type_at `switch_traits::case_value_for_type_at_v`]]
[def switch_traits::case_value_for_type_at [link argot.ref.switch_traits.case_value_for_type_at `switch_traits::case_value_for_type_at`]]
[def switch_traits::result_of_case_value_for_type_at_t [link argot.ref.switch_traits.case_value_for_type_at `switch_traits::result_of_case_value_for_type_at_t`]]
[def switch_traits::result_of_case_value_for_type_at [link argot.ref.switch_traits.case_value_for_type_at `switch_traits::result_of_case_value_for_type_at`]]

[def switch_traits_case_values switch_traits::case_values]
[def switch_traits::case_values_fn [link argot.ref.switch_traits.case_values `switch_traits::case_values_fn`]]
[def switch_traits::case_values_t [link argot.ref.switch_traits.case_values `switch_traits::case_values_t`]]
[def switch_traits::case_values_v [link argot.ref.switch_traits.case_values `switch_traits::case_values_v`]]
[def switch_traits::case_values [link argot.ref.switch_traits.case_values `switch_traits::case_values`]]
[def switch_traits::result_of_case_values_t [link argot.ref.switch_traits.case_values `switch_traits::result_of_case_values_t`]]
[def switch_traits::result_of_case_values [link argot.ref.switch_traits.case_values `switch_traits::result_of_case_values`]]

[def switch_traits_case_values_for_type switch_traits::case_values_for_type]
[def switch_traits::case_values_for_type_fn [link argot.ref.switch_traits.case_values_for_type `switch_traits::case_values_for_type_fn`]]
[def switch_traits::case_values_for_type_t [link argot.ref.switch_traits.case_values_for_type `switch_traits::case_values_for_type_t`]]
[def switch_traits::case_values_for_type_v [link argot.ref.switch_traits.case_values_for_type `switch_traits::case_values_for_type_v`]]
[def switch_traits::case_values_for_type [link argot.ref.switch_traits.case_values_for_type `switch_traits::case_values_for_type`]]
[def switch_traits::result_of_case_values_for_type_t [link argot.ref.switch_traits.case_values_for_type `switch_traits::result_of_case_values_for_type_t`]]
[def switch_traits::result_of_case_values_for_type [link argot.ref.switch_traits.case_values_for_type `switch_traits::result_of_case_values_for_type`]]

[def switch_traits_combine switch_traits::combine]
[def switch_traits::combine_fn [link argot.ref.switch_traits.combine `switch_traits::combine_fn`]]
[def switch_traits::combine_t [link argot.ref.switch_traits.combine `switch_traits::combine_t`]]
[def switch_traits::combine_v [link argot.ref.switch_traits.combine `switch_traits::combine_v`]]
[def switch_traits::combine [link argot.ref.switch_traits.combine `switch_traits::combine`]]
[def switch_traits::result_of_combine_t [link argot.ref.switch_traits.combine `switch_traits::result_of_combine_t`]]
[def switch_traits::result_of_combine [link argot.ref.switch_traits.combine `switch_traits::result_of_combine`]]

[def switch_traits_destructive_provide_case switch_traits::destructive_provide_case]
[def switch_traits::destructive_provide_case_fn [link argot.ref.switch_traits.destructive_provide_case `switch_traits::destructive_provide_case_fn`]]
[def switch_traits::destructive_provide_case_t [link argot.ref.switch_traits.destructive_provide_case `switch_traits::destructive_provide_case_t`]]
[def switch_traits::destructive_provide_case_v [link argot.ref.switch_traits.destructive_provide_case `switch_traits::destructive_provide_case_v`]]
[def switch_traits::destructive_provide_case [link argot.ref.switch_traits.destructive_provide_case `switch_traits::destructive_provide_case`]]
[def switch_traits::result_of_destructive_provide_case_t [link argot.ref.switch_traits.destructive_provide_case `switch_traits::result_of_destructive_provide_case_t`]]
[def switch_traits::result_of_destructive_provide_case [link argot.ref.switch_traits.destructive_provide_case `switch_traits::result_of_destructive_provide_case`]]

[def switch_traits_destructive_provide_default switch_traits::destructive_provide_default]
[def switch_traits::destructive_provide_default_fn [link argot.ref.switch_traits.destructive_provide_default `switch_traits::destructive_provide_default_fn`]]
[def switch_traits::destructive_provide_default_t [link argot.ref.switch_traits.destructive_provide_default `switch_traits::destructive_provide_default_t`]]
[def switch_traits::destructive_provide_default_v [link argot.ref.switch_traits.destructive_provide_default `switch_traits::destructive_provide_default_v`]]
[def switch_traits::destructive_provide_default [link argot.ref.switch_traits.destructive_provide_default `switch_traits::destructive_provide_default`]]
[def switch_traits::result_of_destructive_provide_default_t [link argot.ref.switch_traits.destructive_provide_default `switch_traits::result_of_destructive_provide_default_t`]]
[def switch_traits::result_of_destructive_provide_default [link argot.ref.switch_traits.destructive_provide_default `switch_traits::result_of_destructive_provide_default`]]

[def switch_traits_destructive_provide_isolated_case switch_traits::destructive_provide_isolated_case]
[def switch_traits::destructive_provide_isolated_case_fn [link argot.ref.switch_traits.destructive_provide_isolated_case `switch_traits::destructive_provide_isolated_case_fn`]]
[def switch_traits::destructive_provide_isolated_case_t [link argot.ref.switch_traits.destructive_provide_isolated_case `switch_traits::destructive_provide_isolated_case_t`]]
[def switch_traits::destructive_provide_isolated_case_v [link argot.ref.switch_traits.destructive_provide_isolated_case `switch_traits::destructive_provide_isolated_case_v`]]
[def switch_traits::destructive_provide_isolated_case [link argot.ref.switch_traits.destructive_provide_isolated_case `switch_traits::destructive_provide_isolated_case`]]
[def switch_traits::result_of_destructive_provide_isolated_case_t [link argot.ref.switch_traits.destructive_provide_isolated_case `switch_traits::result_of_destructive_provide_isolated_case_t`]]
[def switch_traits::result_of_destructive_provide_isolated_case [link argot.ref.switch_traits.destructive_provide_isolated_case `switch_traits::result_of_destructive_provide_isolated_case`]]

[def switch_traits_destructive_provide_isolated_default switch_traits::destructive_provide_isolated_default]
[def switch_traits::destructive_provide_isolated_default_fn [link argot.ref.switch_traits.destructive_provide_isolated_default `switch_traits::destructive_provide_isolated_default_fn`]]
[def switch_traits::destructive_provide_isolated_default_t [link argot.ref.switch_traits.destructive_provide_isolated_default `switch_traits::destructive_provide_isolated_default_t`]]
[def switch_traits::destructive_provide_isolated_default_v [link argot.ref.switch_traits.destructive_provide_isolated_default `switch_traits::destructive_provide_isolated_default_v`]]
[def switch_traits::destructive_provide_isolated_default [link argot.ref.switch_traits.destructive_provide_isolated_default `switch_traits::destructive_provide_isolated_default`]]
[def switch_traits::result_of_destructive_provide_isolated_default_t [link argot.ref.switch_traits.destructive_provide_isolated_default `switch_traits::result_of_destructive_provide_isolated_default_t`]]
[def switch_traits::result_of_destructive_provide_isolated_default [link argot.ref.switch_traits.destructive_provide_isolated_default `switch_traits::result_of_destructive_provide_isolated_default`]]

[def switch_traits_expand_case_values switch_traits::expand_case_values]
[def switch_traits::expand_case_values_fn [link argot.ref.switch_traits.expand_case_values `switch_traits::expand_case_values_fn`]]
[def switch_traits::expand_case_values_t [link argot.ref.switch_traits.expand_case_values `switch_traits::expand_case_values_t`]]
[def switch_traits::expand_case_values_v [link argot.ref.switch_traits.expand_case_values `switch_traits::expand_case_values_v`]]
[def switch_traits::expand_case_values [link argot.ref.switch_traits.expand_case_values `switch_traits::expand_case_values`]]
[def switch_traits::result_of_expand_case_values_t [link argot.ref.switch_traits.expand_case_values `switch_traits::result_of_expand_case_values_t`]]
[def switch_traits::result_of_expand_case_values [link argot.ref.switch_traits.expand_case_values `switch_traits::result_of_expand_case_values`]]

[def switch_traits_expand_case_values_for_type switch_traits::expand_case_values_for_type]
[def switch_traits::expand_case_values_for_type_fn [link argot.ref.switch_traits.expand_case_values_for_type `switch_traits::expand_case_values_for_type_fn`]]
[def switch_traits::expand_case_values_for_type_t [link argot.ref.switch_traits.expand_case_values_for_type `switch_traits::expand_case_values_for_type_t`]]
[def switch_traits::expand_case_values_for_type_v [link argot.ref.switch_traits.expand_case_values_for_type `switch_traits::expand_case_values_for_type_v`]]
[def switch_traits::expand_case_values_for_type [link argot.ref.switch_traits.expand_case_values_for_type `switch_traits::expand_case_values_for_type`]]
[def switch_traits::result_of_expand_case_values_for_type_t [link argot.ref.switch_traits.expand_case_values_for_type `switch_traits::result_of_expand_case_values_for_type_t`]]
[def switch_traits::result_of_expand_case_values_for_type [link argot.ref.switch_traits.expand_case_values_for_type `switch_traits::result_of_expand_case_values_for_type`]]

[def switch_traits_leading_argument_list_kinds_of_case_destructive switch_traits::leading_argument_list_kinds_of_case_destructive]
[def switch_traits::leading_argument_list_kinds_of_case_destructive_fn [link argot.ref.switch_traits.leading_argument_list_kinds_of_case_destructive `switch_traits::leading_argument_list_kinds_of_case_destructive_fn`]]
[def switch_traits::leading_argument_list_kinds_of_case_destructive_t [link argot.ref.switch_traits.leading_argument_list_kinds_of_case_destructive `switch_traits::leading_argument_list_kinds_of_case_destructive_t`]]
[def switch_traits::leading_argument_list_kinds_of_case_destructive_v [link argot.ref.switch_traits.leading_argument_list_kinds_of_case_destructive `switch_traits::leading_argument_list_kinds_of_case_destructive_v`]]
[def switch_traits::leading_argument_list_kinds_of_case_destructive [link argot.ref.switch_traits.leading_argument_list_kinds_of_case_destructive `switch_traits::leading_argument_list_kinds_of_case_destructive`]]
[def switch_traits::result_of_leading_argument_list_kinds_of_case_destructive_t [link argot.ref.switch_traits.leading_argument_list_kinds_of_case_destructive `switch_traits::result_of_leading_argument_list_kinds_of_case_destructive_t`]]
[def switch_traits::result_of_leading_argument_list_kinds_of_case_destructive [link argot.ref.switch_traits.leading_argument_list_kinds_of_case_destructive `switch_traits::result_of_leading_argument_list_kinds_of_case_destructive`]]

[def switch_traits_leading_argument_list_kinds_of_case_persistent switch_traits::leading_argument_list_kinds_of_case_persistent]
[def switch_traits::leading_argument_list_kinds_of_case_persistent_fn [link argot.ref.switch_traits.leading_argument_list_kinds_of_case_persistent `switch_traits::leading_argument_list_kinds_of_case_persistent_fn`]]
[def switch_traits::leading_argument_list_kinds_of_case_persistent_t [link argot.ref.switch_traits.leading_argument_list_kinds_of_case_persistent `switch_traits::leading_argument_list_kinds_of_case_persistent_t`]]
[def switch_traits::leading_argument_list_kinds_of_case_persistent_v [link argot.ref.switch_traits.leading_argument_list_kinds_of_case_persistent `switch_traits::leading_argument_list_kinds_of_case_persistent_v`]]
[def switch_traits::leading_argument_list_kinds_of_case_persistent [link argot.ref.switch_traits.leading_argument_list_kinds_of_case_persistent `switch_traits::leading_argument_list_kinds_of_case_persistent`]]
[def switch_traits::result_of_leading_argument_list_kinds_of_case_persistent_t [link argot.ref.switch_traits.leading_argument_list_kinds_of_case_persistent `switch_traits::result_of_leading_argument_list_kinds_of_case_persistent_t`]]
[def switch_traits::result_of_leading_argument_list_kinds_of_case_persistent [link argot.ref.switch_traits.leading_argument_list_kinds_of_case_persistent `switch_traits::result_of_leading_argument_list_kinds_of_case_persistent`]]

[def switch_traits_leading_argument_list_kinds_of_default_destructive switch_traits::leading_argument_list_kinds_of_default_destructive]
[def switch_traits::leading_argument_list_kinds_of_default_destructive_fn [link argot.ref.switch_traits.leading_argument_list_kinds_of_default_destructive `switch_traits::leading_argument_list_kinds_of_default_destructive_fn`]]
[def switch_traits::leading_argument_list_kinds_of_default_destructive_t [link argot.ref.switch_traits.leading_argument_list_kinds_of_default_destructive `switch_traits::leading_argument_list_kinds_of_default_destructive_t`]]
[def switch_traits::leading_argument_list_kinds_of_default_destructive_v [link argot.ref.switch_traits.leading_argument_list_kinds_of_default_destructive `switch_traits::leading_argument_list_kinds_of_default_destructive_v`]]
[def switch_traits::leading_argument_list_kinds_of_default_destructive [link argot.ref.switch_traits.leading_argument_list_kinds_of_default_destructive `switch_traits::leading_argument_list_kinds_of_default_destructive`]]
[def switch_traits::result_of_leading_argument_list_kinds_of_default_destructive_t [link argot.ref.switch_traits.leading_argument_list_kinds_of_default_destructive `switch_traits::result_of_leading_argument_list_kinds_of_default_destructive_t`]]
[def switch_traits::result_of_leading_argument_list_kinds_of_default_destructive [link argot.ref.switch_traits.leading_argument_list_kinds_of_default_destructive `switch_traits::result_of_leading_argument_list_kinds_of_default_destructive`]]

[def switch_traits_leading_argument_list_kinds_of_default_persistent switch_traits::leading_argument_list_kinds_of_default_persistent]
[def switch_traits::leading_argument_list_kinds_of_default_persistent_fn [link argot.ref.switch_traits.leading_argument_list_kinds_of_default_persistent `switch_traits::leading_argument_list_kinds_of_default_persistent_fn`]]
[def switch_traits::leading_argument_list_kinds_of_default_persistent_t [link argot.ref.switch_traits.leading_argument_list_kinds_of_default_persistent `switch_traits::leading_argument_list_kinds_of_default_persistent_t`]]
[def switch_traits::leading_argument_list_kinds_of_default_persistent_v [link argot.ref.switch_traits.leading_argument_list_kinds_of_default_persistent `switch_traits::leading_argument_list_kinds_of_default_persistent_v`]]
[def switch_traits::leading_argument_list_kinds_of_default_persistent [link argot.ref.switch_traits.leading_argument_list_kinds_of_default_persistent `switch_traits::leading_argument_list_kinds_of_default_persistent`]]
[def switch_traits::result_of_leading_argument_list_kinds_of_default_persistent_t [link argot.ref.switch_traits.leading_argument_list_kinds_of_default_persistent `switch_traits::result_of_leading_argument_list_kinds_of_default_persistent_t`]]
[def switch_traits::result_of_leading_argument_list_kinds_of_default_persistent [link argot.ref.switch_traits.leading_argument_list_kinds_of_default_persistent `switch_traits::result_of_leading_argument_list_kinds_of_default_persistent`]]

[def switch_traits_num_cases switch_traits::num_cases]
[def switch_traits::num_cases_fn [link argot.ref.switch_traits.num_cases `switch_traits::num_cases_fn`]]
[def switch_traits::num_cases_t [link argot.ref.switch_traits.num_cases `switch_traits::num_cases_t`]]
[def switch_traits::num_cases_v [link argot.ref.switch_traits.num_cases `switch_traits::num_cases_v`]]
[def switch_traits::num_cases [link argot.ref.switch_traits.num_cases `switch_traits::num_cases`]]
[def switch_traits::result_of_num_cases_t [link argot.ref.switch_traits.num_cases `switch_traits::result_of_num_cases_t`]]
[def switch_traits::result_of_num_cases [link argot.ref.switch_traits.num_cases `switch_traits::result_of_num_cases`]]

[def switch_traits_persistent_provide_case switch_traits::persistent_provide_case]
[def switch_traits::persistent_provide_case_fn [link argot.ref.switch_traits.persistent_provide_case `switch_traits::persistent_provide_case_fn`]]
[def switch_traits::persistent_provide_case_t [link argot.ref.switch_traits.persistent_provide_case `switch_traits::persistent_provide_case_t`]]
[def switch_traits::persistent_provide_case_v [link argot.ref.switch_traits.persistent_provide_case `switch_traits::persistent_provide_case_v`]]
[def switch_traits::persistent_provide_case [link argot.ref.switch_traits.persistent_provide_case `switch_traits::persistent_provide_case`]]
[def switch_traits::result_of_persistent_provide_case_t [link argot.ref.switch_traits.persistent_provide_case `switch_traits::result_of_persistent_provide_case_t`]]
[def switch_traits::result_of_persistent_provide_case [link argot.ref.switch_traits.persistent_provide_case `switch_traits::result_of_persistent_provide_case`]]

[def switch_traits_persistent_provide_default switch_traits::persistent_provide_default]
[def switch_traits::persistent_provide_default_fn [link argot.ref.switch_traits.persistent_provide_default `switch_traits::persistent_provide_default_fn`]]
[def switch_traits::persistent_provide_default_t [link argot.ref.switch_traits.persistent_provide_default `switch_traits::persistent_provide_default_t`]]
[def switch_traits::persistent_provide_default_v [link argot.ref.switch_traits.persistent_provide_default `switch_traits::persistent_provide_default_v`]]
[def switch_traits::persistent_provide_default [link argot.ref.switch_traits.persistent_provide_default `switch_traits::persistent_provide_default`]]
[def switch_traits::result_of_persistent_provide_default_t [link argot.ref.switch_traits.persistent_provide_default `switch_traits::result_of_persistent_provide_default_t`]]
[def switch_traits::result_of_persistent_provide_default [link argot.ref.switch_traits.persistent_provide_default `switch_traits::result_of_persistent_provide_default`]]

[def switch_traits_persistent_provide_isolated_case switch_traits::persistent_provide_isolated_case]
[def switch_traits::persistent_provide_isolated_case_fn [link argot.ref.switch_traits.persistent_provide_isolated_case `switch_traits::persistent_provide_isolated_case_fn`]]
[def switch_traits::persistent_provide_isolated_case_t [link argot.ref.switch_traits.persistent_provide_isolated_case `switch_traits::persistent_provide_isolated_case_t`]]
[def switch_traits::persistent_provide_isolated_case_v [link argot.ref.switch_traits.persistent_provide_isolated_case `switch_traits::persistent_provide_isolated_case_v`]]
[def switch_traits::persistent_provide_isolated_case [link argot.ref.switch_traits.persistent_provide_isolated_case `switch_traits::persistent_provide_isolated_case`]]
[def switch_traits::result_of_persistent_provide_isolated_case_t [link argot.ref.switch_traits.persistent_provide_isolated_case `switch_traits::result_of_persistent_provide_isolated_case_t`]]
[def switch_traits::result_of_persistent_provide_isolated_case [link argot.ref.switch_traits.persistent_provide_isolated_case `switch_traits::result_of_persistent_provide_isolated_case`]]

[def switch_traits_persistent_provide_isolated_default switch_traits::persistent_provide_isolated_default]
[def switch_traits::persistent_provide_isolated_default_fn [link argot.ref.switch_traits.persistent_provide_isolated_default `switch_traits::persistent_provide_isolated_default_fn`]]
[def switch_traits::persistent_provide_isolated_default_t [link argot.ref.switch_traits.persistent_provide_isolated_default `switch_traits::persistent_provide_isolated_default_t`]]
[def switch_traits::persistent_provide_isolated_default_v [link argot.ref.switch_traits.persistent_provide_isolated_default `switch_traits::persistent_provide_isolated_default_v`]]
[def switch_traits::persistent_provide_isolated_default [link argot.ref.switch_traits.persistent_provide_isolated_default `switch_traits::persistent_provide_isolated_default`]]
[def switch_traits::result_of_persistent_provide_isolated_default_t [link argot.ref.switch_traits.persistent_provide_isolated_default `switch_traits::result_of_persistent_provide_isolated_default_t`]]
[def switch_traits::result_of_persistent_provide_isolated_default [link argot.ref.switch_traits.persistent_provide_isolated_default `switch_traits::result_of_persistent_provide_isolated_default`]]

[def switch_traits_provider_of_isolated switch_traits::provider_of_isolated]
[def switch_traits::provider_of_isolated_fn [link argot.ref.switch_traits.provider_of_isolated `switch_traits::provider_of_isolated_fn`]]
[def switch_traits::provider_of_isolated_t [link argot.ref.switch_traits.provider_of_isolated `switch_traits::provider_of_isolated_t`]]
[def switch_traits::provider_of_isolated_v [link argot.ref.switch_traits.provider_of_isolated `switch_traits::provider_of_isolated_v`]]
[def switch_traits::provider_of_isolated [link argot.ref.switch_traits.provider_of_isolated `switch_traits::provider_of_isolated`]]
[def switch_traits::result_of_provider_of_isolated_t [link argot.ref.switch_traits.provider_of_isolated `switch_traits::result_of_provider_of_isolated_t`]]
[def switch_traits::result_of_provider_of_isolated [link argot.ref.switch_traits.provider_of_isolated `switch_traits::result_of_provider_of_isolated`]]

[def switch_traits_trailing_argument_list_kinds_of_case_destructive switch_traits::trailing_argument_list_kinds_of_case_destructive]
[def switch_traits::trailing_argument_list_kinds_of_case_destructive_fn [link argot.ref.switch_traits.trailing_argument_list_kinds_of_case_destructive `switch_traits::trailing_argument_list_kinds_of_case_destructive_fn`]]
[def switch_traits::trailing_argument_list_kinds_of_case_destructive_t [link argot.ref.switch_traits.trailing_argument_list_kinds_of_case_destructive `switch_traits::trailing_argument_list_kinds_of_case_destructive_t`]]
[def switch_traits::trailing_argument_list_kinds_of_case_destructive_v [link argot.ref.switch_traits.trailing_argument_list_kinds_of_case_destructive `switch_traits::trailing_argument_list_kinds_of_case_destructive_v`]]
[def switch_traits::trailing_argument_list_kinds_of_case_destructive [link argot.ref.switch_traits.trailing_argument_list_kinds_of_case_destructive `switch_traits::trailing_argument_list_kinds_of_case_destructive`]]
[def switch_traits::result_of_trailing_argument_list_kinds_of_case_destructive_t [link argot.ref.switch_traits.trailing_argument_list_kinds_of_case_destructive `switch_traits::result_of_trailing_argument_list_kinds_of_case_destructive_t`]]
[def switch_traits::result_of_trailing_argument_list_kinds_of_case_destructive [link argot.ref.switch_traits.trailing_argument_list_kinds_of_case_destructive `switch_traits::result_of_trailing_argument_list_kinds_of_case_destructive`]]

[def switch_traits_trailing_argument_list_kinds_of_case_persistent switch_traits::trailing_argument_list_kinds_of_case_persistent]
[def switch_traits::trailing_argument_list_kinds_of_case_persistent_fn [link argot.ref.switch_traits.trailing_argument_list_kinds_of_case_persistent `switch_traits::trailing_argument_list_kinds_of_case_persistent_fn`]]
[def switch_traits::trailing_argument_list_kinds_of_case_persistent_t [link argot.ref.switch_traits.trailing_argument_list_kinds_of_case_persistent `switch_traits::trailing_argument_list_kinds_of_case_persistent_t`]]
[def switch_traits::trailing_argument_list_kinds_of_case_persistent_v [link argot.ref.switch_traits.trailing_argument_list_kinds_of_case_persistent `switch_traits::trailing_argument_list_kinds_of_case_persistent_v`]]
[def switch_traits::trailing_argument_list_kinds_of_case_persistent [link argot.ref.switch_traits.trailing_argument_list_kinds_of_case_persistent `switch_traits::trailing_argument_list_kinds_of_case_persistent`]]
[def switch_traits::result_of_trailing_argument_list_kinds_of_case_persistent_t [link argot.ref.switch_traits.trailing_argument_list_kinds_of_case_persistent `switch_traits::result_of_trailing_argument_list_kinds_of_case_persistent_t`]]
[def switch_traits::result_of_trailing_argument_list_kinds_of_case_persistent [link argot.ref.switch_traits.trailing_argument_list_kinds_of_case_persistent `switch_traits::result_of_trailing_argument_list_kinds_of_case_persistent`]]

[def switch_traits_trailing_argument_list_kinds_of_default_destructive switch_traits::trailing_argument_list_kinds_of_default_destructive]
[def switch_traits::trailing_argument_list_kinds_of_default_destructive_fn [link argot.ref.switch_traits.trailing_argument_list_kinds_of_default_destructive `switch_traits::trailing_argument_list_kinds_of_default_destructive_fn`]]
[def switch_traits::trailing_argument_list_kinds_of_default_destructive_t [link argot.ref.switch_traits.trailing_argument_list_kinds_of_default_destructive `switch_traits::trailing_argument_list_kinds_of_default_destructive_t`]]
[def switch_traits::trailing_argument_list_kinds_of_default_destructive_v [link argot.ref.switch_traits.trailing_argument_list_kinds_of_default_destructive `switch_traits::trailing_argument_list_kinds_of_default_destructive_v`]]
[def switch_traits::trailing_argument_list_kinds_of_default_destructive [link argot.ref.switch_traits.trailing_argument_list_kinds_of_default_destructive `switch_traits::trailing_argument_list_kinds_of_default_destructive`]]
[def switch_traits::result_of_trailing_argument_list_kinds_of_default_destructive_t [link argot.ref.switch_traits.trailing_argument_list_kinds_of_default_destructive `switch_traits::result_of_trailing_argument_list_kinds_of_default_destructive_t`]]
[def switch_traits::result_of_trailing_argument_list_kinds_of_default_destructive [link argot.ref.switch_traits.trailing_argument_list_kinds_of_default_destructive `switch_traits::result_of_trailing_argument_list_kinds_of_default_destructive`]]

[def switch_traits_trailing_argument_list_kinds_of_default_persistent switch_traits::trailing_argument_list_kinds_of_default_persistent]
[def switch_traits::trailing_argument_list_kinds_of_default_persistent_fn [link argot.ref.switch_traits.trailing_argument_list_kinds_of_default_persistent `switch_traits::trailing_argument_list_kinds_of_default_persistent_fn`]]
[def switch_traits::trailing_argument_list_kinds_of_default_persistent_t [link argot.ref.switch_traits.trailing_argument_list_kinds_of_default_persistent `switch_traits::trailing_argument_list_kinds_of_default_persistent_t`]]
[def switch_traits::trailing_argument_list_kinds_of_default_persistent_v [link argot.ref.switch_traits.trailing_argument_list_kinds_of_default_persistent `switch_traits::trailing_argument_list_kinds_of_default_persistent_v`]]
[def switch_traits::trailing_argument_list_kinds_of_default_persistent [link argot.ref.switch_traits.trailing_argument_list_kinds_of_default_persistent `switch_traits::trailing_argument_list_kinds_of_default_persistent`]]
[def switch_traits::result_of_trailing_argument_list_kinds_of_default_persistent_t [link argot.ref.switch_traits.trailing_argument_list_kinds_of_default_persistent `switch_traits::result_of_trailing_argument_list_kinds_of_default_persistent_t`]]
[def switch_traits::result_of_trailing_argument_list_kinds_of_default_persistent [link argot.ref.switch_traits.trailing_argument_list_kinds_of_default_persistent `switch_traits::result_of_trailing_argument_list_kinds_of_default_persistent`]]

[def tuple_traits_element_type tuple_traits::element_type]
[def tuple_traits::element_type_fn [link argot.ref.tuple_traits.element_type `tuple_traits::element_type_fn`]]
[def tuple_traits::element_type_t [link argot.ref.tuple_traits.element_type `tuple_traits::element_type_t`]]
[def tuple_traits::element_type_v [link argot.ref.tuple_traits.element_type `tuple_traits::element_type_v`]]
[def tuple_traits::element_type [link argot.ref.tuple_traits.element_type `tuple_traits::element_type`]]
[def tuple_traits::result_of_element_type_t [link argot.ref.tuple_traits.element_type `tuple_traits::result_of_element_type_t`]]
[def tuple_traits::result_of_element_type [link argot.ref.tuple_traits.element_type `tuple_traits::result_of_element_type`]]

[def tuple_traits_get tuple_traits::get]
[def tuple_traits::get_fn [link argot.ref.tuple_traits.get `tuple_traits::get_fn`]]
[def tuple_traits::get_t [link argot.ref.tuple_traits.get `tuple_traits::get_t`]]
[def tuple_traits::get_v [link argot.ref.tuple_traits.get `tuple_traits::get_v`]]
[def tuple_traits::get [link argot.ref.tuple_traits.get `tuple_traits::get`]]
[def tuple_traits::result_of_get_t [link argot.ref.tuple_traits.get `tuple_traits::result_of_get_t`]]
[def tuple_traits::result_of_get [link argot.ref.tuple_traits.get `tuple_traits::result_of_get`]]

[def tuple_traits_index_constant tuple_traits::index_constant]
[def tuple_traits::index_constant_fn [link argot.ref.tuple_traits.index_constant `tuple_traits::index_constant_fn`]]
[def tuple_traits::index_constant_t [link argot.ref.tuple_traits.index_constant `tuple_traits::index_constant_t`]]
[def tuple_traits::index_constant_v [link argot.ref.tuple_traits.index_constant `tuple_traits::index_constant_v`]]
[def tuple_traits::index_constant [link argot.ref.tuple_traits.index_constant `tuple_traits::index_constant`]]
[def tuple_traits::result_of_index_constant_t [link argot.ref.tuple_traits.index_constant `tuple_traits::result_of_index_constant_t`]]
[def tuple_traits::result_of_index_constant [link argot.ref.tuple_traits.index_constant `tuple_traits::result_of_index_constant`]]

[def tuple_traits_index_type tuple_traits::index_type]
[def tuple_traits::index_type_fn [link argot.ref.tuple_traits.index_type `tuple_traits::index_type_fn`]]
[def tuple_traits::index_type_t [link argot.ref.tuple_traits.index_type `tuple_traits::index_type_t`]]
[def tuple_traits::index_type_v [link argot.ref.tuple_traits.index_type `tuple_traits::index_type_v`]]
[def tuple_traits::index_type [link argot.ref.tuple_traits.index_type `tuple_traits::index_type`]]
[def tuple_traits::result_of_index_type_t [link argot.ref.tuple_traits.index_type `tuple_traits::result_of_index_type_t`]]
[def tuple_traits::result_of_index_type [link argot.ref.tuple_traits.index_type `tuple_traits::result_of_index_type`]]

[def tuple_traits_natural_get tuple_traits::natural_get]
[def tuple_traits::natural_get_fn [link argot.ref.tuple_traits.natural_get `tuple_traits::natural_get_fn`]]
[def tuple_traits::natural_get_t [link argot.ref.tuple_traits.natural_get `tuple_traits::natural_get_t`]]
[def tuple_traits::natural_get_v [link argot.ref.tuple_traits.natural_get `tuple_traits::natural_get_v`]]
[def tuple_traits::natural_get [link argot.ref.tuple_traits.natural_get `tuple_traits::natural_get`]]
[def tuple_traits::result_of_natural_get_t [link argot.ref.tuple_traits.natural_get `tuple_traits::result_of_natural_get_t`]]
[def tuple_traits::result_of_natural_get [link argot.ref.tuple_traits.natural_get `tuple_traits::result_of_natural_get`]]

[def tuple_traits_num_elements tuple_traits::num_elements]
[def tuple_traits::num_elements_fn [link argot.ref.tuple_traits.num_elements `tuple_traits::num_elements_fn`]]
[def tuple_traits::num_elements_t [link argot.ref.tuple_traits.num_elements `tuple_traits::num_elements_t`]]
[def tuple_traits::num_elements_v [link argot.ref.tuple_traits.num_elements `tuple_traits::num_elements_v`]]
[def tuple_traits::num_elements [link argot.ref.tuple_traits.num_elements `tuple_traits::num_elements`]]
[def tuple_traits::result_of_num_elements_t [link argot.ref.tuple_traits.num_elements `tuple_traits::result_of_num_elements_t`]]
[def tuple_traits::result_of_num_elements [link argot.ref.tuple_traits.num_elements `tuple_traits::result_of_num_elements`]]

[def union_traits_alternative_type union_traits::alternative_type]
[def union_traits::alternative_type_fn [link argot.ref.union_traits.alternative_type `union_traits::alternative_type_fn`]]
[def union_traits::alternative_type_t [link argot.ref.union_traits.alternative_type `union_traits::alternative_type_t`]]
[def union_traits::alternative_type_v [link argot.ref.union_traits.alternative_type `union_traits::alternative_type_v`]]
[def union_traits::alternative_type [link argot.ref.union_traits.alternative_type `union_traits::alternative_type`]]
[def union_traits::result_of_alternative_type_t [link argot.ref.union_traits.alternative_type `union_traits::result_of_alternative_type_t`]]
[def union_traits::result_of_alternative_type [link argot.ref.union_traits.alternative_type `union_traits::result_of_alternative_type`]]

[def union_traits_get union_traits::get]
[def union_traits::get_fn [link argot.ref.union_traits.get `union_traits::get_fn`]]
[def union_traits::get_t [link argot.ref.union_traits.get `union_traits::get_t`]]
[def union_traits::get_v [link argot.ref.union_traits.get `union_traits::get_v`]]
[def union_traits::get [link argot.ref.union_traits.get `union_traits::get`]]
[def union_traits::result_of_get_t [link argot.ref.union_traits.get `union_traits::result_of_get_t`]]
[def union_traits::result_of_get [link argot.ref.union_traits.get `union_traits::result_of_get`]]

[def union_traits_index_constant union_traits::index_constant]
[def union_traits::index_constant_fn [link argot.ref.union_traits.index_constant `union_traits::index_constant_fn`]]
[def union_traits::index_constant_t [link argot.ref.union_traits.index_constant `union_traits::index_constant_t`]]
[def union_traits::index_constant_v [link argot.ref.union_traits.index_constant `union_traits::index_constant_v`]]
[def union_traits::index_constant [link argot.ref.union_traits.index_constant `union_traits::index_constant`]]
[def union_traits::result_of_index_constant_t [link argot.ref.union_traits.index_constant `union_traits::result_of_index_constant_t`]]
[def union_traits::result_of_index_constant [link argot.ref.union_traits.index_constant `union_traits::result_of_index_constant`]]

[def union_traits_index_type union_traits::index_type]
[def union_traits::index_type_fn [link argot.ref.union_traits.index_type `union_traits::index_type_fn`]]
[def union_traits::index_type_t [link argot.ref.union_traits.index_type `union_traits::index_type_t`]]
[def union_traits::index_type_v [link argot.ref.union_traits.index_type `union_traits::index_type_v`]]
[def union_traits::index_type [link argot.ref.union_traits.index_type `union_traits::index_type`]]
[def union_traits::result_of_index_type_t [link argot.ref.union_traits.index_type `union_traits::result_of_index_type_t`]]
[def union_traits::result_of_index_type [link argot.ref.union_traits.index_type `union_traits::result_of_index_type`]]

[def union_traits_natural_get union_traits::natural_get]
[def union_traits::natural_get_fn [link argot.ref.union_traits.natural_get `union_traits::natural_get_fn`]]
[def union_traits::natural_get_t [link argot.ref.union_traits.natural_get `union_traits::natural_get_t`]]
[def union_traits::natural_get_v [link argot.ref.union_traits.natural_get `union_traits::natural_get_v`]]
[def union_traits::natural_get [link argot.ref.union_traits.natural_get `union_traits::natural_get`]]
[def union_traits::result_of_natural_get_t [link argot.ref.union_traits.natural_get `union_traits::result_of_natural_get_t`]]
[def union_traits::result_of_natural_get [link argot.ref.union_traits.natural_get `union_traits::result_of_natural_get`]]

[def union_traits_num_alternatives union_traits::num_alternatives]
[def union_traits::num_alternatives_fn [link argot.ref.union_traits.num_alternatives `union_traits::num_alternatives_fn`]]
[def union_traits::num_alternatives_t [link argot.ref.union_traits.num_alternatives `union_traits::num_alternatives_t`]]
[def union_traits::num_alternatives_v [link argot.ref.union_traits.num_alternatives `union_traits::num_alternatives_v`]]
[def union_traits::num_alternatives [link argot.ref.union_traits.num_alternatives `union_traits::num_alternatives`]]
[def union_traits::result_of_num_alternatives_t [link argot.ref.union_traits.num_alternatives `union_traits::result_of_num_alternatives_t`]]
[def union_traits::result_of_num_alternatives [link argot.ref.union_traits.num_alternatives `union_traits::result_of_num_alternatives`]]

[def variant_traits_alternative_type variant_traits::alternative_type]
[def variant_traits::alternative_type_fn [link argot.ref.variant_traits.alternative_type `variant_traits::alternative_type_fn`]]
[def variant_traits::alternative_type_t [link argot.ref.variant_traits.alternative_type `variant_traits::alternative_type_t`]]
[def variant_traits::alternative_type_v [link argot.ref.variant_traits.alternative_type `variant_traits::alternative_type_v`]]
[def variant_traits::alternative_type [link argot.ref.variant_traits.alternative_type `variant_traits::alternative_type`]]
[def variant_traits::result_of_alternative_type_t [link argot.ref.variant_traits.alternative_type `variant_traits::result_of_alternative_type_t`]]
[def variant_traits::result_of_alternative_type [link argot.ref.variant_traits.alternative_type `variant_traits::result_of_alternative_type`]]

[def variant_traits_get variant_traits::get]
[def variant_traits::get_fn [link argot.ref.variant_traits.get `variant_traits::get_fn`]]
[def variant_traits::get_t [link argot.ref.variant_traits.get `variant_traits::get_t`]]
[def variant_traits::get_v [link argot.ref.variant_traits.get `variant_traits::get_v`]]
[def variant_traits::get [link argot.ref.variant_traits.get `variant_traits::get`]]
[def variant_traits::result_of_get_t [link argot.ref.variant_traits.get `variant_traits::result_of_get_t`]]
[def variant_traits::result_of_get [link argot.ref.variant_traits.get `variant_traits::result_of_get`]]

[def variant_traits_index_constant variant_traits::index_constant]
[def variant_traits::index_constant_fn [link argot.ref.variant_traits.index_constant `variant_traits::index_constant_fn`]]
[def variant_traits::index_constant_t [link argot.ref.variant_traits.index_constant `variant_traits::index_constant_t`]]
[def variant_traits::index_constant_v [link argot.ref.variant_traits.index_constant `variant_traits::index_constant_v`]]
[def variant_traits::index_constant [link argot.ref.variant_traits.index_constant `variant_traits::index_constant`]]
[def variant_traits::result_of_index_constant_t [link argot.ref.variant_traits.index_constant `variant_traits::result_of_index_constant_t`]]
[def variant_traits::result_of_index_constant [link argot.ref.variant_traits.index_constant `variant_traits::result_of_index_constant`]]

[def variant_traits_index_of variant_traits::index_of]
[def variant_traits::index_of_fn [link argot.ref.variant_traits.index_of `variant_traits::index_of_fn`]]
[def variant_traits::index_of_t [link argot.ref.variant_traits.index_of `variant_traits::index_of_t`]]
[def variant_traits::index_of_v [link argot.ref.variant_traits.index_of `variant_traits::index_of_v`]]
[def variant_traits::index_of [link argot.ref.variant_traits.index_of `variant_traits::index_of`]]
[def variant_traits::result_of_index_of_t [link argot.ref.variant_traits.index_of `variant_traits::result_of_index_of_t`]]
[def variant_traits::result_of_index_of [link argot.ref.variant_traits.index_of `variant_traits::result_of_index_of`]]

[def variant_traits_index_type variant_traits::index_type]
[def variant_traits::index_type_fn [link argot.ref.variant_traits.index_type `variant_traits::index_type_fn`]]
[def variant_traits::index_type_t [link argot.ref.variant_traits.index_type `variant_traits::index_type_t`]]
[def variant_traits::index_type_v [link argot.ref.variant_traits.index_type `variant_traits::index_type_v`]]
[def variant_traits::index_type [link argot.ref.variant_traits.index_type `variant_traits::index_type`]]
[def variant_traits::result_of_index_type_t [link argot.ref.variant_traits.index_type `variant_traits::result_of_index_type_t`]]
[def variant_traits::result_of_index_type [link argot.ref.variant_traits.index_type `variant_traits::result_of_index_type`]]

[def variant_traits_natural_get variant_traits::natural_get]
[def variant_traits::natural_get_fn [link argot.ref.variant_traits.natural_get `variant_traits::natural_get_fn`]]
[def variant_traits::natural_get_t [link argot.ref.variant_traits.natural_get `variant_traits::natural_get_t`]]
[def variant_traits::natural_get_v [link argot.ref.variant_traits.natural_get `variant_traits::natural_get_v`]]
[def variant_traits::natural_get [link argot.ref.variant_traits.natural_get `variant_traits::natural_get`]]
[def variant_traits::result_of_natural_get_t [link argot.ref.variant_traits.natural_get `variant_traits::result_of_natural_get_t`]]
[def variant_traits::result_of_natural_get [link argot.ref.variant_traits.natural_get `variant_traits::result_of_natural_get`]]

[def variant_traits_num_alternatives variant_traits::num_alternatives]
[def variant_traits::num_alternatives_fn [link argot.ref.variant_traits.num_alternatives `variant_traits::num_alternatives_fn`]]
[def variant_traits::num_alternatives_t [link argot.ref.variant_traits.num_alternatives `variant_traits::num_alternatives_t`]]
[def variant_traits::num_alternatives_v [link argot.ref.variant_traits.num_alternatives `variant_traits::num_alternatives_v`]]
[def variant_traits::num_alternatives [link argot.ref.variant_traits.num_alternatives `variant_traits::num_alternatives`]]
[def variant_traits::result_of_num_alternatives_t [link argot.ref.variant_traits.num_alternatives `variant_traits::result_of_num_alternatives_t`]]
[def variant_traits::result_of_num_alternatives [link argot.ref.variant_traits.num_alternatives `variant_traits::result_of_num_alternatives`]]

[def concepts_allocator `Allocator`]
[def _Allocator_ Allocator]
[def _Allocator `Allocator`]
[def Allocator [link argot.ref.concepts.allocator `Allocator`]]

[def concepts_argot_invocable `ArgotInvocable`]
[def _ArgotInvocable_ ArgotInvocable]
[def _ArgotInvocable `ArgotInvocable`]
[def ArgotInvocable [link argot.ref.concepts.argot_invocable `ArgotInvocable`]]

[def concepts_argot_invocable_before_reduction `ArgotInvocableBeforeReduction`]
[def _ArgotInvocableBeforeReduction_ ArgotInvocableBeforeReduction]
[def _ArgotInvocableBeforeReduction `ArgotInvocableBeforeReduction`]
[def ArgotInvocableBeforeReduction [link argot.ref.concepts.argot_invocable_before_reduction `ArgotInvocableBeforeReduction`]]

[def concepts_argot_invocable_with_persistent_reduction `ArgotInvocableWithPersistentReduction`]
[def _ArgotInvocableWithPersistentReduction_ ArgotInvocableWithPersistentReduction]
[def _ArgotInvocableWithPersistentReduction `ArgotInvocableWithPersistentReduction`]
[def ArgotInvocableWithPersistentReduction [link argot.ref.concepts.argot_invocable_with_persistent_reduction `ArgotInvocableWithPersistentReduction`]]

[def concepts_argot_invocable_with_reduction `ArgotInvocableWithReduction`]
[def _ArgotInvocableWithReduction_ ArgotInvocableWithReduction]
[def _ArgotInvocableWithReduction `ArgotInvocableWithReduction`]
[def ArgotInvocableWithReduction [link argot.ref.concepts.argot_invocable_with_reduction `ArgotInvocableWithReduction`]]

[def concepts_argument_list_kinds `ArgumentListKinds`]
[def _ArgumentListKinds_ ArgumentListKinds]
[def _ArgumentListKinds `ArgumentListKinds`]
[def ArgumentListKinds [link argot.ref.concepts.argument_list_kinds `ArgumentListKinds`]]

[def concepts_argument_provider `ArgumentProvider`]
[def _ArgumentProvider_ ArgumentProvider]
[def _ArgumentProvider `ArgumentProvider`]
[def ArgumentProvider [link argot.ref.concepts.argument_provider `ArgumentProvider`]]

[def concepts_argument_provider_generator_with `ArgumentProviderGeneratorWith`]
[def _ArgumentProviderGeneratorWith_ ArgumentProviderGeneratorWith]
[def _ArgumentProviderGeneratorWith `ArgumentProviderGeneratorWith`]
[def ArgumentProviderGeneratorWith [link argot.ref.concepts.argument_provider_generator_with `ArgumentProviderGeneratorWith`]]

[def concepts_argument_provider_generator_with_each `ArgumentProviderGeneratorWithEach`]
[def _ArgumentProviderGeneratorWithEach_ ArgumentProviderGeneratorWithEach]
[def _ArgumentProviderGeneratorWithEach `ArgumentProviderGeneratorWithEach`]
[def ArgumentProviderGeneratorWithEach [link argot.ref.concepts.argument_provider_generator_with_each `ArgumentProviderGeneratorWithEach`]]

[def concepts_argument_provider_generator_with_kinds `ArgumentProviderGeneratorWithKinds`]
[def _ArgumentProviderGeneratorWithKinds_ ArgumentProviderGeneratorWithKinds]
[def _ArgumentProviderGeneratorWithKinds `ArgumentProviderGeneratorWithKinds`]
[def ArgumentProviderGeneratorWithKinds [link argot.ref.concepts.argument_provider_generator_with_kinds `ArgumentProviderGeneratorWithKinds`]]

[def concepts_argument_provider_generator_with_provision `ArgumentProviderGeneratorWithProvision`]
[def _ArgumentProviderGeneratorWithProvision_ ArgumentProviderGeneratorWithProvision]
[def _ArgumentProviderGeneratorWithProvision `ArgumentProviderGeneratorWithProvision`]
[def ArgumentProviderGeneratorWithProvision [link argot.ref.concepts.argument_provider_generator_with_provision `ArgumentProviderGeneratorWithProvision`]]

[def concepts_argument_provider_to `ArgumentProviderTo`]
[def _ArgumentProviderTo_ ArgumentProviderTo]
[def _ArgumentProviderTo `ArgumentProviderTo`]
[def ArgumentProviderTo [link argot.ref.concepts.argument_provider_to `ArgumentProviderTo`]]

[def concepts_argument_receiver `ArgumentReceiver`]
[def _ArgumentReceiver_ ArgumentReceiver]
[def _ArgumentReceiver `ArgumentReceiver`]
[def ArgumentReceiver [link argot.ref.concepts.argument_receiver `ArgumentReceiver`]]

[def concepts_argument_receiver_of `ArgumentReceiverOf`]
[def _ArgumentReceiverOf_ ArgumentReceiverOf]
[def _ArgumentReceiverOf `ArgumentReceiverOf`]
[def ArgumentReceiverOf [link argot.ref.concepts.argument_receiver_of `ArgumentReceiverOf`]]

[def concepts_argument_receiver_of_kinds `ArgumentReceiverOfKinds`]
[def _ArgumentReceiverOfKinds_ ArgumentReceiverOfKinds]
[def _ArgumentReceiverOfKinds `ArgumentReceiverOfKinds`]
[def ArgumentReceiverOfKinds [link argot.ref.concepts.argument_receiver_of_kinds `ArgumentReceiverOfKinds`]]

[def concepts_argument_receiver_of_lifted_call `ArgumentReceiverOfLiftedCall`]
[def _ArgumentReceiverOfLiftedCall_ ArgumentReceiverOfLiftedCall]
[def _ArgumentReceiverOfLiftedCall `ArgumentReceiverOfLiftedCall`]
[def ArgumentReceiverOfLiftedCall [link argot.ref.concepts.argument_receiver_of_lifted_call `ArgumentReceiverOfLiftedCall`]]

[def concepts_argument_receiver_of_lifted_persistent_call `ArgumentReceiverOfLiftedPersistentCall`]
[def _ArgumentReceiverOfLiftedPersistentCall_ ArgumentReceiverOfLiftedPersistentCall]
[def _ArgumentReceiverOfLiftedPersistentCall `ArgumentReceiverOfLiftedPersistentCall`]
[def ArgumentReceiverOfLiftedPersistentCall [link argot.ref.concepts.argument_receiver_of_lifted_persistent_call `ArgumentReceiverOfLiftedPersistentCall`]]

[def concepts_argument_type `ArgumentType`]
[def _ArgumentType_ ArgumentType]
[def _ArgumentType `ArgumentType`]
[def ArgumentType [link argot.ref.concepts.argument_type `ArgumentType`]]

[def concepts_argument_types `ArgumentTypes`]
[def _ArgumentTypes_ ArgumentTypes]
[def _ArgumentTypes `ArgumentTypes`]
[def ArgumentTypes [link argot.ref.concepts.argument_types `ArgumentTypes`]]

[def concepts_array `Array`]
[def _Array_ Array]
[def _Array `Array`]
[def Array [link argot.ref.concepts.array `Array`]]

[def concepts_assignable `Assignable`]
[def _Assignable_ Assignable]
[def _Assignable `Assignable`]
[def Assignable [link argot.ref.concepts.assignable `Assignable`]]

[def concepts_assignable_when_contained `AssignableWhenContained`]
[def _AssignableWhenContained_ AssignableWhenContained]
[def _AssignableWhenContained `AssignableWhenContained`]
[def AssignableWhenContained [link argot.ref.concepts.assignable_when_contained `AssignableWhenContained`]]

[def concepts_basic_callable_with `BasicCallableWith`]
[def _BasicCallableWith_ BasicCallableWith]
[def _BasicCallableWith `BasicCallableWith`]
[def BasicCallableWith [link argot.ref.concepts.basic_callable_with `BasicCallableWith`]]

[def concepts_bool_or_constant `BoolOrConstant`]
[def _BoolOrConstant_ BoolOrConstant]
[def _BoolOrConstant `BoolOrConstant`]
[def BoolOrConstant [link argot.ref.concepts.bool_or_constant `BoolOrConstant`]]

[def concepts_can_default_to_reference_to `CanDefaultToReferenceTo`]
[def _CanDefaultToReferenceTo_ CanDefaultToReferenceTo]
[def _CanDefaultToReferenceTo `CanDefaultToReferenceTo`]
[def CanDefaultToReferenceTo [link argot.ref.concepts.can_default_to_reference_to `CanDefaultToReferenceTo`]]

[def concepts_can_default_to_value_of `CanDefaultToValueOf`]
[def _CanDefaultToValueOf_ CanDefaultToValueOf]
[def _CanDefaultToValueOf `CanDefaultToValueOf`]
[def CanDefaultToValueOf [link argot.ref.concepts.can_default_to_value_of `CanDefaultToValueOf`]]

[def concepts_case_labels `CaseLabels`]
[def _CaseLabels_ CaseLabels]
[def _CaseLabels `CaseLabels`]
[def CaseLabels [link argot.ref.concepts.case_labels `CaseLabels`]]

[def concepts_class `Class`]
[def _Class_ Class]
[def _Class `Class`]
[def Class [link argot.ref.concepts.class `Class`]]

[def concepts_comparable `Comparable`]
[def _Comparable_ Comparable]
[def _Comparable `Comparable`]
[def Comparable [link argot.ref.concepts.comparable `Comparable`]]

[def concepts_composable `Composable`]
[def _Composable_ Composable]
[def _Composable `Composable`]
[def Composable [link argot.ref.concepts.composable `Composable`]]

[def concepts_composable_with_persistent_provision `ComposableWithPersistentProvision`]
[def _ComposableWithPersistentProvision_ ComposableWithPersistentProvision]
[def _ComposableWithPersistentProvision `ComposableWithPersistentProvision`]
[def ComposableWithPersistentProvision [link argot.ref.concepts.composable_with_persistent_provision `ComposableWithPersistentProvision`]]

[def concepts_composable_with_provision `ComposableWithProvision`]
[def _ComposableWithProvision_ ComposableWithProvision]
[def _ComposableWithProvision `ComposableWithProvision`]
[def ComposableWithProvision [link argot.ref.concepts.composable_with_provision `ComposableWithProvision`]]

[def concepts_concurrent_argument_provider `ConcurrentArgumentProvider`]
[def _ConcurrentArgumentProvider_ ConcurrentArgumentProvider]
[def _ConcurrentArgumentProvider `ConcurrentArgumentProvider`]
[def ConcurrentArgumentProvider [link argot.ref.concepts.concurrent_argument_provider `ConcurrentArgumentProvider`]]

[def concepts_concurrent_argument_provider_to `ConcurrentArgumentProviderTo`]
[def _ConcurrentArgumentProviderTo_ ConcurrentArgumentProviderTo]
[def _ConcurrentArgumentProviderTo `ConcurrentArgumentProviderTo`]
[def ConcurrentArgumentProviderTo [link argot.ref.concepts.concurrent_argument_provider_to `ConcurrentArgumentProviderTo`]]

[def concepts_concurrent_can_default_to_value_of `ConcurrentCanDefaultToValueOf`]
[def _ConcurrentCanDefaultToValueOf_ ConcurrentCanDefaultToValueOf]
[def _ConcurrentCanDefaultToValueOf `ConcurrentCanDefaultToValueOf`]
[def ConcurrentCanDefaultToValueOf [link argot.ref.concepts.concurrent_can_default_to_value_of `ConcurrentCanDefaultToValueOf`]]

[def concepts_concurrent_expandable `ConcurrentExpandable`]
[def _ConcurrentExpandable_ ConcurrentExpandable]
[def _ConcurrentExpandable `ConcurrentExpandable`]
[def ConcurrentExpandable [link argot.ref.concepts.concurrent_expandable `ConcurrentExpandable`]]

[def concepts_constructible `Constructible`]
[def _Constructible_ Constructible]
[def _Constructible `Constructible`]
[def Constructible [link argot.ref.concepts.constructible `Constructible`]]

[def concepts_constructible_with_each `ConstructibleWithEach`]
[def _ConstructibleWithEach_ ConstructibleWithEach]
[def _ConstructibleWithEach `ConstructibleWithEach`]
[def ConstructibleWithEach [link argot.ref.concepts.constructible_with_each `ConstructibleWithEach`]]

[def concepts_constructible_with_kinds `ConstructibleWithKinds`]
[def _ConstructibleWithKinds_ ConstructibleWithKinds]
[def _ConstructibleWithKinds `ConstructibleWithKinds`]
[def ConstructibleWithKinds [link argot.ref.concepts.constructible_with_kinds `ConstructibleWithKinds`]]

[def concepts_contextually_convertible_to_bool `ContextuallyConvertibleToBool`]
[def _ContextuallyConvertibleToBool_ ContextuallyConvertibleToBool]
[def _ContextuallyConvertibleToBool `ContextuallyConvertibleToBool`]
[def ContextuallyConvertibleToBool [link argot.ref.concepts.contextually_convertible_to_bool `ContextuallyConvertibleToBool`]]

[def concepts_convertible `Convertible`]
[def _Convertible_ Convertible]
[def _Convertible `Convertible`]
[def Convertible [link argot.ref.concepts.convertible `Convertible`]]

[def concepts_convertible_to_type_or_constant `ConvertibleToTypeOrConstant`]
[def _ConvertibleToTypeOrConstant_ ConvertibleToTypeOrConstant]
[def _ConvertibleToTypeOrConstant `ConvertibleToTypeOrConstant`]
[def ConvertibleToTypeOrConstant [link argot.ref.concepts.convertible_to_type_or_constant `ConvertibleToTypeOrConstant`]]

[def concepts_copy_assignable `CopyAssignable`]
[def _CopyAssignable_ CopyAssignable]
[def _CopyAssignable `CopyAssignable`]
[def CopyAssignable [link argot.ref.concepts.copy_assignable `CopyAssignable`]]

[def concepts_copy_constructible `CopyConstructible`]
[def _CopyConstructible_ CopyConstructible]
[def _CopyConstructible `CopyConstructible`]
[def CopyConstructible [link argot.ref.concepts.copy_constructible `CopyConstructible`]]

[def concepts_decay_sinkable `DecaySinkable`]
[def _DecaySinkable_ DecaySinkable]
[def _DecaySinkable `DecaySinkable`]
[def DecaySinkable [link argot.ref.concepts.decay_sinkable `DecaySinkable`]]

[def concepts_decayed_type `DecayedType`]
[def _DecayedType_ DecayedType]
[def _DecayedType `DecayedType`]
[def DecayedType [link argot.ref.concepts.decayed_type `DecayedType`]]

[def concepts_default `Default`]
[def _Default_ Default]
[def _Default `Default`]
[def Default [link argot.ref.concepts.default `Default`]]

[def concepts_default_constructible `DefaultConstructible`]
[def _DefaultConstructible_ DefaultConstructible]
[def _DefaultConstructible `DefaultConstructible`]
[def DefaultConstructible [link argot.ref.concepts.default_constructible `DefaultConstructible`]]

[def concepts_default_for_type `DefaultForType`]
[def _DefaultForType_ DefaultForType]
[def _DefaultForType `DefaultForType`]
[def DefaultForType [link argot.ref.concepts.default_for_type `DefaultForType`]]

[def concepts_destructible `Destructible`]
[def _Destructible_ Destructible]
[def _Destructible `Destructible`]
[def Destructible [link argot.ref.concepts.destructible `Destructible`]]

[def concepts_emplaceable_when_contained `EmplaceableWhenContained`]
[def _EmplaceableWhenContained_ EmplaceableWhenContained]
[def _EmplaceableWhenContained `EmplaceableWhenContained`]
[def EmplaceableWhenContained [link argot.ref.concepts.emplaceable_when_contained `EmplaceableWhenContained`]]

[def concepts_emplaceable_with_result_when_contained `EmplaceableWithResultWhenContained`]
[def _EmplaceableWithResultWhenContained_ EmplaceableWithResultWhenContained]
[def _EmplaceableWithResultWhenContained `EmplaceableWithResultWhenContained`]
[def EmplaceableWithResultWhenContained [link argot.ref.concepts.emplaceable_with_result_when_contained `EmplaceableWithResultWhenContained`]]

[def concepts_equality_comparable `EqualityComparable`]
[def _EqualityComparable_ EqualityComparable]
[def _EqualityComparable `EqualityComparable`]
[def EqualityComparable [link argot.ref.concepts.equality_comparable `EqualityComparable`]]

[def concepts_equatable `Equatable`]
[def _Equatable_ Equatable]
[def _Equatable `Equatable`]
[def Equatable [link argot.ref.concepts.equatable `Equatable`]]

[def concepts_exception `Exception`]
[def _Exception_ Exception]
[def _Exception `Exception`]
[def Exception [link argot.ref.concepts.exception `Exception`]]

[def concepts_exceptional_argument_provider `ExceptionalArgumentProvider`]
[def _ExceptionalArgumentProvider_ ExceptionalArgumentProvider]
[def _ExceptionalArgumentProvider `ExceptionalArgumentProvider`]
[def ExceptionalArgumentProvider [link argot.ref.concepts.exceptional_argument_provider `ExceptionalArgumentProvider`]]

[def concepts_exceptional_persistent_argument_provider `ExceptionalPersistentArgumentProvider`]
[def _ExceptionalPersistentArgumentProvider_ ExceptionalPersistentArgumentProvider]
[def _ExceptionalPersistentArgumentProvider `ExceptionalPersistentArgumentProvider`]
[def ExceptionalPersistentArgumentProvider [link argot.ref.concepts.exceptional_persistent_argument_provider `ExceptionalPersistentArgumentProvider`]]

[def concepts_exceptional_persistent_switch_body_case `ExceptionalPersistentSwitchBodyCase`]
[def _ExceptionalPersistentSwitchBodyCase_ ExceptionalPersistentSwitchBodyCase]
[def _ExceptionalPersistentSwitchBodyCase `ExceptionalPersistentSwitchBodyCase`]
[def ExceptionalPersistentSwitchBodyCase [link argot.ref.concepts.exceptional_persistent_switch_body_case `ExceptionalPersistentSwitchBodyCase`]]

[def concepts_exceptional_persistent_switch_body_default_for_type `ExceptionalPersistentSwitchBodyDefaultForType`]
[def _ExceptionalPersistentSwitchBodyDefaultForType_ ExceptionalPersistentSwitchBodyDefaultForType]
[def _ExceptionalPersistentSwitchBodyDefaultForType `ExceptionalPersistentSwitchBodyDefaultForType`]
[def ExceptionalPersistentSwitchBodyDefaultForType [link argot.ref.concepts.exceptional_persistent_switch_body_default_for_type `ExceptionalPersistentSwitchBodyDefaultForType`]]

[def concepts_exceptional_switch_body_case `ExceptionalSwitchBodyCase`]
[def _ExceptionalSwitchBodyCase_ ExceptionalSwitchBodyCase]
[def _ExceptionalSwitchBodyCase `ExceptionalSwitchBodyCase`]
[def ExceptionalSwitchBodyCase [link argot.ref.concepts.exceptional_switch_body_case `ExceptionalSwitchBodyCase`]]

[def concepts_exceptional_switch_body_default_for_type `ExceptionalSwitchBodyDefaultForType`]
[def _ExceptionalSwitchBodyDefaultForType_ ExceptionalSwitchBodyDefaultForType]
[def _ExceptionalSwitchBodyDefaultForType `ExceptionalSwitchBodyDefaultForType`]
[def ExceptionalSwitchBodyDefaultForType [link argot.ref.concepts.exceptional_switch_body_default_for_type `ExceptionalSwitchBodyDefaultForType`]]

[def concepts_execution_context `ExecutionContext`]
[def _ExecutionContext_ ExecutionContext]
[def _ExecutionContext `ExecutionContext`]
[def ExecutionContext [link argot.ref.concepts.execution_context `ExecutionContext`]]

[def concepts_executor `Executor`]
[def _Executor_ Executor]
[def _Executor `Executor`]
[def Executor [link argot.ref.concepts.executor `Executor`]]

[def concepts_expandable `Expandable`]
[def _Expandable_ Expandable]
[def _Expandable `Expandable`]
[def Expandable [link argot.ref.concepts.expandable `Expandable`]]

[def concepts_expandable_argument_provider `ExpandableArgumentProvider`]
[def _ExpandableArgumentProvider_ ExpandableArgumentProvider]
[def _ExpandableArgumentProvider `ExpandableArgumentProvider`]
[def ExpandableArgumentProvider [link argot.ref.concepts.expandable_argument_provider `ExpandableArgumentProvider`]]

[def concepts_explicitly_convertible `ExplicitlyConvertible`]
[def _ExplicitlyConvertible_ ExplicitlyConvertible]
[def _ExplicitlyConvertible `ExplicitlyConvertible`]
[def ExplicitlyConvertible [link argot.ref.concepts.explicitly_convertible `ExplicitlyConvertible`]]

[def concepts_false `False`]
[def _False_ False]
[def _False `False`]
[def False [link argot.ref.concepts.false `False`]]

[def concepts_forgetful_then_providable `ForgetfulThenProvidable`]
[def _ForgetfulThenProvidable_ ForgetfulThenProvidable]
[def _ForgetfulThenProvidable `ForgetfulThenProvidable`]
[def ForgetfulThenProvidable [link argot.ref.concepts.forgetful_then_providable `ForgetfulThenProvidable`]]

[def concepts_forgetful_thenable `ForgetfulThenable`]
[def _ForgetfulThenable_ ForgetfulThenable]
[def _ForgetfulThenable `ForgetfulThenable`]
[def ForgetfulThenable [link argot.ref.concepts.forgetful_thenable `ForgetfulThenable`]]

[def concepts_future `Future`]
[def _Future_ Future]
[def _Future `Future`]
[def Future [link argot.ref.concepts.future `Future`]]

[def concepts_future_packager `FuturePackager`]
[def _FuturePackager_ FuturePackager]
[def _FuturePackager `FuturePackager`]
[def FuturePackager [link argot.ref.concepts.future_packager `FuturePackager`]]

[def concepts_greater `Greater`]
[def _Greater_ Greater]
[def _Greater `Greater`]
[def Greater [link argot.ref.concepts.greater `Greater`]]

[def concepts_greater_equal `GreaterEqual`]
[def _GreaterEqual_ GreaterEqual]
[def _GreaterEqual `GreaterEqual`]
[def GreaterEqual [link argot.ref.concepts.greater_equal `GreaterEqual`]]

[def concepts_greater_equal_comparable `GreaterEqualComparable`]
[def _GreaterEqualComparable_ GreaterEqualComparable]
[def _GreaterEqualComparable `GreaterEqualComparable`]
[def GreaterEqualComparable [link argot.ref.concepts.greater_equal_comparable `GreaterEqualComparable`]]

[def concepts_greater_than_comparable `GreaterThanComparable`]
[def _GreaterThanComparable_ GreaterThanComparable]
[def _GreaterThanComparable `GreaterThanComparable`]
[def GreaterThanComparable [link argot.ref.concepts.greater_than_comparable `GreaterThanComparable`]]

[def concepts_hashable `Hashable`]
[def _Hashable_ Hashable]
[def _Hashable `Hashable`]
[def Hashable [link argot.ref.concepts.hashable `Hashable`]]

[def concepts_higher_order_argument_provider `HigherOrderArgumentProvider`]
[def _HigherOrderArgumentProvider_ HigherOrderArgumentProvider]
[def _HigherOrderArgumentProvider `HigherOrderArgumentProvider`]
[def HigherOrderArgumentProvider [link argot.ref.concepts.higher_order_argument_provider `HigherOrderArgumentProvider`]]

[def concepts_higher_order_concurrent_argument_provider `HigherOrderConcurrentArgumentProvider`]
[def _HigherOrderConcurrentArgumentProvider_ HigherOrderConcurrentArgumentProvider]
[def _HigherOrderConcurrentArgumentProvider `HigherOrderConcurrentArgumentProvider`]
[def HigherOrderConcurrentArgumentProvider [link argot.ref.concepts.higher_order_concurrent_argument_provider `HigherOrderConcurrentArgumentProvider`]]

[def concepts_higher_order_expandable `HigherOrderExpandable`]
[def _HigherOrderExpandable_ HigherOrderExpandable]
[def _HigherOrderExpandable `HigherOrderExpandable`]
[def HigherOrderExpandable [link argot.ref.concepts.higher_order_expandable `HigherOrderExpandable`]]

[def concepts_higher_order_future `HigherOrderFuture`]
[def _HigherOrderFuture_ HigherOrderFuture]
[def _HigherOrderFuture `HigherOrderFuture`]
[def HigherOrderFuture [link argot.ref.concepts.higher_order_future `HigherOrderFuture`]]

[def concepts_higher_order_persistent_argument_provider `HigherOrderPersistentArgumentProvider`]
[def _HigherOrderPersistentArgumentProvider_ HigherOrderPersistentArgumentProvider]
[def _HigherOrderPersistentArgumentProvider `HigherOrderPersistentArgumentProvider`]
[def HigherOrderPersistentArgumentProvider [link argot.ref.concepts.higher_order_persistent_argument_provider `HigherOrderPersistentArgumentProvider`]]

[def concepts_homogeneous_return_value_reducer `HomogeneousReturnValueReducer`]
[def _HomogeneousReturnValueReducer_ HomogeneousReturnValueReducer]
[def _HomogeneousReturnValueReducer `HomogeneousReturnValueReducer`]
[def HomogeneousReturnValueReducer [link argot.ref.concepts.homogeneous_return_value_reducer `HomogeneousReturnValueReducer`]]

[def concepts_immediate_executor `ImmediateExecutor`]
[def _ImmediateExecutor_ ImmediateExecutor]
[def _ImmediateExecutor `ImmediateExecutor`]
[def ImmediateExecutor [link argot.ref.concepts.immediate_executor `ImmediateExecutor`]]

[def concepts_inequality_comparable `InequalityComparable`]
[def _InequalityComparable_ InequalityComparable]
[def _InequalityComparable `InequalityComparable`]
[def InequalityComparable [link argot.ref.concepts.inequality_comparable `InequalityComparable`]]

[def concepts_instantiation_of `InstantiationOf`]
[def _InstantiationOf_ InstantiationOf]
[def _InstantiationOf `InstantiationOf`]
[def InstantiationOf [link argot.ref.concepts.instantiation_of `InstantiationOf`]]

[def concepts_intrinsic_persistent_thenable `IntrinsicPersistentThenable`]
[def _IntrinsicPersistentThenable_ IntrinsicPersistentThenable]
[def _IntrinsicPersistentThenable `IntrinsicPersistentThenable`]
[def IntrinsicPersistentThenable [link argot.ref.concepts.intrinsic_persistent_thenable `IntrinsicPersistentThenable`]]

[def concepts_intrinsic_thenable `IntrinsicThenable`]
[def _IntrinsicThenable_ IntrinsicThenable]
[def _IntrinsicThenable `IntrinsicThenable`]
[def IntrinsicThenable [link argot.ref.concepts.intrinsic_thenable `IntrinsicThenable`]]

[def concepts_invocable_from_provision_without_reduction `InvocableFromProvisionWithoutReduction`]
[def _InvocableFromProvisionWithoutReduction_ InvocableFromProvisionWithoutReduction]
[def _InvocableFromProvisionWithoutReduction `InvocableFromProvisionWithoutReduction`]
[def InvocableFromProvisionWithoutReduction [link argot.ref.concepts.invocable_from_provision_without_reduction `InvocableFromProvisionWithoutReduction`]]

[def concepts_invocable_object_with `InvocableObjectWith`]
[def _InvocableObjectWith_ InvocableObjectWith]
[def _InvocableObjectWith `InvocableObjectWith`]
[def InvocableObjectWith [link argot.ref.concepts.invocable_object_with `InvocableObjectWith`]]

[def concepts_invocable_object_with_each `InvocableObjectWithEach`]
[def _InvocableObjectWithEach_ InvocableObjectWithEach]
[def _InvocableObjectWithEach `InvocableObjectWithEach`]
[def InvocableObjectWithEach [link argot.ref.concepts.invocable_object_with_each `InvocableObjectWithEach`]]

[def concepts_invocable_object_with_kinds `InvocableObjectWithKinds`]
[def _InvocableObjectWithKinds_ InvocableObjectWithKinds]
[def _InvocableObjectWithKinds `InvocableObjectWithKinds`]
[def InvocableObjectWithKinds [link argot.ref.concepts.invocable_object_with_kinds `InvocableObjectWithKinds`]]

[def concepts_invocable_object_with_provision `InvocableObjectWithProvision`]
[def _InvocableObjectWithProvision_ InvocableObjectWithProvision]
[def _InvocableObjectWithProvision `InvocableObjectWithProvision`]
[def InvocableObjectWithProvision [link argot.ref.concepts.invocable_object_with_provision `InvocableObjectWithProvision`]]

[def concepts_invocable_with `InvocableWith`]
[def _InvocableWith_ InvocableWith]
[def _InvocableWith `InvocableWith`]
[def InvocableWith [link argot.ref.concepts.invocable_with `InvocableWith`]]

[def concepts_invocable_with_each `InvocableWithEach`]
[def _InvocableWithEach_ InvocableWithEach]
[def _InvocableWithEach `InvocableWithEach`]
[def InvocableWithEach [link argot.ref.concepts.invocable_with_each `InvocableWithEach`]]

[def concepts_invocable_with_kinds `InvocableWithKinds`]
[def _InvocableWithKinds_ InvocableWithKinds]
[def _InvocableWithKinds `InvocableWithKinds`]
[def InvocableWithKinds [link argot.ref.concepts.invocable_with_kinds `InvocableWithKinds`]]

[def concepts_less `Less`]
[def _Less_ Less]
[def _Less `Less`]
[def Less [link argot.ref.concepts.less `Less`]]

[def concepts_less_equal `LessEqual`]
[def _LessEqual_ LessEqual]
[def _LessEqual `LessEqual`]
[def LessEqual [link argot.ref.concepts.less_equal `LessEqual`]]

[def concepts_less_equal_comparable `LessEqualComparable`]
[def _LessEqualComparable_ LessEqualComparable]
[def _LessEqualComparable `LessEqualComparable`]
[def LessEqualComparable [link argot.ref.concepts.less_equal_comparable `LessEqualComparable`]]

[def concepts_less_than_comparable `LessThanComparable`]
[def _LessThanComparable_ LessThanComparable]
[def _LessThanComparable `LessThanComparable`]
[def LessThanComparable [link argot.ref.concepts.less_than_comparable `LessThanComparable`]]

[def concepts_lvalue_reference `LvalueReference`]
[def _LvalueReference_ LvalueReference]
[def _LvalueReference `LvalueReference`]
[def LvalueReference [link argot.ref.concepts.lvalue_reference `LvalueReference`]]

[def concepts_move_assignable `MoveAssignable`]
[def _MoveAssignable_ MoveAssignable]
[def _MoveAssignable `MoveAssignable`]
[def MoveAssignable [link argot.ref.concepts.move_assignable `MoveAssignable`]]

[def concepts_move_constructible `MoveConstructible`]
[def _MoveConstructible_ MoveConstructible]
[def _MoveConstructible `MoveConstructible`]
[def MoveConstructible [link argot.ref.concepts.move_constructible `MoveConstructible`]]

[def concepts_net_executor `NetExecutor`]
[def _NetExecutor_ NetExecutor]
[def _NetExecutor `NetExecutor`]
[def NetExecutor [link argot.ref.concepts.net_executor `NetExecutor`]]

[def concepts_nothrow_assignable `NothrowAssignable`]
[def _NothrowAssignable_ NothrowAssignable]
[def _NothrowAssignable `NothrowAssignable`]
[def NothrowAssignable [link argot.ref.concepts.nothrow_assignable `NothrowAssignable`]]

[def concepts_nothrow_assignable_when_contained `NothrowAssignableWhenContained`]
[def _NothrowAssignableWhenContained_ NothrowAssignableWhenContained]
[def _NothrowAssignableWhenContained `NothrowAssignableWhenContained`]
[def NothrowAssignableWhenContained [link argot.ref.concepts.nothrow_assignable_when_contained `NothrowAssignableWhenContained`]]

[def concepts_nothrow_constructible `NothrowConstructible`]
[def _NothrowConstructible_ NothrowConstructible]
[def _NothrowConstructible `NothrowConstructible`]
[def NothrowConstructible [link argot.ref.concepts.nothrow_constructible `NothrowConstructible`]]

[def concepts_nothrow_convertible `NothrowConvertible`]
[def _NothrowConvertible_ NothrowConvertible]
[def _NothrowConvertible `NothrowConvertible`]
[def NothrowConvertible [link argot.ref.concepts.nothrow_convertible `NothrowConvertible`]]

[def concepts_nothrow_copy_assignable `NothrowCopyAssignable`]
[def _NothrowCopyAssignable_ NothrowCopyAssignable]
[def _NothrowCopyAssignable `NothrowCopyAssignable`]
[def NothrowCopyAssignable [link argot.ref.concepts.nothrow_copy_assignable `NothrowCopyAssignable`]]

[def concepts_nothrow_copy_constructible `NothrowCopyConstructible`]
[def _NothrowCopyConstructible_ NothrowCopyConstructible]
[def _NothrowCopyConstructible `NothrowCopyConstructible`]
[def NothrowCopyConstructible [link argot.ref.concepts.nothrow_copy_constructible `NothrowCopyConstructible`]]

[def concepts_nothrow_default_constructible `NothrowDefaultConstructible`]
[def _NothrowDefaultConstructible_ NothrowDefaultConstructible]
[def _NothrowDefaultConstructible `NothrowDefaultConstructible`]
[def NothrowDefaultConstructible [link argot.ref.concepts.nothrow_default_constructible `NothrowDefaultConstructible`]]

[def concepts_nothrow_destructible `NothrowDestructible`]
[def _NothrowDestructible_ NothrowDestructible]
[def _NothrowDestructible `NothrowDestructible`]
[def NothrowDestructible [link argot.ref.concepts.nothrow_destructible `NothrowDestructible`]]

[def concepts_nothrow_emplaceable_when_contained `NothrowEmplaceableWhenContained`]
[def _NothrowEmplaceableWhenContained_ NothrowEmplaceableWhenContained]
[def _NothrowEmplaceableWhenContained `NothrowEmplaceableWhenContained`]
[def NothrowEmplaceableWhenContained [link argot.ref.concepts.nothrow_emplaceable_when_contained `NothrowEmplaceableWhenContained`]]

[def concepts_nothrow_emplaceable_with_result_when_contained `NothrowEmplaceableWithResultWhenContained`]
[def _NothrowEmplaceableWithResultWhenContained_ NothrowEmplaceableWithResultWhenContained]
[def _NothrowEmplaceableWithResultWhenContained `NothrowEmplaceableWithResultWhenContained`]
[def NothrowEmplaceableWithResultWhenContained [link argot.ref.concepts.nothrow_emplaceable_with_result_when_contained `NothrowEmplaceableWithResultWhenContained`]]

[def concepts_nothrow_equality_comparable `NothrowEqualityComparable`]
[def _NothrowEqualityComparable_ NothrowEqualityComparable]
[def _NothrowEqualityComparable `NothrowEqualityComparable`]
[def NothrowEqualityComparable [link argot.ref.concepts.nothrow_equality_comparable `NothrowEqualityComparable`]]

[def concepts_nothrow_explicitly_convertible `NothrowExplicitlyConvertible`]
[def _NothrowExplicitlyConvertible_ NothrowExplicitlyConvertible]
[def _NothrowExplicitlyConvertible `NothrowExplicitlyConvertible`]
[def NothrowExplicitlyConvertible [link argot.ref.concepts.nothrow_explicitly_convertible `NothrowExplicitlyConvertible`]]

[def concepts_nothrow_greater_equal_comparable `NothrowGreaterEqualComparable`]
[def _NothrowGreaterEqualComparable_ NothrowGreaterEqualComparable]
[def _NothrowGreaterEqualComparable `NothrowGreaterEqualComparable`]
[def NothrowGreaterEqualComparable [link argot.ref.concepts.nothrow_greater_equal_comparable `NothrowGreaterEqualComparable`]]

[def concepts_nothrow_greater_than_comparable `NothrowGreaterThanComparable`]
[def _NothrowGreaterThanComparable_ NothrowGreaterThanComparable]
[def _NothrowGreaterThanComparable `NothrowGreaterThanComparable`]
[def NothrowGreaterThanComparable [link argot.ref.concepts.nothrow_greater_than_comparable `NothrowGreaterThanComparable`]]

[def concepts_nothrow_hashable `NothrowHashable`]
[def _NothrowHashable_ NothrowHashable]
[def _NothrowHashable `NothrowHashable`]
[def NothrowHashable [link argot.ref.concepts.nothrow_hashable `NothrowHashable`]]

[def concepts_nothrow_inequality_comparable `NothrowInequalityComparable`]
[def _NothrowInequalityComparable_ NothrowInequalityComparable]
[def _NothrowInequalityComparable `NothrowInequalityComparable`]
[def NothrowInequalityComparable [link argot.ref.concepts.nothrow_inequality_comparable `NothrowInequalityComparable`]]

[def concepts_nothrow_less_equal_comparable `NothrowLessEqualComparable`]
[def _NothrowLessEqualComparable_ NothrowLessEqualComparable]
[def _NothrowLessEqualComparable `NothrowLessEqualComparable`]
[def NothrowLessEqualComparable [link argot.ref.concepts.nothrow_less_equal_comparable `NothrowLessEqualComparable`]]

[def concepts_nothrow_less_than_comparable `NothrowLessThanComparable`]
[def _NothrowLessThanComparable_ NothrowLessThanComparable]
[def _NothrowLessThanComparable `NothrowLessThanComparable`]
[def NothrowLessThanComparable [link argot.ref.concepts.nothrow_less_than_comparable `NothrowLessThanComparable`]]

[def concepts_nothrow_move_assignable `NothrowMoveAssignable`]
[def _NothrowMoveAssignable_ NothrowMoveAssignable]
[def _NothrowMoveAssignable `NothrowMoveAssignable`]
[def NothrowMoveAssignable [link argot.ref.concepts.nothrow_move_assignable `NothrowMoveAssignable`]]

[def concepts_nothrow_move_constructible `NothrowMoveConstructible`]
[def _NothrowMoveConstructible_ NothrowMoveConstructible]
[def _NothrowMoveConstructible `NothrowMoveConstructible`]
[def NothrowMoveConstructible [link argot.ref.concepts.nothrow_move_constructible `NothrowMoveConstructible`]]

[def concepts_nothrow_sinkable `NothrowSinkable`]
[def _NothrowSinkable_ NothrowSinkable]
[def _NothrowSinkable `NothrowSinkable`]
[def NothrowSinkable [link argot.ref.concepts.nothrow_sinkable `NothrowSinkable`]]

[def concepts_nothrow_swappable `NothrowSwappable`]
[def _NothrowSwappable_ NothrowSwappable]
[def _NothrowSwappable `NothrowSwappable`]
[def NothrowSwappable [link argot.ref.concepts.nothrow_swappable `NothrowSwappable`]]

[def concepts_object `Object`]
[def _Object_ Object]
[def _Object `Object`]
[def Object [link argot.ref.concepts.object `Object`]]

[def concepts_optional_like `OptionalLike`]
[def _OptionalLike_ OptionalLike]
[def _OptionalLike `OptionalLike`]
[def OptionalLike [link argot.ref.concepts.optional_like `OptionalLike`]]

[def concepts_parameter_type `ParameterType`]
[def _ParameterType_ ParameterType]
[def _ParameterType `ParameterType`]
[def ParameterType [link argot.ref.concepts.parameter_type `ParameterType`]]

[def concepts_persistent_argument_provider `PersistentArgumentProvider`]
[def _PersistentArgumentProvider_ PersistentArgumentProvider]
[def _PersistentArgumentProvider `PersistentArgumentProvider`]
[def PersistentArgumentProvider [link argot.ref.concepts.persistent_argument_provider `PersistentArgumentProvider`]]

[def concepts_persistent_argument_provider_generator_with `PersistentArgumentProviderGeneratorWith`]
[def _PersistentArgumentProviderGeneratorWith_ PersistentArgumentProviderGeneratorWith]
[def _PersistentArgumentProviderGeneratorWith `PersistentArgumentProviderGeneratorWith`]
[def PersistentArgumentProviderGeneratorWith [link argot.ref.concepts.persistent_argument_provider_generator_with `PersistentArgumentProviderGeneratorWith`]]

[def concepts_persistent_argument_provider_generator_with_each `PersistentArgumentProviderGeneratorWithEach`]
[def _PersistentArgumentProviderGeneratorWithEach_ PersistentArgumentProviderGeneratorWithEach]
[def _PersistentArgumentProviderGeneratorWithEach `PersistentArgumentProviderGeneratorWithEach`]
[def PersistentArgumentProviderGeneratorWithEach [link argot.ref.concepts.persistent_argument_provider_generator_with_each `PersistentArgumentProviderGeneratorWithEach`]]

[def concepts_persistent_argument_provider_generator_with_kinds `PersistentArgumentProviderGeneratorWithKinds`]
[def _PersistentArgumentProviderGeneratorWithKinds_ PersistentArgumentProviderGeneratorWithKinds]
[def _PersistentArgumentProviderGeneratorWithKinds `PersistentArgumentProviderGeneratorWithKinds`]
[def PersistentArgumentProviderGeneratorWithKinds [link argot.ref.concepts.persistent_argument_provider_generator_with_kinds `PersistentArgumentProviderGeneratorWithKinds`]]

[def concepts_persistent_argument_provider_to `PersistentArgumentProviderTo`]
[def _PersistentArgumentProviderTo_ PersistentArgumentProviderTo]
[def _PersistentArgumentProviderTo `PersistentArgumentProviderTo`]
[def PersistentArgumentProviderTo [link argot.ref.concepts.persistent_argument_provider_to `PersistentArgumentProviderTo`]]

[def concepts_persistent_composable `PersistentComposable`]
[def _PersistentComposable_ PersistentComposable]
[def _PersistentComposable `PersistentComposable`]
[def PersistentComposable [link argot.ref.concepts.persistent_composable `PersistentComposable`]]

[def concepts_persistent_composable_with_persistent_provision `PersistentComposableWithPersistentProvision`]
[def _PersistentComposableWithPersistentProvision_ PersistentComposableWithPersistentProvision]
[def _PersistentComposableWithPersistentProvision `PersistentComposableWithPersistentProvision`]
[def PersistentComposableWithPersistentProvision [link argot.ref.concepts.persistent_composable_with_persistent_provision `PersistentComposableWithPersistentProvision`]]

[def concepts_persistent_concurrent_argument_provider `PersistentConcurrentArgumentProvider`]
[def _PersistentConcurrentArgumentProvider_ PersistentConcurrentArgumentProvider]
[def _PersistentConcurrentArgumentProvider `PersistentConcurrentArgumentProvider`]
[def PersistentConcurrentArgumentProvider [link argot.ref.concepts.persistent_concurrent_argument_provider `PersistentConcurrentArgumentProvider`]]

[def concepts_persistent_concurrent_argument_provider_to `PersistentConcurrentArgumentProviderTo`]
[def _PersistentConcurrentArgumentProviderTo_ PersistentConcurrentArgumentProviderTo]
[def _PersistentConcurrentArgumentProviderTo `PersistentConcurrentArgumentProviderTo`]
[def PersistentConcurrentArgumentProviderTo [link argot.ref.concepts.persistent_concurrent_argument_provider_to `PersistentConcurrentArgumentProviderTo`]]

[def concepts_persistent_default_for_type `PersistentDefaultForType`]
[def _PersistentDefaultForType_ PersistentDefaultForType]
[def _PersistentDefaultForType `PersistentDefaultForType`]
[def PersistentDefaultForType [link argot.ref.concepts.persistent_default_for_type `PersistentDefaultForType`]]

[def concepts_persistent_exceptional_default `PersistentExceptionalDefault`]
[def _PersistentExceptionalDefault_ PersistentExceptionalDefault]
[def _PersistentExceptionalDefault `PersistentExceptionalDefault`]
[def PersistentExceptionalDefault [link argot.ref.concepts.persistent_exceptional_default `PersistentExceptionalDefault`]]

[def concepts_persistent_expandable_argument_provider `PersistentExpandableArgumentProvider`]
[def _PersistentExpandableArgumentProvider_ PersistentExpandableArgumentProvider]
[def _PersistentExpandableArgumentProvider `PersistentExpandableArgumentProvider`]
[def PersistentExpandableArgumentProvider [link argot.ref.concepts.persistent_expandable_argument_provider `PersistentExpandableArgumentProvider`]]

[def concepts_persistent_forgetful_then_providable `PersistentForgetfulThenProvidable`]
[def _PersistentForgetfulThenProvidable_ PersistentForgetfulThenProvidable]
[def _PersistentForgetfulThenProvidable `PersistentForgetfulThenProvidable`]
[def PersistentForgetfulThenProvidable [link argot.ref.concepts.persistent_forgetful_then_providable `PersistentForgetfulThenProvidable`]]

[def concepts_persistent_forgetful_thenable `PersistentForgetfulThenable`]
[def _PersistentForgetfulThenable_ PersistentForgetfulThenable]
[def _PersistentForgetfulThenable `PersistentForgetfulThenable`]
[def PersistentForgetfulThenable [link argot.ref.concepts.persistent_forgetful_thenable `PersistentForgetfulThenable`]]

[def concepts_persistent_future `PersistentFuture`]
[def _PersistentFuture_ PersistentFuture]
[def _PersistentFuture `PersistentFuture`]
[def PersistentFuture [link argot.ref.concepts.persistent_future `PersistentFuture`]]

[def concepts_persistent_invocable_object_with `PersistentInvocableObjectWith`]
[def _PersistentInvocableObjectWith_ PersistentInvocableObjectWith]
[def _PersistentInvocableObjectWith `PersistentInvocableObjectWith`]
[def PersistentInvocableObjectWith [link argot.ref.concepts.persistent_invocable_object_with `PersistentInvocableObjectWith`]]

[def concepts_persistent_invocable_object_with_each `PersistentInvocableObjectWithEach`]
[def _PersistentInvocableObjectWithEach_ PersistentInvocableObjectWithEach]
[def _PersistentInvocableObjectWithEach `PersistentInvocableObjectWithEach`]
[def PersistentInvocableObjectWithEach [link argot.ref.concepts.persistent_invocable_object_with_each `PersistentInvocableObjectWithEach`]]

[def concepts_persistent_invocable_object_with_kinds `PersistentInvocableObjectWithKinds`]
[def _PersistentInvocableObjectWithKinds_ PersistentInvocableObjectWithKinds]
[def _PersistentInvocableObjectWithKinds `PersistentInvocableObjectWithKinds`]
[def PersistentInvocableObjectWithKinds [link argot.ref.concepts.persistent_invocable_object_with_kinds `PersistentInvocableObjectWithKinds`]]

[def concepts_persistent_invocable_object_with_persistent_provision `PersistentInvocableObjectWithPersistentProvision`]
[def _PersistentInvocableObjectWithPersistentProvision_ PersistentInvocableObjectWithPersistentProvision]
[def _PersistentInvocableObjectWithPersistentProvision `PersistentInvocableObjectWithPersistentProvision`]
[def PersistentInvocableObjectWithPersistentProvision [link argot.ref.concepts.persistent_invocable_object_with_persistent_provision `PersistentInvocableObjectWithPersistentProvision`]]

[def concepts_persistent_return_value_reducer `PersistentReturnValueReducer`]
[def _PersistentReturnValueReducer_ PersistentReturnValueReducer]
[def _PersistentReturnValueReducer `PersistentReturnValueReducer`]
[def PersistentReturnValueReducer [link argot.ref.concepts.persistent_return_value_reducer `PersistentReturnValueReducer`]]

[def concepts_persistent_return_value_reducer_of `PersistentReturnValueReducerOf`]
[def _PersistentReturnValueReducerOf_ PersistentReturnValueReducerOf]
[def _PersistentReturnValueReducerOf `PersistentReturnValueReducerOf`]
[def PersistentReturnValueReducerOf [link argot.ref.concepts.persistent_return_value_reducer_of `PersistentReturnValueReducerOf`]]

[def concepts_persistent_switch_body_case `PersistentSwitchBodyCase`]
[def _PersistentSwitchBodyCase_ PersistentSwitchBodyCase]
[def _PersistentSwitchBodyCase `PersistentSwitchBodyCase`]
[def PersistentSwitchBodyCase [link argot.ref.concepts.persistent_switch_body_case `PersistentSwitchBodyCase`]]

[def concepts_persistent_switch_body_default_for_type `PersistentSwitchBodyDefaultForType`]
[def _PersistentSwitchBodyDefaultForType_ PersistentSwitchBodyDefaultForType]
[def _PersistentSwitchBodyDefaultForType `PersistentSwitchBodyDefaultForType`]
[def PersistentSwitchBodyDefaultForType [link argot.ref.concepts.persistent_switch_body_default_for_type `PersistentSwitchBodyDefaultForType`]]

[def concepts_persistent_switch_body_for_type `PersistentSwitchBodyForType`]
[def _PersistentSwitchBodyForType_ PersistentSwitchBodyForType]
[def _PersistentSwitchBodyForType `PersistentSwitchBodyForType`]
[def PersistentSwitchBodyForType [link argot.ref.concepts.persistent_switch_body_for_type `PersistentSwitchBodyForType`]]

[def concepts_persistent_then_providable `PersistentThenProvidable`]
[def _PersistentThenProvidable_ PersistentThenProvidable]
[def _PersistentThenProvidable `PersistentThenProvidable`]
[def PersistentThenProvidable [link argot.ref.concepts.persistent_then_providable `PersistentThenProvidable`]]

[def concepts_persistent_thenable `PersistentThenable`]
[def _PersistentThenable_ PersistentThenable]
[def _PersistentThenable `PersistentThenable`]
[def PersistentThenable [link argot.ref.concepts.persistent_thenable `PersistentThenable`]]

[def concepts_potentially_invocable `PotentiallyInvocable`]
[def _PotentiallyInvocable_ PotentiallyInvocable]
[def _PotentiallyInvocable `PotentiallyInvocable`]
[def PotentiallyInvocable [link argot.ref.concepts.potentially_invocable `PotentiallyInvocable`]]

[def concepts_potentially_invocable_object `PotentiallyInvocableObject`]
[def _PotentiallyInvocableObject_ PotentiallyInvocableObject]
[def _PotentiallyInvocableObject `PotentiallyInvocableObject`]
[def PotentiallyInvocableObject [link argot.ref.concepts.potentially_invocable_object `PotentiallyInvocableObject`]]

[def concepts_reference `Reference`]
[def _Reference_ Reference]
[def _Reference `Reference`]
[def Reference [link argot.ref.concepts.reference `Reference`]]

[def concepts_return_type `ReturnType`]
[def _ReturnType_ ReturnType]
[def _ReturnType `ReturnType`]
[def ReturnType [link argot.ref.concepts.return_type `ReturnType`]]

[def concepts_return_value_reducer `ReturnValueReducer`]
[def _ReturnValueReducer_ ReturnValueReducer]
[def _ReturnValueReducer `ReturnValueReducer`]
[def ReturnValueReducer [link argot.ref.concepts.return_value_reducer `ReturnValueReducer`]]

[def concepts_return_value_reducer_of `ReturnValueReducerOf`]
[def _ReturnValueReducerOf_ ReturnValueReducerOf]
[def _ReturnValueReducerOf `ReturnValueReducerOf`]
[def ReturnValueReducerOf [link argot.ref.concepts.return_value_reducer_of `ReturnValueReducerOf`]]

[def concepts_rvalue `Rvalue`]
[def _Rvalue_ Rvalue]
[def _Rvalue `Rvalue`]
[def Rvalue [link argot.ref.concepts.rvalue `Rvalue`]]

[def concepts_rvalue_reference `RvalueReference`]
[def _RvalueReference_ RvalueReference]
[def _RvalueReference `RvalueReference`]
[def RvalueReference [link argot.ref.concepts.rvalue_reference `RvalueReference`]]

[def concepts_same_type `SameType`]
[def _SameType_ SameType]
[def _SameType `SameType`]
[def SameType [link argot.ref.concepts.same_type `SameType`]]

[def concepts_same_value `SameValue`]
[def _SameValue_ SameValue]
[def _SameValue `SameValue`]
[def SameValue [link argot.ref.concepts.same_value `SameValue`]]

[def concepts_sinkable `Sinkable`]
[def _Sinkable_ Sinkable]
[def _Sinkable `Sinkable`]
[def Sinkable [link argot.ref.concepts.sinkable `Sinkable`]]

[def concepts_std_integral_constant `StdIntegralConstant`]
[def _StdIntegralConstant_ StdIntegralConstant]
[def _StdIntegralConstant `StdIntegralConstant`]
[def StdIntegralConstant [link argot.ref.concepts.std_integral_constant `StdIntegralConstant`]]

[def concepts_stlab_executor `StlabExecutor`]
[def _StlabExecutor_ StlabExecutor]
[def _StlabExecutor `StlabExecutor`]
[def StlabExecutor [link argot.ref.concepts.stlab_executor `StlabExecutor`]]

[def concepts_stream_insertable `StreamInsertable`]
[def _StreamInsertable_ StreamInsertable]
[def _StreamInsertable `StreamInsertable`]
[def StreamInsertable [link argot.ref.concepts.stream_insertable `StreamInsertable`]]

[def concepts_stream_insertable_with_each `StreamInsertableWithEach`]
[def _StreamInsertableWithEach_ StreamInsertableWithEach]
[def _StreamInsertableWithEach `StreamInsertableWithEach`]
[def StreamInsertableWithEach [link argot.ref.concepts.stream_insertable_with_each `StreamInsertableWithEach`]]

[def concepts_stream_insertable_with_kinds `StreamInsertableWithKinds`]
[def _StreamInsertableWithKinds_ StreamInsertableWithKinds]
[def _StreamInsertableWithKinds `StreamInsertableWithKinds`]
[def StreamInsertableWithKinds [link argot.ref.concepts.stream_insertable_with_kinds `StreamInsertableWithKinds`]]

[def concepts_stream_insertable_with_provision `StreamInsertableWithProvision`]
[def _StreamInsertableWithProvision_ StreamInsertableWithProvision]
[def _StreamInsertableWithProvision `StreamInsertableWithProvision`]
[def StreamInsertableWithProvision [link argot.ref.concepts.stream_insertable_with_provision `StreamInsertableWithProvision`]]

[def concepts_swappable `Swappable`]
[def _Swappable_ Swappable]
[def _Swappable `Swappable`]
[def Swappable [link argot.ref.concepts.swappable `Swappable`]]

[def concepts_switch_body `SwitchBody`]
[def _SwitchBody_ SwitchBody]
[def _SwitchBody `SwitchBody`]
[def SwitchBody [link argot.ref.concepts.switch_body `SwitchBody`]]

[def concepts_switch_body_case `SwitchBodyCase`]
[def _SwitchBodyCase_ SwitchBodyCase]
[def _SwitchBodyCase `SwitchBodyCase`]
[def SwitchBodyCase [link argot.ref.concepts.switch_body_case `SwitchBodyCase`]]

[def concepts_switch_body_default `SwitchBodyDefault`]
[def _SwitchBodyDefault_ SwitchBodyDefault]
[def _SwitchBodyDefault `SwitchBodyDefault`]
[def SwitchBodyDefault [link argot.ref.concepts.switch_body_default `SwitchBodyDefault`]]

[def concepts_switch_body_default_for_type `SwitchBodyDefaultForType`]
[def _SwitchBodyDefaultForType_ SwitchBodyDefaultForType]
[def _SwitchBodyDefaultForType `SwitchBodyDefaultForType`]
[def SwitchBodyDefaultForType [link argot.ref.concepts.switch_body_default_for_type `SwitchBodyDefaultForType`]]

[def concepts_switch_body_for_type `SwitchBodyForType`]
[def _SwitchBodyForType_ SwitchBodyForType]
[def _SwitchBodyForType `SwitchBodyForType`]
[def SwitchBodyForType [link argot.ref.concepts.switch_body_for_type `SwitchBodyForType`]]

[def concepts_switch_condition `SwitchCondition`]
[def _SwitchCondition_ SwitchCondition]
[def _SwitchCondition `SwitchCondition`]
[def SwitchCondition [link argot.ref.concepts.switch_condition `SwitchCondition`]]

[def concepts_switch_condition_or_constant `SwitchConditionOrConstant`]
[def _SwitchConditionOrConstant_ SwitchConditionOrConstant]
[def _SwitchConditionOrConstant `SwitchConditionOrConstant`]
[def SwitchConditionOrConstant [link argot.ref.concepts.switch_condition_or_constant `SwitchConditionOrConstant`]]

[def concepts_switchable `Switchable`]
[def _Switchable_ Switchable]
[def _Switchable `Switchable`]
[def Switchable [link argot.ref.concepts.switchable `Switchable`]]

[def concepts_then_providable `ThenProvidable`]
[def _ThenProvidable_ ThenProvidable]
[def _ThenProvidable `ThenProvidable`]
[def ThenProvidable [link argot.ref.concepts.then_providable `ThenProvidable`]]

[def concepts_thenable `Thenable`]
[def _Thenable_ Thenable]
[def _Thenable `Thenable`]
[def Thenable [link argot.ref.concepts.thenable `Thenable`]]

[def concepts_transformation_with `TransformationWith`]
[def _TransformationWith_ TransformationWith]
[def _TransformationWith `TransformationWith`]
[def TransformationWith [link argot.ref.concepts.transformation_with `TransformationWith`]]

[def concepts_trivially_constructible `TriviallyConstructible`]
[def _TriviallyConstructible_ TriviallyConstructible]
[def _TriviallyConstructible `TriviallyConstructible`]
[def TriviallyConstructible [link argot.ref.concepts.trivially_constructible `TriviallyConstructible`]]

[def concepts_trivially_copy_assignable `TriviallyCopyAssignable`]
[def _TriviallyCopyAssignable_ TriviallyCopyAssignable]
[def _TriviallyCopyAssignable `TriviallyCopyAssignable`]
[def TriviallyCopyAssignable [link argot.ref.concepts.trivially_copy_assignable `TriviallyCopyAssignable`]]

[def concepts_trivially_copy_constructible `TriviallyCopyConstructible`]
[def _TriviallyCopyConstructible_ TriviallyCopyConstructible]
[def _TriviallyCopyConstructible `TriviallyCopyConstructible`]
[def TriviallyCopyConstructible [link argot.ref.concepts.trivially_copy_constructible `TriviallyCopyConstructible`]]

[def concepts_trivially_default_constructible `TriviallyDefaultConstructible`]
[def _TriviallyDefaultConstructible_ TriviallyDefaultConstructible]
[def _TriviallyDefaultConstructible `TriviallyDefaultConstructible`]
[def TriviallyDefaultConstructible [link argot.ref.concepts.trivially_default_constructible `TriviallyDefaultConstructible`]]

[def concepts_trivially_destructible `TriviallyDestructible`]
[def _TriviallyDestructible_ TriviallyDestructible]
[def _TriviallyDestructible `TriviallyDestructible`]
[def TriviallyDestructible [link argot.ref.concepts.trivially_destructible `TriviallyDestructible`]]

[def concepts_trivially_move_assignable `TriviallyMoveAssignable`]
[def _TriviallyMoveAssignable_ TriviallyMoveAssignable]
[def _TriviallyMoveAssignable `TriviallyMoveAssignable`]
[def TriviallyMoveAssignable [link argot.ref.concepts.trivially_move_assignable `TriviallyMoveAssignable`]]

[def concepts_trivially_move_constructible `TriviallyMoveConstructible`]
[def _TriviallyMoveConstructible_ TriviallyMoveConstructible]
[def _TriviallyMoveConstructible `TriviallyMoveConstructible`]
[def TriviallyMoveConstructible [link argot.ref.concepts.trivially_move_constructible `TriviallyMoveConstructible`]]

[def concepts_true `True`]
[def _True_ True]
[def _True `True`]
[def True [link argot.ref.concepts.true `True`]]

[def concepts_tuple_index `TupleIndex`]
[def _TupleIndex_ TupleIndex]
[def _TupleIndex `TupleIndex`]
[def TupleIndex [link argot.ref.concepts.tuple_index `TupleIndex`]]

[def concepts_tuple_like `TupleLike`]
[def _TupleLike_ TupleLike]
[def _TupleLike `TupleLike`]
[def TupleLike [link argot.ref.concepts.tuple_like `TupleLike`]]

[def concepts_type_or_constant `TypeOrConstant`]
[def _TypeOrConstant_ TypeOrConstant]
[def _TypeOrConstant `TypeOrConstant`]
[def TypeOrConstant [link argot.ref.concepts.type_or_constant `TypeOrConstant`]]

[def concepts_unhandled_switchable_value `UnhandledSwitchableValue`]
[def _UnhandledSwitchableValue_ UnhandledSwitchableValue]
[def _UnhandledSwitchableValue `UnhandledSwitchableValue`]
[def UnhandledSwitchableValue [link argot.ref.concepts.unhandled_switchable_value `UnhandledSwitchableValue`]]

[def concepts_union_index `UnionIndex`]
[def _UnionIndex_ UnionIndex]
[def _UnionIndex `UnionIndex`]
[def UnionIndex [link argot.ref.concepts.union_index `UnionIndex`]]

[def concepts_union_like `UnionLike`]
[def _UnionLike_ UnionLike]
[def _UnionLike `UnionLike`]
[def UnionLike [link argot.ref.concepts.union_like `UnionLike`]]

[def concepts_unqualified_object `UnqualifiedObject`]
[def _UnqualifiedObject_ UnqualifiedObject]
[def _UnqualifiedObject `UnqualifiedObject`]
[def UnqualifiedObject [link argot.ref.concepts.unqualified_object `UnqualifiedObject`]]

[def concepts_valid `Valid`]
[def _Valid_ Valid]
[def _Valid `Valid`]
[def Valid [link argot.ref.concepts.valid `Valid`]]

[def concepts_variant_index `VariantIndex`]
[def _VariantIndex_ VariantIndex]
[def _VariantIndex `VariantIndex`]
[def VariantIndex [link argot.ref.concepts.variant_index `VariantIndex`]]

[def concepts_variant_like `VariantLike`]
[def _VariantLike_ VariantLike]
[def _VariantLike `VariantLike`]
[def VariantLike [link argot.ref.concepts.variant_like `VariantLike`]]

[def concepts_volatile_object `VolatileObject`]
[def _VolatileObject_ VolatileObject]
[def _VolatileObject `VolatileObject`]
[def VolatileObject [link argot.ref.concepts.volatile_object `VolatileObject`]]

[def argot/accumulate.hpp [link argot.ref.argot.accumulate `argot/accumulate.hpp`]]

[def argot/as_call_object.hpp [link argot.ref.argot.as_call_object `argot/as_call_object.hpp`]]

[def argot/async_call/async_call.hpp [link argot.ref.async_call.async_call `argot/async_call/async_call.hpp`]]

[def argot/async_call/async_call_.hpp [link argot.ref.async_call.async_call_ `argot/async_call/async_call_.hpp`]]

[def argot/async_call.hpp [link argot.ref.argot.async_call `argot/async_call.hpp`]]

[def argot/basic_result_of.hpp [link argot.ref.argot.basic_result_of `argot/basic_result_of.hpp`]]

[def argot/call/call.hpp [link argot.ref.call.call `argot/call/call.hpp`]]

[def argot/call/call_.hpp [link argot.ref.call.call_ `argot/call/call_.hpp`]]

[def argot/call.hpp [link argot.ref.argot.call `argot/call.hpp`]]

[def argot/call_object_base.hpp [link argot.ref.argot.call_object_base `argot/call_object_base.hpp`]]

[def argot/case/case_.hpp [link argot.ref.case.case_ `argot/case/case_.hpp`]]

[def argot/case/case_range.hpp [link argot.ref.case.case_range `argot/case/case_range.hpp`]]

[def argot/case/case_set.hpp [link argot.ref.case.case_set `argot/case/case_set.hpp`]]

[def argot/case.hpp [link argot.ref.argot.case `argot/case.hpp`]]

[def argot/compose.hpp [link argot.ref.argot.compose `argot/compose.hpp`]]

[def argot/conc/alternative_of_by_value.hpp [link argot.ref.conc.alternative_of_by_value `argot/conc/alternative_of_by_value.hpp`]]

[def argot/conc/bind_call.hpp [link argot.ref.conc.bind_call `argot/conc/bind_call.hpp`]]

[def argot/conc/bless.hpp [link argot.ref.conc.bless `argot/conc/bless.hpp`]]

[def argot/conc/bless_result.hpp [link argot.ref.conc.bless_result `argot/conc/bless_result.hpp`]]

[def argot/conc/conc_generator.hpp [link argot.ref.conc.conc_generator `argot/conc/conc_generator.hpp`]]

[def argot/conc/default_to_value_of.hpp [link argot.ref.conc.default_to_value_of `argot/conc/default_to_value_of.hpp`]]

[def argot/conc/expand/expand.hpp [link argot.ref.expand.expand `argot/conc/expand/expand.hpp`]]

[def argot/conc/expand/expansion_operator.hpp [link argot.ref.expand.expansion_operator `argot/conc/expand/expansion_operator.hpp`]]

[def argot/conc/expand.hpp [link argot.ref.conc.expand `argot/conc/expand.hpp`]]

[def argot/conc/group.hpp [link argot.ref.conc.group `argot/conc/group.hpp`]]

[def argot/conc/lift.hpp [link argot.ref.conc.lift `argot/conc/lift.hpp`]]

[def argot/conc/lift_call.hpp [link argot.ref.conc.lift_call `argot/conc/lift_call.hpp`]]

[def argot/conc/lift_result.hpp [link argot.ref.conc.lift_result `argot/conc/lift_result.hpp`]]

[def argot/conc/nothing.hpp [link argot.ref.conc.nothing `argot/conc/nothing.hpp`]]

[def argot/conc/reference_to.hpp [link argot.ref.conc.reference_to `argot/conc/reference_to.hpp`]]

[def argot/conc/unpack_by_value.hpp [link argot.ref.conc.unpack_by_value `argot/conc/unpack_by_value.hpp`]]

[def argot/conc/value_of.hpp [link argot.ref.conc.value_of `argot/conc/value_of.hpp`]]

[def argot/conc/when_ready.hpp [link argot.ref.conc.when_ready `argot/conc/when_ready.hpp`]]

[def argot/conc.hpp [link argot.ref.argot.conc `argot/conc.hpp`]]

[def argot/conc_traits/argument_list_kinds_of.hpp [link argot.ref.conc_traits.argument_list_kinds_of `argot/conc_traits/argument_list_kinds_of.hpp`]]

[def argot/conc_traits/argument_list_kinds_of_destructive.hpp [link argot.ref.conc_traits.argument_list_kinds_of_destructive `argot/conc_traits/argument_list_kinds_of_destructive.hpp`]]

[def argot/conc_traits/argument_list_kinds_of_persistent.hpp [link argot.ref.conc_traits.argument_list_kinds_of_persistent `argot/conc_traits/argument_list_kinds_of_persistent.hpp`]]

[def argot/conc_traits/as_future.hpp [link argot.ref.conc_traits.as_future `argot/conc_traits/as_future.hpp`]]

[def argot/conc_traits/destructive_forgetful_then_provide.hpp [link argot.ref.conc_traits.destructive_forgetful_then_provide `argot/conc_traits/destructive_forgetful_then_provide.hpp`]]

[def argot/conc_traits/destructive_then_provide.hpp [link argot.ref.conc_traits.destructive_then_provide `argot/conc_traits/destructive_then_provide.hpp`]]

[def argot/conc_traits/persistent_forgetful_then_provide.hpp [link argot.ref.conc_traits.persistent_forgetful_then_provide `argot/conc_traits/persistent_forgetful_then_provide.hpp`]]

[def argot/conc_traits/persistent_then_provide.hpp [link argot.ref.conc_traits.persistent_then_provide `argot/conc_traits/persistent_then_provide.hpp`]]

[def argot/conc_traits/then_provide.hpp [link argot.ref.conc_traits.then_provide `argot/conc_traits/then_provide.hpp`]]

[def argot/conc_traits.hpp [link argot.ref.argot.conc_traits `argot/conc_traits.hpp`]]

[def argot/concepts/allocator.hpp [link argot.ref.concepts.allocator `argot/concepts/allocator.hpp`]]

[def argot/concepts/argot_invocable.hpp [link argot.ref.concepts.argot_invocable `argot/concepts/argot_invocable.hpp`]]

[def argot/concepts/argot_invocable_before_reduction.hpp [link argot.ref.concepts.argot_invocable_before_reduction `argot/concepts/argot_invocable_before_reduction.hpp`]]

[def argot/concepts/argot_invocable_with_persistent_reduction.hpp [link argot.ref.concepts.argot_invocable_with_persistent_reduction `argot/concepts/argot_invocable_with_persistent_reduction.hpp`]]

[def argot/concepts/argot_invocable_with_reduction.hpp [link argot.ref.concepts.argot_invocable_with_reduction `argot/concepts/argot_invocable_with_reduction.hpp`]]

[def argot/concepts/argument_list_kinds.hpp [link argot.ref.concepts.argument_list_kinds `argot/concepts/argument_list_kinds.hpp`]]

[def argot/concepts/argument_provider.hpp [link argot.ref.concepts.argument_provider `argot/concepts/argument_provider.hpp`]]

[def argot/concepts/argument_provider_generator_with.hpp [link argot.ref.concepts.argument_provider_generator_with `argot/concepts/argument_provider_generator_with.hpp`]]

[def argot/concepts/argument_provider_generator_with_each.hpp [link argot.ref.concepts.argument_provider_generator_with_each `argot/concepts/argument_provider_generator_with_each.hpp`]]

[def argot/concepts/argument_provider_generator_with_kinds.hpp [link argot.ref.concepts.argument_provider_generator_with_kinds `argot/concepts/argument_provider_generator_with_kinds.hpp`]]

[def argot/concepts/argument_provider_generator_with_provision.hpp [link argot.ref.concepts.argument_provider_generator_with_provision `argot/concepts/argument_provider_generator_with_provision.hpp`]]

[def argot/concepts/argument_provider_to.hpp [link argot.ref.concepts.argument_provider_to `argot/concepts/argument_provider_to.hpp`]]

[def argot/concepts/argument_receiver.hpp [link argot.ref.concepts.argument_receiver `argot/concepts/argument_receiver.hpp`]]

[def argot/concepts/argument_receiver_of.hpp [link argot.ref.concepts.argument_receiver_of `argot/concepts/argument_receiver_of.hpp`]]

[def argot/concepts/argument_receiver_of_kinds.hpp [link argot.ref.concepts.argument_receiver_of_kinds `argot/concepts/argument_receiver_of_kinds.hpp`]]

[def argot/concepts/argument_receiver_of_lifted_call.hpp [link argot.ref.concepts.argument_receiver_of_lifted_call `argot/concepts/argument_receiver_of_lifted_call.hpp`]]

[def argot/concepts/argument_receiver_of_lifted_persistent_call.hpp [link argot.ref.concepts.argument_receiver_of_lifted_persistent_call `argot/concepts/argument_receiver_of_lifted_persistent_call.hpp`]]

[def argot/concepts/argument_type.hpp [link argot.ref.concepts.argument_type `argot/concepts/argument_type.hpp`]]

[def argot/concepts/argument_types.hpp [link argot.ref.concepts.argument_types `argot/concepts/argument_types.hpp`]]

[def argot/concepts/array.hpp [link argot.ref.concepts.array `argot/concepts/array.hpp`]]

[def argot/concepts/assignable.hpp [link argot.ref.concepts.assignable `argot/concepts/assignable.hpp`]]

[def argot/concepts/assignable_when_contained.hpp [link argot.ref.concepts.assignable_when_contained `argot/concepts/assignable_when_contained.hpp`]]

[def argot/concepts/basic_callable_with.hpp [link argot.ref.concepts.basic_callable_with `argot/concepts/basic_callable_with.hpp`]]

[def argot/concepts/bool_or_constant.hpp [link argot.ref.concepts.bool_or_constant `argot/concepts/bool_or_constant.hpp`]]

[def argot/concepts/can_default_to_reference_to.hpp [link argot.ref.concepts.can_default_to_reference_to `argot/concepts/can_default_to_reference_to.hpp`]]

[def argot/concepts/can_default_to_value_of.hpp [link argot.ref.concepts.can_default_to_value_of `argot/concepts/can_default_to_value_of.hpp`]]

[def argot/concepts/case_labels.hpp [link argot.ref.concepts.case_labels `argot/concepts/case_labels.hpp`]]

[def argot/concepts/class.hpp [link argot.ref.concepts.class `argot/concepts/class.hpp`]]

[def argot/concepts/comparable.hpp [link argot.ref.concepts.comparable `argot/concepts/comparable.hpp`]]

[def argot/concepts/composable.hpp [link argot.ref.concepts.composable `argot/concepts/composable.hpp`]]

[def argot/concepts/composable_with_persistent_provision.hpp [link argot.ref.concepts.composable_with_persistent_provision `argot/concepts/composable_with_persistent_provision.hpp`]]

[def argot/concepts/composable_with_provision.hpp [link argot.ref.concepts.composable_with_provision `argot/concepts/composable_with_provision.hpp`]]

[def argot/concepts/concurrent_argument_provider.hpp [link argot.ref.concepts.concurrent_argument_provider `argot/concepts/concurrent_argument_provider.hpp`]]

[def argot/concepts/concurrent_argument_provider_to.hpp [link argot.ref.concepts.concurrent_argument_provider_to `argot/concepts/concurrent_argument_provider_to.hpp`]]

[def argot/concepts/concurrent_can_default_to_value_of.hpp [link argot.ref.concepts.concurrent_can_default_to_value_of `argot/concepts/concurrent_can_default_to_value_of.hpp`]]

[def argot/concepts/concurrent_expandable.hpp [link argot.ref.concepts.concurrent_expandable `argot/concepts/concurrent_expandable.hpp`]]

[def argot/concepts/constructible.hpp [link argot.ref.concepts.constructible `argot/concepts/constructible.hpp`]]

[def argot/concepts/constructible_with_each.hpp [link argot.ref.concepts.constructible_with_each `argot/concepts/constructible_with_each.hpp`]]

[def argot/concepts/constructible_with_kinds.hpp [link argot.ref.concepts.constructible_with_kinds `argot/concepts/constructible_with_kinds.hpp`]]

[def argot/concepts/contextually_convertible_to_bool.hpp [link argot.ref.concepts.contextually_convertible_to_bool `argot/concepts/contextually_convertible_to_bool.hpp`]]

[def argot/concepts/convertible.hpp [link argot.ref.concepts.convertible `argot/concepts/convertible.hpp`]]

[def argot/concepts/convertible_to_type_or_constant.hpp [link argot.ref.concepts.convertible_to_type_or_constant `argot/concepts/convertible_to_type_or_constant.hpp`]]

[def argot/concepts/copy_assignable.hpp [link argot.ref.concepts.copy_assignable `argot/concepts/copy_assignable.hpp`]]

[def argot/concepts/copy_constructible.hpp [link argot.ref.concepts.copy_constructible `argot/concepts/copy_constructible.hpp`]]

[def argot/concepts/decay_sinkable.hpp [link argot.ref.concepts.decay_sinkable `argot/concepts/decay_sinkable.hpp`]]

[def argot/concepts/decayed_type.hpp [link argot.ref.concepts.decayed_type `argot/concepts/decayed_type.hpp`]]

[def argot/concepts/default.hpp [link argot.ref.concepts.default `argot/concepts/default.hpp`]]

[def argot/concepts/default_constructible.hpp [link argot.ref.concepts.default_constructible `argot/concepts/default_constructible.hpp`]]

[def argot/concepts/default_for_type.hpp [link argot.ref.concepts.default_for_type `argot/concepts/default_for_type.hpp`]]

[def argot/concepts/destructible.hpp [link argot.ref.concepts.destructible `argot/concepts/destructible.hpp`]]

[def argot/concepts/emplaceable_when_contained.hpp [link argot.ref.concepts.emplaceable_when_contained `argot/concepts/emplaceable_when_contained.hpp`]]

[def argot/concepts/emplaceable_with_result_when_contained.hpp [link argot.ref.concepts.emplaceable_with_result_when_contained `argot/concepts/emplaceable_with_result_when_contained.hpp`]]

[def argot/concepts/equality_comparable.hpp [link argot.ref.concepts.equality_comparable `argot/concepts/equality_comparable.hpp`]]

[def argot/concepts/equatable.hpp [link argot.ref.concepts.equatable `argot/concepts/equatable.hpp`]]

[def argot/concepts/exception.hpp [link argot.ref.concepts.exception `argot/concepts/exception.hpp`]]

[def argot/concepts/exceptional_argument_provider.hpp [link argot.ref.concepts.exceptional_argument_provider `argot/concepts/exceptional_argument_provider.hpp`]]

[def argot/concepts/exceptional_persistent_argument_provider.hpp [link argot.ref.concepts.exceptional_persistent_argument_provider `argot/concepts/exceptional_persistent_argument_provider.hpp`]]

[def argot/concepts/exceptional_persistent_switch_body_case.hpp [link argot.ref.concepts.exceptional_persistent_switch_body_case `argot/concepts/exceptional_persistent_switch_body_case.hpp`]]

[def argot/concepts/exceptional_persistent_switch_body_default_for_type.hpp [link argot.ref.concepts.exceptional_persistent_switch_body_default_for_type `argot/concepts/exceptional_persistent_switch_body_default_for_type.hpp`]]

[def argot/concepts/exceptional_switch_body_case.hpp [link argot.ref.concepts.exceptional_switch_body_case `argot/concepts/exceptional_switch_body_case.hpp`]]

[def argot/concepts/exceptional_switch_body_default_for_type.hpp [link argot.ref.concepts.exceptional_switch_body_default_for_type `argot/concepts/exceptional_switch_body_default_for_type.hpp`]]

[def argot/concepts/execution_context.hpp [link argot.ref.concepts.execution_context `argot/concepts/execution_context.hpp`]]

[def argot/concepts/executor.hpp [link argot.ref.concepts.executor `argot/concepts/executor.hpp`]]

[def argot/concepts/expandable.hpp [link argot.ref.concepts.expandable `argot/concepts/expandable.hpp`]]

[def argot/concepts/expandable_argument_provider.hpp [link argot.ref.concepts.expandable_argument_provider `argot/concepts/expandable_argument_provider.hpp`]]

[def argot/concepts/explicitly_convertible.hpp [link argot.ref.concepts.explicitly_convertible `argot/concepts/explicitly_convertible.hpp`]]

[def argot/concepts/false.hpp [link argot.ref.concepts.false `argot/concepts/false.hpp`]]

[def argot/concepts/forgetful_then_providable.hpp [link argot.ref.concepts.forgetful_then_providable `argot/concepts/forgetful_then_providable.hpp`]]

[def argot/concepts/forgetful_thenable.hpp [link argot.ref.concepts.forgetful_thenable `argot/concepts/forgetful_thenable.hpp`]]

[def argot/concepts/future.hpp [link argot.ref.concepts.future `argot/concepts/future.hpp`]]

[def argot/concepts/future_packager.hpp [link argot.ref.concepts.future_packager `argot/concepts/future_packager.hpp`]]

[def argot/concepts/greater.hpp [link argot.ref.concepts.greater `argot/concepts/greater.hpp`]]

[def argot/concepts/greater_equal.hpp [link argot.ref.concepts.greater_equal `argot/concepts/greater_equal.hpp`]]

[def argot/concepts/greater_equal_comparable.hpp [link argot.ref.concepts.greater_equal_comparable `argot/concepts/greater_equal_comparable.hpp`]]

[def argot/concepts/greater_than_comparable.hpp [link argot.ref.concepts.greater_than_comparable `argot/concepts/greater_than_comparable.hpp`]]

[def argot/concepts/hashable.hpp [link argot.ref.concepts.hashable `argot/concepts/hashable.hpp`]]

[def argot/concepts/higher_order_argument_provider.hpp [link argot.ref.concepts.higher_order_argument_provider `argot/concepts/higher_order_argument_provider.hpp`]]

[def argot/concepts/higher_order_concurrent_argument_provider.hpp [link argot.ref.concepts.higher_order_concurrent_argument_provider `argot/concepts/higher_order_concurrent_argument_provider.hpp`]]

[def argot/concepts/higher_order_expandable.hpp [link argot.ref.concepts.higher_order_expandable `argot/concepts/higher_order_expandable.hpp`]]

[def argot/concepts/higher_order_future.hpp [link argot.ref.concepts.higher_order_future `argot/concepts/higher_order_future.hpp`]]

[def argot/concepts/higher_order_persistent_argument_provider.hpp [link argot.ref.concepts.higher_order_persistent_argument_provider `argot/concepts/higher_order_persistent_argument_provider.hpp`]]

[def argot/concepts/homogeneous_return_value_reducer.hpp [link argot.ref.concepts.homogeneous_return_value_reducer `argot/concepts/homogeneous_return_value_reducer.hpp`]]

[def argot/concepts/immediate_executor.hpp [link argot.ref.concepts.immediate_executor `argot/concepts/immediate_executor.hpp`]]

[def argot/concepts/inequality_comparable.hpp [link argot.ref.concepts.inequality_comparable `argot/concepts/inequality_comparable.hpp`]]

[def argot/concepts/instantiation_of.hpp [link argot.ref.concepts.instantiation_of `argot/concepts/instantiation_of.hpp`]]

[def argot/concepts/intrinsic_persistent_thenable.hpp [link argot.ref.concepts.intrinsic_persistent_thenable `argot/concepts/intrinsic_persistent_thenable.hpp`]]

[def argot/concepts/intrinsic_thenable.hpp [link argot.ref.concepts.intrinsic_thenable `argot/concepts/intrinsic_thenable.hpp`]]

[def argot/concepts/invocable_from_provision_without_reduction.hpp [link argot.ref.concepts.invocable_from_provision_without_reduction `argot/concepts/invocable_from_provision_without_reduction.hpp`]]

[def argot/concepts/invocable_object_with.hpp [link argot.ref.concepts.invocable_object_with `argot/concepts/invocable_object_with.hpp`]]

[def argot/concepts/invocable_object_with_each.hpp [link argot.ref.concepts.invocable_object_with_each `argot/concepts/invocable_object_with_each.hpp`]]

[def argot/concepts/invocable_object_with_kinds.hpp [link argot.ref.concepts.invocable_object_with_kinds `argot/concepts/invocable_object_with_kinds.hpp`]]

[def argot/concepts/invocable_object_with_provision.hpp [link argot.ref.concepts.invocable_object_with_provision `argot/concepts/invocable_object_with_provision.hpp`]]

[def argot/concepts/invocable_with.hpp [link argot.ref.concepts.invocable_with `argot/concepts/invocable_with.hpp`]]

[def argot/concepts/invocable_with_each.hpp [link argot.ref.concepts.invocable_with_each `argot/concepts/invocable_with_each.hpp`]]

[def argot/concepts/invocable_with_kinds.hpp [link argot.ref.concepts.invocable_with_kinds `argot/concepts/invocable_with_kinds.hpp`]]

[def argot/concepts/less.hpp [link argot.ref.concepts.less `argot/concepts/less.hpp`]]

[def argot/concepts/less_equal.hpp [link argot.ref.concepts.less_equal `argot/concepts/less_equal.hpp`]]

[def argot/concepts/less_equal_comparable.hpp [link argot.ref.concepts.less_equal_comparable `argot/concepts/less_equal_comparable.hpp`]]

[def argot/concepts/less_than_comparable.hpp [link argot.ref.concepts.less_than_comparable `argot/concepts/less_than_comparable.hpp`]]

[def argot/concepts/lvalue_reference.hpp [link argot.ref.concepts.lvalue_reference `argot/concepts/lvalue_reference.hpp`]]

[def argot/concepts/move_assignable.hpp [link argot.ref.concepts.move_assignable `argot/concepts/move_assignable.hpp`]]

[def argot/concepts/move_constructible.hpp [link argot.ref.concepts.move_constructible `argot/concepts/move_constructible.hpp`]]

[def argot/concepts/net_executor.hpp [link argot.ref.concepts.net_executor `argot/concepts/net_executor.hpp`]]

[def argot/concepts/nothrow_assignable.hpp [link argot.ref.concepts.nothrow_assignable `argot/concepts/nothrow_assignable.hpp`]]

[def argot/concepts/nothrow_assignable_when_contained.hpp [link argot.ref.concepts.nothrow_assignable_when_contained `argot/concepts/nothrow_assignable_when_contained.hpp`]]

[def argot/concepts/nothrow_constructible.hpp [link argot.ref.concepts.nothrow_constructible `argot/concepts/nothrow_constructible.hpp`]]

[def argot/concepts/nothrow_convertible.hpp [link argot.ref.concepts.nothrow_convertible `argot/concepts/nothrow_convertible.hpp`]]

[def argot/concepts/nothrow_copy_assignable.hpp [link argot.ref.concepts.nothrow_copy_assignable `argot/concepts/nothrow_copy_assignable.hpp`]]

[def argot/concepts/nothrow_copy_constructible.hpp [link argot.ref.concepts.nothrow_copy_constructible `argot/concepts/nothrow_copy_constructible.hpp`]]

[def argot/concepts/nothrow_default_constructible.hpp [link argot.ref.concepts.nothrow_default_constructible `argot/concepts/nothrow_default_constructible.hpp`]]

[def argot/concepts/nothrow_destructible.hpp [link argot.ref.concepts.nothrow_destructible `argot/concepts/nothrow_destructible.hpp`]]

[def argot/concepts/nothrow_emplaceable_when_contained.hpp [link argot.ref.concepts.nothrow_emplaceable_when_contained `argot/concepts/nothrow_emplaceable_when_contained.hpp`]]

[def argot/concepts/nothrow_emplaceable_with_result_when_contained.hpp [link argot.ref.concepts.nothrow_emplaceable_with_result_when_contained `argot/concepts/nothrow_emplaceable_with_result_when_contained.hpp`]]

[def argot/concepts/nothrow_equality_comparable.hpp [link argot.ref.concepts.nothrow_equality_comparable `argot/concepts/nothrow_equality_comparable.hpp`]]

[def argot/concepts/nothrow_explicitly_convertible.hpp [link argot.ref.concepts.nothrow_explicitly_convertible `argot/concepts/nothrow_explicitly_convertible.hpp`]]

[def argot/concepts/nothrow_greater_equal_comparable.hpp [link argot.ref.concepts.nothrow_greater_equal_comparable `argot/concepts/nothrow_greater_equal_comparable.hpp`]]

[def argot/concepts/nothrow_greater_than_comparable.hpp [link argot.ref.concepts.nothrow_greater_than_comparable `argot/concepts/nothrow_greater_than_comparable.hpp`]]

[def argot/concepts/nothrow_hashable.hpp [link argot.ref.concepts.nothrow_hashable `argot/concepts/nothrow_hashable.hpp`]]

[def argot/concepts/nothrow_inequality_comparable.hpp [link argot.ref.concepts.nothrow_inequality_comparable `argot/concepts/nothrow_inequality_comparable.hpp`]]

[def argot/concepts/nothrow_less_equal_comparable.hpp [link argot.ref.concepts.nothrow_less_equal_comparable `argot/concepts/nothrow_less_equal_comparable.hpp`]]

[def argot/concepts/nothrow_less_than_comparable.hpp [link argot.ref.concepts.nothrow_less_than_comparable `argot/concepts/nothrow_less_than_comparable.hpp`]]

[def argot/concepts/nothrow_move_assignable.hpp [link argot.ref.concepts.nothrow_move_assignable `argot/concepts/nothrow_move_assignable.hpp`]]

[def argot/concepts/nothrow_move_constructible.hpp [link argot.ref.concepts.nothrow_move_constructible `argot/concepts/nothrow_move_constructible.hpp`]]

[def argot/concepts/nothrow_sinkable.hpp [link argot.ref.concepts.nothrow_sinkable `argot/concepts/nothrow_sinkable.hpp`]]

[def argot/concepts/nothrow_swappable.hpp [link argot.ref.concepts.nothrow_swappable `argot/concepts/nothrow_swappable.hpp`]]

[def argot/concepts/object.hpp [link argot.ref.concepts.object `argot/concepts/object.hpp`]]

[def argot/concepts/optional_like.hpp [link argot.ref.concepts.optional_like `argot/concepts/optional_like.hpp`]]

[def argot/concepts/parameter_type.hpp [link argot.ref.concepts.parameter_type `argot/concepts/parameter_type.hpp`]]

[def argot/concepts/persistent_argument_provider.hpp [link argot.ref.concepts.persistent_argument_provider `argot/concepts/persistent_argument_provider.hpp`]]

[def argot/concepts/persistent_argument_provider_generator_with.hpp [link argot.ref.concepts.persistent_argument_provider_generator_with `argot/concepts/persistent_argument_provider_generator_with.hpp`]]

[def argot/concepts/persistent_argument_provider_generator_with_each.hpp [link argot.ref.concepts.persistent_argument_provider_generator_with_each `argot/concepts/persistent_argument_provider_generator_with_each.hpp`]]

[def argot/concepts/persistent_argument_provider_generator_with_kinds.hpp [link argot.ref.concepts.persistent_argument_provider_generator_with_kinds `argot/concepts/persistent_argument_provider_generator_with_kinds.hpp`]]

[def argot/concepts/persistent_argument_provider_to.hpp [link argot.ref.concepts.persistent_argument_provider_to `argot/concepts/persistent_argument_provider_to.hpp`]]

[def argot/concepts/persistent_composable.hpp [link argot.ref.concepts.persistent_composable `argot/concepts/persistent_composable.hpp`]]

[def argot/concepts/persistent_composable_with_persistent_provision.hpp [link argot.ref.concepts.persistent_composable_with_persistent_provision `argot/concepts/persistent_composable_with_persistent_provision.hpp`]]

[def argot/concepts/persistent_concurrent_argument_provider.hpp [link argot.ref.concepts.persistent_concurrent_argument_provider `argot/concepts/persistent_concurrent_argument_provider.hpp`]]

[def argot/concepts/persistent_concurrent_argument_provider_to.hpp [link argot.ref.concepts.persistent_concurrent_argument_provider_to `argot/concepts/persistent_concurrent_argument_provider_to.hpp`]]

[def argot/concepts/persistent_default_for_type.hpp [link argot.ref.concepts.persistent_default_for_type `argot/concepts/persistent_default_for_type.hpp`]]

[def argot/concepts/persistent_exceptional_default.hpp [link argot.ref.concepts.persistent_exceptional_default `argot/concepts/persistent_exceptional_default.hpp`]]

[def argot/concepts/persistent_expandable_argument_provider.hpp [link argot.ref.concepts.persistent_expandable_argument_provider `argot/concepts/persistent_expandable_argument_provider.hpp`]]

[def argot/concepts/persistent_forgetful_then_providable.hpp [link argot.ref.concepts.persistent_forgetful_then_providable `argot/concepts/persistent_forgetful_then_providable.hpp`]]

[def argot/concepts/persistent_forgetful_thenable.hpp [link argot.ref.concepts.persistent_forgetful_thenable `argot/concepts/persistent_forgetful_thenable.hpp`]]

[def argot/concepts/persistent_future.hpp [link argot.ref.concepts.persistent_future `argot/concepts/persistent_future.hpp`]]

[def argot/concepts/persistent_invocable_object_with.hpp [link argot.ref.concepts.persistent_invocable_object_with `argot/concepts/persistent_invocable_object_with.hpp`]]

[def argot/concepts/persistent_invocable_object_with_each.hpp [link argot.ref.concepts.persistent_invocable_object_with_each `argot/concepts/persistent_invocable_object_with_each.hpp`]]

[def argot/concepts/persistent_invocable_object_with_kinds.hpp [link argot.ref.concepts.persistent_invocable_object_with_kinds `argot/concepts/persistent_invocable_object_with_kinds.hpp`]]

[def argot/concepts/persistent_invocable_object_with_persistent_provision.hpp [link argot.ref.concepts.persistent_invocable_object_with_persistent_provision `argot/concepts/persistent_invocable_object_with_persistent_provision.hpp`]]

[def argot/concepts/persistent_return_value_reducer.hpp [link argot.ref.concepts.persistent_return_value_reducer `argot/concepts/persistent_return_value_reducer.hpp`]]

[def argot/concepts/persistent_return_value_reducer_of.hpp [link argot.ref.concepts.persistent_return_value_reducer_of `argot/concepts/persistent_return_value_reducer_of.hpp`]]

[def argot/concepts/persistent_switch_body_case.hpp [link argot.ref.concepts.persistent_switch_body_case `argot/concepts/persistent_switch_body_case.hpp`]]

[def argot/concepts/persistent_switch_body_default_for_type.hpp [link argot.ref.concepts.persistent_switch_body_default_for_type `argot/concepts/persistent_switch_body_default_for_type.hpp`]]

[def argot/concepts/persistent_switch_body_for_type.hpp [link argot.ref.concepts.persistent_switch_body_for_type `argot/concepts/persistent_switch_body_for_type.hpp`]]

[def argot/concepts/persistent_then_providable.hpp [link argot.ref.concepts.persistent_then_providable `argot/concepts/persistent_then_providable.hpp`]]

[def argot/concepts/persistent_thenable.hpp [link argot.ref.concepts.persistent_thenable `argot/concepts/persistent_thenable.hpp`]]

[def argot/concepts/potentially_invocable.hpp [link argot.ref.concepts.potentially_invocable `argot/concepts/potentially_invocable.hpp`]]

[def argot/concepts/potentially_invocable_object.hpp [link argot.ref.concepts.potentially_invocable_object `argot/concepts/potentially_invocable_object.hpp`]]

[def argot/concepts/reference.hpp [link argot.ref.concepts.reference `argot/concepts/reference.hpp`]]

[def argot/concepts/return_type.hpp [link argot.ref.concepts.return_type `argot/concepts/return_type.hpp`]]

[def argot/concepts/return_value_reducer.hpp [link argot.ref.concepts.return_value_reducer `argot/concepts/return_value_reducer.hpp`]]

[def argot/concepts/return_value_reducer_of.hpp [link argot.ref.concepts.return_value_reducer_of `argot/concepts/return_value_reducer_of.hpp`]]

[def argot/concepts/rvalue.hpp [link argot.ref.concepts.rvalue `argot/concepts/rvalue.hpp`]]

[def argot/concepts/rvalue_reference.hpp [link argot.ref.concepts.rvalue_reference `argot/concepts/rvalue_reference.hpp`]]

[def argot/concepts/same_type.hpp [link argot.ref.concepts.same_type `argot/concepts/same_type.hpp`]]

[def argot/concepts/same_value.hpp [link argot.ref.concepts.same_value `argot/concepts/same_value.hpp`]]

[def argot/concepts/sinkable.hpp [link argot.ref.concepts.sinkable `argot/concepts/sinkable.hpp`]]

[def argot/concepts/std_integral_constant.hpp [link argot.ref.concepts.std_integral_constant `argot/concepts/std_integral_constant.hpp`]]

[def argot/concepts/stlab_executor.hpp [link argot.ref.concepts.stlab_executor `argot/concepts/stlab_executor.hpp`]]

[def argot/concepts/stream_insertable.hpp [link argot.ref.concepts.stream_insertable `argot/concepts/stream_insertable.hpp`]]

[def argot/concepts/stream_insertable_with_each.hpp [link argot.ref.concepts.stream_insertable_with_each `argot/concepts/stream_insertable_with_each.hpp`]]

[def argot/concepts/stream_insertable_with_kinds.hpp [link argot.ref.concepts.stream_insertable_with_kinds `argot/concepts/stream_insertable_with_kinds.hpp`]]

[def argot/concepts/stream_insertable_with_provision.hpp [link argot.ref.concepts.stream_insertable_with_provision `argot/concepts/stream_insertable_with_provision.hpp`]]

[def argot/concepts/swappable.hpp [link argot.ref.concepts.swappable `argot/concepts/swappable.hpp`]]

[def argot/concepts/switch_body.hpp [link argot.ref.concepts.switch_body `argot/concepts/switch_body.hpp`]]

[def argot/concepts/switch_body_case.hpp [link argot.ref.concepts.switch_body_case `argot/concepts/switch_body_case.hpp`]]

[def argot/concepts/switch_body_default.hpp [link argot.ref.concepts.switch_body_default `argot/concepts/switch_body_default.hpp`]]

[def argot/concepts/switch_body_default_for_type.hpp [link argot.ref.concepts.switch_body_default_for_type `argot/concepts/switch_body_default_for_type.hpp`]]

[def argot/concepts/switch_body_for_type.hpp [link argot.ref.concepts.switch_body_for_type `argot/concepts/switch_body_for_type.hpp`]]

[def argot/concepts/switch_condition.hpp [link argot.ref.concepts.switch_condition `argot/concepts/switch_condition.hpp`]]

[def argot/concepts/switch_condition_or_constant.hpp [link argot.ref.concepts.switch_condition_or_constant `argot/concepts/switch_condition_or_constant.hpp`]]

[def argot/concepts/switchable.hpp [link argot.ref.concepts.switchable `argot/concepts/switchable.hpp`]]

[def argot/concepts/then_providable.hpp [link argot.ref.concepts.then_providable `argot/concepts/then_providable.hpp`]]

[def argot/concepts/thenable.hpp [link argot.ref.concepts.thenable `argot/concepts/thenable.hpp`]]

[def argot/concepts/transformation_with.hpp [link argot.ref.concepts.transformation_with `argot/concepts/transformation_with.hpp`]]

[def argot/concepts/trivially_constructible.hpp [link argot.ref.concepts.trivially_constructible `argot/concepts/trivially_constructible.hpp`]]

[def argot/concepts/trivially_copy_assignable.hpp [link argot.ref.concepts.trivially_copy_assignable `argot/concepts/trivially_copy_assignable.hpp`]]

[def argot/concepts/trivially_copy_constructible.hpp [link argot.ref.concepts.trivially_copy_constructible `argot/concepts/trivially_copy_constructible.hpp`]]

[def argot/concepts/trivially_default_constructible.hpp [link argot.ref.concepts.trivially_default_constructible `argot/concepts/trivially_default_constructible.hpp`]]

[def argot/concepts/trivially_destructible.hpp [link argot.ref.concepts.trivially_destructible `argot/concepts/trivially_destructible.hpp`]]

[def argot/concepts/trivially_move_assignable.hpp [link argot.ref.concepts.trivially_move_assignable `argot/concepts/trivially_move_assignable.hpp`]]

[def argot/concepts/trivially_move_constructible.hpp [link argot.ref.concepts.trivially_move_constructible `argot/concepts/trivially_move_constructible.hpp`]]

[def argot/concepts/true.hpp [link argot.ref.concepts.true `argot/concepts/true.hpp`]]

[def argot/concepts/tuple_index.hpp [link argot.ref.concepts.tuple_index `argot/concepts/tuple_index.hpp`]]

[def argot/concepts/tuple_like.hpp [link argot.ref.concepts.tuple_like `argot/concepts/tuple_like.hpp`]]

[def argot/concepts/type_or_constant.hpp [link argot.ref.concepts.type_or_constant `argot/concepts/type_or_constant.hpp`]]

[def argot/concepts/unhandled_switchable_value.hpp [link argot.ref.concepts.unhandled_switchable_value `argot/concepts/unhandled_switchable_value.hpp`]]

[def argot/concepts/union_index.hpp [link argot.ref.concepts.union_index `argot/concepts/union_index.hpp`]]

[def argot/concepts/union_like.hpp [link argot.ref.concepts.union_like `argot/concepts/union_like.hpp`]]

[def argot/concepts/unqualified_object.hpp [link argot.ref.concepts.unqualified_object `argot/concepts/unqualified_object.hpp`]]

[def argot/concepts/valid.hpp [link argot.ref.concepts.valid `argot/concepts/valid.hpp`]]

[def argot/concepts/variant_index.hpp [link argot.ref.concepts.variant_index `argot/concepts/variant_index.hpp`]]

[def argot/concepts/variant_like.hpp [link argot.ref.concepts.variant_like `argot/concepts/variant_like.hpp`]]

[def argot/concepts/volatile_object.hpp [link argot.ref.concepts.volatile_object `argot/concepts/volatile_object.hpp`]]

[def argot/concepts.hpp [link argot.ref.argot.concepts `argot/concepts.hpp`]]

[def argot/config.hpp [link argot.ref.argot.config `argot/config.hpp`]]

[def argot/contained.hpp [link argot.ref.argot.contained `argot/contained.hpp`]]

[def argot/contextually_convert_to_bool.hpp [link argot.ref.argot.contextually_convert_to_bool `argot/contextually_convert_to_bool.hpp`]]

[def argot/convert_future.hpp [link argot.ref.argot.convert_future `argot/convert_future.hpp`]]

[def argot/default_.hpp [link argot.ref.argot.default_ `argot/default_.hpp`]]

[def argot/discriminated_union.hpp [link argot.ref.argot.discriminated_union `argot/discriminated_union.hpp`]]

[def argot/empty_switch_body.hpp [link argot.ref.argot.empty_switch_body `argot/empty_switch_body.hpp`]]

[def argot/executor/defer_to.hpp [link argot.ref.executor.defer_to `argot/executor/defer_to.hpp`]]

[def argot/executor/dispatch_to.hpp [link argot.ref.executor.dispatch_to `argot/executor/dispatch_to.hpp`]]

[def argot/executor/immediate.hpp [link argot.ref.executor.immediate `argot/executor/immediate.hpp`]]

[def argot/executor/post_to.hpp [link argot.ref.executor.post_to `argot/executor/post_to.hpp`]]

[def argot/executor/stlab.hpp [link argot.ref.executor.stlab `argot/executor/stlab.hpp`]]

[def argot/executor.hpp [link argot.ref.argot.executor `argot/executor.hpp`]]

[def argot/executor_traits/bind.hpp [link argot.ref.executor_traits.bind `argot/executor_traits/bind.hpp`]]

[def argot/executor_traits/execute.hpp [link argot.ref.executor_traits.execute `argot/executor_traits/execute.hpp`]]

[def argot/executor_traits/execute_immediately.hpp [link argot.ref.executor_traits.execute_immediately `argot/executor_traits/execute_immediately.hpp`]]

[def argot/executor_traits.hpp [link argot.ref.argot.executor_traits `argot/executor_traits.hpp`]]

[def argot/forgetful_async_call.hpp [link argot.ref.argot.forgetful_async_call `argot/forgetful_async_call.hpp`]]

[def argot/forgetful_call.hpp [link argot.ref.argot.forgetful_call `argot/forgetful_call.hpp`]]

[def argot/forward_arguments_as_tuple.hpp [link argot.ref.argot.forward_arguments_as_tuple `argot/forward_arguments_as_tuple.hpp`]]

[def argot/fut/augment.hpp [link argot.ref.fut.augment `argot/fut/augment.hpp`]]

[def argot/fut/future.hpp [link argot.ref.fut.future `argot/fut/future.hpp`]]

[def argot/fut/ready.hpp [link argot.ref.fut.ready `argot/fut/ready.hpp`]]

[def argot/fut/ready_as.hpp [link argot.ref.fut.ready_as `argot/fut/ready_as.hpp`]]

[def argot/fut/squash.hpp [link argot.ref.fut.squash `argot/fut/squash.hpp`]]

[def argot/fut.hpp [link argot.ref.argot.fut `argot/fut.hpp`]]

[def argot/fut_traits/config.hpp [link argot.ref.fut_traits.config `argot/fut_traits/config.hpp`]]

[def argot/fut_traits/destructive_forgetful_then.hpp [link argot.ref.fut_traits.destructive_forgetful_then `argot/fut_traits/destructive_forgetful_then.hpp`]]

[def argot/fut_traits/destructive_then.hpp [link argot.ref.fut_traits.destructive_then `argot/fut_traits/destructive_then.hpp`]]

[def argot/fut_traits/forgetful_then.hpp [link argot.ref.fut_traits.forgetful_then `argot/fut_traits/forgetful_then.hpp`]]

[def argot/fut_traits/persistent_forgetful_then.hpp [link argot.ref.fut_traits.persistent_forgetful_then `argot/fut_traits/persistent_forgetful_then.hpp`]]

[def argot/fut_traits/persistent_then.hpp [link argot.ref.fut_traits.persistent_then `argot/fut_traits/persistent_then.hpp`]]

[def argot/fut_traits/then.hpp [link argot.ref.fut_traits.then `argot/fut_traits/then.hpp`]]

[def argot/fut_traits/value_type.hpp [link argot.ref.fut_traits.value_type `argot/fut_traits/value_type.hpp`]]

[def argot/fut_traits.hpp [link argot.ref.argot.fut_traits `argot/fut_traits.hpp`]]

[def argot/future_spawner.hpp [link argot.ref.argot.future_spawner `argot/future_spawner.hpp`]]

[def argot/future_traits.hpp [link argot.ref.argot.future_traits `argot/future_traits.hpp`]]

[def argot/gen/access_raw_concept_map.hpp [link argot.ref.gen.access_raw_concept_map `argot/gen/access_raw_concept_map.hpp`]]

[def argot/gen/and.hpp [link argot.ref.gen.and `argot/gen/and.hpp`]]

[def argot/gen/auto_concept.hpp [link argot.ref.gen.auto_concept `argot/gen/auto_concept.hpp`]]

[def argot/gen/concept_assert.hpp [link argot.ref.gen.concept_assert `argot/gen/concept_assert.hpp`]]

[def argot/gen/concept_conditional.hpp [link argot.ref.gen.concept_conditional `argot/gen/concept_conditional.hpp`]]

[def argot/gen/concept_ensure.hpp [link argot.ref.gen.concept_ensure `argot/gen/concept_ensure.hpp`]]

[def argot/gen/concept_map_is_valid.hpp [link argot.ref.gen.concept_map_is_valid `argot/gen/concept_map_is_valid.hpp`]]

[def argot/gen/explicit_concept.hpp [link argot.ref.gen.explicit_concept `argot/gen/explicit_concept.hpp`]]

[def argot/gen/is_auto_concept.hpp [link argot.ref.gen.is_auto_concept `argot/gen/is_auto_concept.hpp`]]

[def argot/gen/is_modeled.hpp [link argot.ref.gen.is_modeled `argot/gen/is_modeled.hpp`]]

[def argot/gen/make_concept_map.hpp [link argot.ref.gen.make_concept_map `argot/gen/make_concept_map.hpp`]]

[def argot/gen/not.hpp [link argot.ref.gen.not `argot/gen/not.hpp`]]

[def argot/gen/or.hpp [link argot.ref.gen.or `argot/gen/or.hpp`]]

[def argot/gen/requires.hpp [link argot.ref.gen.requires `argot/gen/requires.hpp`]]

[def argot/gen/transparent_requirement.hpp [link argot.ref.gen.transparent_requirement `argot/gen/transparent_requirement.hpp`]]

[def argot/gen/type.hpp [link argot.ref.gen.type `argot/gen/type.hpp`]]

[def argot/gen.hpp [link argot.ref.argot.gen `argot/gen.hpp`]]

[def argot/identity.hpp [link argot.ref.argot.identity `argot/identity.hpp`]]

[def argot/impossible.hpp [link argot.ref.argot.impossible `argot/impossible.hpp`]]

[def argot/in_place_default_init.hpp [link argot.ref.argot.in_place_default_init `argot/in_place_default_init.hpp`]]

[def argot/in_place_with_result.hpp [link argot.ref.argot.in_place_with_result `argot/in_place_with_result.hpp`]]

[def argot/invocable_reference.hpp [link argot.ref.argot.invocable_reference `argot/invocable_reference.hpp`]]

[def argot/lazy_expand.hpp [link argot.ref.argot.lazy_expand `argot/lazy_expand.hpp`]]

[def argot/no_unique_address.hpp [link argot.ref.argot.no_unique_address `argot/no_unique_address.hpp`]]

[def argot/opaque_optional/copyable_opaque_optional.hpp [link argot.ref.opaque_optional.copyable_opaque_optional `argot/opaque_optional/copyable_opaque_optional.hpp`]]

[def argot/opaque_optional/opaque_optional.hpp [link argot.ref.opaque_optional.opaque_optional `argot/opaque_optional/opaque_optional.hpp`]]

[def argot/opaque_optional.hpp [link argot.ref.argot.opaque_optional `argot/opaque_optional.hpp`]]

[def argot/operators.hpp [link argot.ref.argot.operators `argot/operators.hpp`]]

[def argot/opt_traits/element_type.hpp [link argot.ref.opt_traits.element_type `argot/opt_traits/element_type.hpp`]]

[def argot/opt_traits/get.hpp [link argot.ref.opt_traits.get `argot/opt_traits/get.hpp`]]

[def argot/opt_traits/has_value.hpp [link argot.ref.opt_traits.has_value `argot/opt_traits/has_value.hpp`]]

[def argot/opt_traits/nil.hpp [link argot.ref.opt_traits.nil `argot/opt_traits/nil.hpp`]]

[def argot/opt_traits/nil_element_type.hpp [link argot.ref.opt_traits.nil_element_type `argot/opt_traits/nil_element_type.hpp`]]

[def argot/opt_traits.hpp [link argot.ref.argot.opt_traits `argot/opt_traits.hpp`]]

[def argot/output.hpp [link argot.ref.argot.output `argot/output.hpp`]]

[def argot/packager/boost_future.hpp [link argot.ref.packager.boost_future `argot/packager/boost_future.hpp`]]

[def argot/packager/boost_shared_future.hpp [link argot.ref.packager.boost_shared_future `argot/packager/boost_shared_future.hpp`]]

[def argot/packager/packager_base.hpp [link argot.ref.packager.packager_base `argot/packager/packager_base.hpp`]]

[def argot/packager/packager_template.hpp [link argot.ref.packager.packager_template `argot/packager/packager_template.hpp`]]

[def argot/packager/stlab.hpp [link argot.ref.packager.stlab `argot/packager/stlab.hpp`]]

[def argot/packager.hpp [link argot.ref.argot.packager `argot/packager.hpp`]]

[def argot/packager_traits/package.hpp [link argot.ref.packager_traits.package `argot/packager_traits/package.hpp`]]

[def argot/packager_traits.hpp [link argot.ref.argot.packager_traits `argot/packager_traits.hpp`]]

[def argot/prov/abort.hpp [link argot.ref.prov.abort `argot/prov/abort.hpp`]]

[def argot/prov/access_tuple.hpp [link argot.ref.prov.access_tuple `argot/prov/access_tuple.hpp`]]

[def argot/prov/access_union.hpp [link argot.ref.prov.access_union `argot/prov/access_union.hpp`]]

[def argot/prov/access_variant.hpp [link argot.ref.prov.access_variant `argot/prov/access_variant.hpp`]]

[def argot/prov/alternative_of.hpp [link argot.ref.prov.alternative_of `argot/prov/alternative_of.hpp`]]

[def argot/prov/alternative_of_by_value.hpp [link argot.ref.prov.alternative_of_by_value `argot/prov/alternative_of_by_value.hpp`]]

[def argot/prov/as.hpp [link argot.ref.prov.as `argot/prov/as.hpp`]]

[def argot/prov/assert_.hpp [link argot.ref.prov.assert_ `argot/prov/assert_.hpp`]]

[def argot/prov/bind_call.hpp [link argot.ref.prov.bind_call `argot/prov/bind_call.hpp`]]

[def argot/prov/bind_transform/bind_transform.hpp [link argot.ref.bind_transform.bind_transform `argot/prov/bind_transform/bind_transform.hpp`]]

[def argot/prov/bind_transform/operator_pipe.hpp [link argot.ref.bind_transform.operator_pipe `argot/prov/bind_transform/operator_pipe.hpp`]]

[def argot/prov/bind_transform.hpp [link argot.ref.prov.bind_transform `argot/prov/bind_transform.hpp`]]

[def argot/prov/bool_.hpp [link argot.ref.prov.bool_ `argot/prov/bool_.hpp`]]

[def argot/prov/boost_assert.hpp [link argot.ref.prov.boost_assert `argot/prov/boost_assert.hpp`]]

[def argot/prov/conditional.hpp [link argot.ref.prov.conditional `argot/prov/conditional.hpp`]]

[def argot/prov/default_to_reference_to.hpp [link argot.ref.prov.default_to_reference_to `argot/prov/default_to_reference_to.hpp`]]

[def argot/prov/default_to_value_of.hpp [link argot.ref.prov.default_to_value_of `argot/prov/default_to_value_of.hpp`]]

[def argot/prov/drop.hpp [link argot.ref.prov.drop `argot/prov/drop.hpp`]]

[def argot/prov/drop_while.hpp [link argot.ref.prov.drop_while `argot/prov/drop_while.hpp`]]

[def argot/prov/eat.hpp [link argot.ref.prov.eat `argot/prov/eat.hpp`]]

[def argot/prov/element_or.hpp [link argot.ref.prov.element_or `argot/prov/element_or.hpp`]]

[def argot/prov/element_or_nothing.hpp [link argot.ref.prov.element_or_nothing `argot/prov/element_or_nothing.hpp`]]

[def argot/prov/element_or_provision.hpp [link argot.ref.prov.element_or_provision `argot/prov/element_or_provision.hpp`]]

[def argot/prov/exit.hpp [link argot.ref.prov.exit `argot/prov/exit.hpp`]]

[def argot/prov/expand/expand.hpp [link argot.ref.expand.expand `argot/prov/expand/expand.hpp`]]

[def argot/prov/expand/expansion_operator.hpp [link argot.ref.expand.expansion_operator `argot/prov/expand/expansion_operator.hpp`]]

[def argot/prov/expand.hpp [link argot.ref.prov.expand `argot/prov/expand.hpp`]]

[def argot/prov/for_.hpp [link argot.ref.prov.for_ `argot/prov/for_.hpp`]]

[def argot/prov/group.hpp [link argot.ref.prov.group `argot/prov/group.hpp`]]

[def argot/prov/index_of.hpp [link argot.ref.prov.index_of `argot/prov/index_of.hpp`]]

[def argot/prov/integer_sequence.hpp [link argot.ref.prov.integer_sequence `argot/prov/integer_sequence.hpp`]]

[def argot/prov/lift_call.hpp [link argot.ref.prov.lift_call `argot/prov/lift_call.hpp`]]

[def argot/prov/lift_transform.hpp [link argot.ref.prov.lift_transform `argot/prov/lift_transform.hpp`]]

[def argot/prov/nothing.hpp [link argot.ref.prov.nothing `argot/prov/nothing.hpp`]]

[def argot/prov/provider_reference.hpp [link argot.ref.prov.provider_reference `argot/prov/provider_reference.hpp`]]

[def argot/prov/quick_exit.hpp [link argot.ref.prov.quick_exit `argot/prov/quick_exit.hpp`]]

[def argot/prov/reference_to.hpp [link argot.ref.prov.reference_to `argot/prov/reference_to.hpp`]]

[def argot/prov/rethrow.hpp [link argot.ref.prov.rethrow `argot/prov/rethrow.hpp`]]

[def argot/prov/run.hpp [link argot.ref.prov.run `argot/prov/run.hpp`]]

[def argot/prov/squash.hpp [link argot.ref.prov.squash `argot/prov/squash.hpp`]]

[def argot/prov/switch_.hpp [link argot.ref.prov.switch_ `argot/prov/switch_.hpp`]]

[def argot/prov/terminate.hpp [link argot.ref.prov.terminate `argot/prov/terminate.hpp`]]

[def argot/prov/throw_.hpp [link argot.ref.prov.throw_ `argot/prov/throw_.hpp`]]

[def argot/prov/tuple_index.hpp [link argot.ref.prov.tuple_index `argot/prov/tuple_index.hpp`]]

[def argot/prov/tuple_indices.hpp [link argot.ref.prov.tuple_indices `argot/prov/tuple_indices.hpp`]]

[def argot/prov/union_index.hpp [link argot.ref.prov.union_index `argot/prov/union_index.hpp`]]

[def argot/prov/union_indices.hpp [link argot.ref.prov.union_indices `argot/prov/union_indices.hpp`]]

[def argot/prov/unpack.hpp [link argot.ref.prov.unpack `argot/prov/unpack.hpp`]]

[def argot/prov/unpack_by_value.hpp [link argot.ref.prov.unpack_by_value `argot/prov/unpack_by_value.hpp`]]

[def argot/prov/unpack_integer_sequence.hpp [link argot.ref.prov.unpack_integer_sequence `argot/prov/unpack_integer_sequence.hpp`]]

[def argot/prov/unreachable.hpp [link argot.ref.prov.unreachable `argot/prov/unreachable.hpp`]]

[def argot/prov/value_in_range.hpp [link argot.ref.prov.value_in_range `argot/prov/value_in_range.hpp`]]

[def argot/prov/value_in_set.hpp [link argot.ref.prov.value_in_set `argot/prov/value_in_set.hpp`]]

[def argot/prov/value_of.hpp [link argot.ref.prov.value_of `argot/prov/value_of.hpp`]]

[def argot/prov/variant_index.hpp [link argot.ref.prov.variant_index `argot/prov/variant_index.hpp`]]

[def argot/prov/variant_indices.hpp [link argot.ref.prov.variant_indices `argot/prov/variant_indices.hpp`]]

[def argot/prov.hpp [link argot.ref.argot.prov `argot/prov.hpp`]]

[def argot/prov_traits/argument_list_kinds_of.hpp [link argot.ref.prov_traits.argument_list_kinds_of `argot/prov_traits/argument_list_kinds_of.hpp`]]

[def argot/prov_traits/argument_list_kinds_of_destructive.hpp [link argot.ref.prov_traits.argument_list_kinds_of_destructive `argot/prov_traits/argument_list_kinds_of_destructive.hpp`]]

[def argot/prov_traits/argument_list_kinds_of_persistent.hpp [link argot.ref.prov_traits.argument_list_kinds_of_persistent `argot/prov_traits/argument_list_kinds_of_persistent.hpp`]]

[def argot/prov_traits/destructive_provide.hpp [link argot.ref.prov_traits.destructive_provide `argot/prov_traits/destructive_provide.hpp`]]

[def argot/prov_traits/persistent_provide.hpp [link argot.ref.prov_traits.persistent_provide `argot/prov_traits/persistent_provide.hpp`]]

[def argot/prov_traits/provide.hpp [link argot.ref.prov_traits.provide `argot/prov_traits/provide.hpp`]]

[def argot/prov_traits.hpp [link argot.ref.argot.prov_traits `argot/prov_traits.hpp`]]

[def argot/receiver/do_nothing.hpp [link argot.ref.receiver.do_nothing `argot/receiver/do_nothing.hpp`]]

[def argot/receiver/forgetful_invoke.hpp [link argot.ref.receiver.forgetful_invoke `argot/receiver/forgetful_invoke.hpp`]]

[def argot/receiver/forward_result_to.hpp [link argot.ref.receiver.forward_result_to `argot/receiver/forward_result_to.hpp`]]

[def argot/receiver/forward_transformed_arguments.hpp [link argot.ref.receiver.forward_transformed_arguments `argot/receiver/forward_transformed_arguments.hpp`]]

[def argot/receiver/graphviz/edge_descriptor.hpp [link argot.ref.graphviz.edge_descriptor `argot/receiver/graphviz/edge_descriptor.hpp`]]

[def argot/receiver/graphviz/edge_iterator.hpp [link argot.ref.graphviz.edge_iterator `argot/receiver/graphviz/edge_iterator.hpp`]]

[def argot/receiver/graphviz/edge_property.hpp [link argot.ref.graphviz.edge_property `argot/receiver/graphviz/edge_property.hpp`]]

[def argot/receiver/graphviz/graph.hpp [link argot.ref.graphviz.graph `argot/receiver/graphviz/graph.hpp`]]

[def argot/receiver/graphviz/graph_kind.hpp [link argot.ref.graphviz.graph_kind `argot/receiver/graphviz/graph_kind.hpp`]]

[def argot/receiver/graphviz/graph_property.hpp [link argot.ref.graphviz.graph_property `argot/receiver/graphviz/graph_property.hpp`]]

[def argot/receiver/graphviz/in_edge_iterator.hpp [link argot.ref.graphviz.in_edge_iterator `argot/receiver/graphviz/in_edge_iterator.hpp`]]

[def argot/receiver/graphviz/out_edge_iterator.hpp [link argot.ref.graphviz.out_edge_iterator `argot/receiver/graphviz/out_edge_iterator.hpp`]]

[def argot/receiver/graphviz/property_map.hpp [link argot.ref.graphviz.property_map `argot/receiver/graphviz/property_map.hpp`]]

[def argot/receiver/graphviz/property_type/color.hpp [link argot.ref.property_type.color `argot/receiver/graphviz/property_type/color.hpp`]]

[def argot/receiver/graphviz/vertex_descriptor.hpp [link argot.ref.graphviz.vertex_descriptor `argot/receiver/graphviz/vertex_descriptor.hpp`]]

[def argot/receiver/graphviz/vertex_iterator.hpp [link argot.ref.graphviz.vertex_iterator `argot/receiver/graphviz/vertex_iterator.hpp`]]

[def argot/receiver/graphviz/vertex_property/area.hpp [link argot.ref.vertex_property.area `argot/receiver/graphviz/vertex_property/area.hpp`]]

[def argot/receiver/graphviz/vertex_property/color.hpp [link argot.ref.vertex_property.color `argot/receiver/graphviz/vertex_property/color.hpp`]]

[def argot/receiver/graphviz/vertex_property/colorscheme.hpp [link argot.ref.vertex_property.colorscheme `argot/receiver/graphviz/vertex_property/colorscheme.hpp`]]

[def argot/receiver/graphviz/vertex_property/comment.hpp [link argot.ref.vertex_property.comment `argot/receiver/graphviz/vertex_property/comment.hpp`]]

[def argot/receiver/graphviz/vertex_property/distortion.hpp [link argot.ref.vertex_property.distortion `argot/receiver/graphviz/vertex_property/distortion.hpp`]]

[def argot/receiver/graphviz/vertex_property/fillcolor.hpp [link argot.ref.vertex_property.fillcolor `argot/receiver/graphviz/vertex_property/fillcolor.hpp`]]

[def argot/receiver/graphviz/vertex_property/fixedsize.hpp [link argot.ref.vertex_property.fixedsize `argot/receiver/graphviz/vertex_property/fixedsize.hpp`]]

[def argot/receiver/graphviz/vertex_property/fontcolor.hpp [link argot.ref.vertex_property.fontcolor `argot/receiver/graphviz/vertex_property/fontcolor.hpp`]]

[def argot/receiver/graphviz/vertex_property/fontname.hpp [link argot.ref.vertex_property.fontname `argot/receiver/graphviz/vertex_property/fontname.hpp`]]

[def argot/receiver/graphviz/vertex_property/fontsize.hpp [link argot.ref.vertex_property.fontsize `argot/receiver/graphviz/vertex_property/fontsize.hpp`]]

[def argot/receiver/graphviz/vertex_property/gradientangle.hpp [link argot.ref.vertex_property.gradientangle `argot/receiver/graphviz/vertex_property/gradientangle.hpp`]]

[def argot/receiver/graphviz/vertex_property/group.hpp [link argot.ref.vertex_property.group `argot/receiver/graphviz/vertex_property/group.hpp`]]

[def argot/receiver/graphviz/vertex_property/height.hpp [link argot.ref.vertex_property.height `argot/receiver/graphviz/vertex_property/height.hpp`]]

[def argot/receiver/graphviz/vertex_property/href.hpp [link argot.ref.vertex_property.href `argot/receiver/graphviz/vertex_property/href.hpp`]]

[def argot/receiver/graphviz/vertex_property/id.hpp [link argot.ref.vertex_property.id `argot/receiver/graphviz/vertex_property/id.hpp`]]

[def argot/receiver/graphviz/vertex_property/image.hpp [link argot.ref.vertex_property.image `argot/receiver/graphviz/vertex_property/image.hpp`]]

[def argot/receiver/graphviz/vertex_property/imagescale.hpp [link argot.ref.vertex_property.imagescale `argot/receiver/graphviz/vertex_property/imagescale.hpp`]]

[def argot/receiver/graphviz/vertex_property/label.hpp [link argot.ref.vertex_property.label `argot/receiver/graphviz/vertex_property/label.hpp`]]

[def argot/receiver/graphviz/vertex_property/labelloc.hpp [link argot.ref.vertex_property.labelloc `argot/receiver/graphviz/vertex_property/labelloc.hpp`]]

[def argot/receiver/graphviz/vertex_property/layer.hpp [link argot.ref.vertex_property.layer `argot/receiver/graphviz/vertex_property/layer.hpp`]]

[def argot/receiver/graphviz/vertex_property/margin.hpp [link argot.ref.vertex_property.margin `argot/receiver/graphviz/vertex_property/margin.hpp`]]

[def argot/receiver/graphviz/vertex_property/nojustify.hpp [link argot.ref.vertex_property.nojustify `argot/receiver/graphviz/vertex_property/nojustify.hpp`]]

[def argot/receiver/graphviz/vertex_property/ordering.hpp [link argot.ref.vertex_property.ordering `argot/receiver/graphviz/vertex_property/ordering.hpp`]]

[def argot/receiver/graphviz/vertex_property/orientation.hpp [link argot.ref.vertex_property.orientation `argot/receiver/graphviz/vertex_property/orientation.hpp`]]

[def argot/receiver/graphviz/vertex_property/penwidth.hpp [link argot.ref.vertex_property.penwidth `argot/receiver/graphviz/vertex_property/penwidth.hpp`]]

[def argot/receiver/graphviz/vertex_property/peripheries.hpp [link argot.ref.vertex_property.peripheries `argot/receiver/graphviz/vertex_property/peripheries.hpp`]]

[def argot/receiver/graphviz/vertex_property/pin.hpp [link argot.ref.vertex_property.pin `argot/receiver/graphviz/vertex_property/pin.hpp`]]

[def argot/receiver/graphviz/vertex_property/pos.hpp [link argot.ref.vertex_property.pos `argot/receiver/graphviz/vertex_property/pos.hpp`]]

[def argot/receiver/graphviz/vertex_property/rects.hpp [link argot.ref.vertex_property.rects `argot/receiver/graphviz/vertex_property/rects.hpp`]]

[def argot/receiver/graphviz/vertex_property/regular.hpp [link argot.ref.vertex_property.regular `argot/receiver/graphviz/vertex_property/regular.hpp`]]

[def argot/receiver/graphviz/vertex_property/root.hpp [link argot.ref.vertex_property.root `argot/receiver/graphviz/vertex_property/root.hpp`]]

[def argot/receiver/graphviz/vertex_property/samplepoints.hpp [link argot.ref.vertex_property.samplepoints `argot/receiver/graphviz/vertex_property/samplepoints.hpp`]]

[def argot/receiver/graphviz/vertex_property/shape.hpp [link argot.ref.vertex_property.shape `argot/receiver/graphviz/vertex_property/shape.hpp`]]

[def argot/receiver/graphviz/vertex_property/shapefile.hpp [link argot.ref.vertex_property.shapefile `argot/receiver/graphviz/vertex_property/shapefile.hpp`]]

[def argot/receiver/graphviz/vertex_property/showboxes.hpp [link argot.ref.vertex_property.showboxes `argot/receiver/graphviz/vertex_property/showboxes.hpp`]]

[def argot/receiver/graphviz/vertex_property/sides.hpp [link argot.ref.vertex_property.sides `argot/receiver/graphviz/vertex_property/sides.hpp`]]

[def argot/receiver/graphviz/vertex_property/skew.hpp [link argot.ref.vertex_property.skew `argot/receiver/graphviz/vertex_property/skew.hpp`]]

[def argot/receiver/graphviz/vertex_property/sortv.hpp [link argot.ref.vertex_property.sortv `argot/receiver/graphviz/vertex_property/sortv.hpp`]]

[def argot/receiver/graphviz/vertex_property/style.hpp [link argot.ref.vertex_property.style `argot/receiver/graphviz/vertex_property/style.hpp`]]

[def argot/receiver/graphviz/vertex_property/target.hpp [link argot.ref.vertex_property.target `argot/receiver/graphviz/vertex_property/target.hpp`]]

[def argot/receiver/graphviz/vertex_property/tooltip.hpp [link argot.ref.vertex_property.tooltip `argot/receiver/graphviz/vertex_property/tooltip.hpp`]]

[def argot/receiver/graphviz/vertex_property/url.hpp [link argot.ref.vertex_property.url `argot/receiver/graphviz/vertex_property/url.hpp`]]

[def argot/receiver/graphviz/vertex_property/vertices.hpp [link argot.ref.vertex_property.vertices `argot/receiver/graphviz/vertex_property/vertices.hpp`]]

[def argot/receiver/graphviz/vertex_property/width.hpp [link argot.ref.vertex_property.width `argot/receiver/graphviz/vertex_property/width.hpp`]]

[def argot/receiver/graphviz/vertex_property/xlabel.hpp [link argot.ref.vertex_property.xlabel `argot/receiver/graphviz/vertex_property/xlabel.hpp`]]

[def argot/receiver/graphviz/vertex_property/xlp.hpp [link argot.ref.vertex_property.xlp `argot/receiver/graphviz/vertex_property/xlp.hpp`]]

[def argot/receiver/graphviz/vertex_property/z.hpp [link argot.ref.vertex_property.z `argot/receiver/graphviz/vertex_property/z.hpp`]]

[def argot/receiver/graphviz/vertex_property.hpp [link argot.ref.graphviz.vertex_property `argot/receiver/graphviz/vertex_property.hpp`]]

[def argot/receiver/graphviz_dot.hpp [link argot.ref.receiver.graphviz_dot `argot/receiver/graphviz_dot.hpp`]]

[def argot/receiver/nested_receiver.hpp [link argot.ref.receiver.nested_receiver `argot/receiver/nested_receiver.hpp`]]

[def argot/receiver/provide_arguments_to.hpp [link argot.ref.receiver.provide_arguments_to `argot/receiver/provide_arguments_to.hpp`]]

[def argot/receiver/receiver_reference.hpp [link argot.ref.receiver.receiver_reference `argot/receiver/receiver_reference.hpp`]]

[def argot/receiver/reduced_invoke.hpp [link argot.ref.receiver.reduced_invoke `argot/receiver/reduced_invoke.hpp`]]

[def argot/receiver/return_argument_list_kinds.hpp [link argot.ref.receiver.return_argument_list_kinds `argot/receiver/return_argument_list_kinds.hpp`]]

[def argot/receiver/return_argument_references.hpp [link argot.ref.receiver.return_argument_references `argot/receiver/return_argument_references.hpp`]]

[def argot/receiver/return_argument_values.hpp [link argot.ref.receiver.return_argument_values `argot/receiver/return_argument_values.hpp`]]

[def argot/receiver/return_graphviz_dot.hpp [link argot.ref.receiver.return_graphviz_dot `argot/receiver/return_graphviz_dot.hpp`]]

[def argot/receiver/return_single_argument_value.hpp [link argot.ref.receiver.return_single_argument_value `argot/receiver/return_single_argument_value.hpp`]]

[def argot/receiver/with_leading_arguments.hpp [link argot.ref.receiver.with_leading_arguments `argot/receiver/with_leading_arguments.hpp`]]

[def argot/receiver/with_leading_values.hpp [link argot.ref.receiver.with_leading_values `argot/receiver/with_leading_values.hpp`]]

[def argot/receiver/with_trailing_concurrent_provider.hpp [link argot.ref.receiver.with_trailing_concurrent_provider `argot/receiver/with_trailing_concurrent_provider.hpp`]]

[def argot/receiver/with_trailing_provider.hpp [link argot.ref.receiver.with_trailing_provider `argot/receiver/with_trailing_provider.hpp`]]

[def argot/receiver.hpp [link argot.ref.argot.receiver `argot/receiver.hpp`]]

[def argot/receiver_traits/argument_list_kinds.hpp [link argot.ref.receiver_traits.argument_list_kinds `argot/receiver_traits/argument_list_kinds.hpp`]]

[def argot/receiver_traits/argument_types.hpp [link argot.ref.receiver_traits.argument_types `argot/receiver_traits/argument_types.hpp`]]

[def argot/receiver_traits/branch_to_provision.hpp [link argot.ref.receiver_traits.branch_to_provision `argot/receiver_traits/branch_to_provision.hpp`]]

[def argot/receiver_traits/partitioned_provider_types.hpp [link argot.ref.receiver_traits.partitioned_provider_types `argot/receiver_traits/partitioned_provider_types.hpp`]]

[def argot/receiver_traits/provider_types.hpp [link argot.ref.receiver_traits.provider_types `argot/receiver_traits/provider_types.hpp`]]

[def argot/receiver_traits/receive.hpp [link argot.ref.receiver_traits.receive `argot/receiver_traits/receive.hpp`]]

[def argot/receiver_traits/receive_branch.hpp [link argot.ref.receiver_traits.receive_branch `argot/receiver_traits/receive_branch.hpp`]]

[def argot/receiver_traits.hpp [link argot.ref.argot.receiver_traits `argot/receiver_traits.hpp`]]

[def argot/reducer/graphviz_dot.hpp [link argot.ref.reducer.graphviz_dot `argot/reducer/graphviz_dot.hpp`]]

[def argot/reducer/provide_result_to.hpp [link argot.ref.reducer.provide_result_to `argot/reducer/provide_result_to.hpp`]]

[def argot/reducer/reducer_reference.hpp [link argot.ref.reducer.reducer_reference `argot/reducer/reducer_reference.hpp`]]

[def argot/reducer/same_type_or_fail.hpp [link argot.ref.reducer.same_type_or_fail `argot/reducer/same_type_or_fail.hpp`]]

[def argot/reducer/to.hpp [link argot.ref.reducer.to `argot/reducer/to.hpp`]]

[def argot/reducer/to_boost_variant.hpp [link argot.ref.reducer.to_boost_variant `argot/reducer/to_boost_variant.hpp`]]

[def argot/reducer/to_heterogeneous_variant.hpp [link argot.ref.reducer.to_heterogeneous_variant `argot/reducer/to_heterogeneous_variant.hpp`]]

[def argot/reducer/to_variant.hpp [link argot.ref.reducer.to_variant `argot/reducer/to_variant.hpp`]]

[def argot/reducer/transform.hpp [link argot.ref.reducer.transform `argot/reducer/transform.hpp`]]

[def argot/reducer.hpp [link argot.ref.argot.reducer `argot/reducer.hpp`]]

[def argot/reducer_traits/destructive_reduce.hpp [link argot.ref.reducer_traits.destructive_reduce `argot/reducer_traits/destructive_reduce.hpp`]]

[def argot/reducer_traits/is_homogeneous.hpp [link argot.ref.reducer_traits.is_homogeneous `argot/reducer_traits/is_homogeneous.hpp`]]

[def argot/reducer_traits/persistent_reduce.hpp [link argot.ref.reducer_traits.persistent_reduce `argot/reducer_traits/persistent_reduce.hpp`]]

[def argot/reducer_traits/reduce.hpp [link argot.ref.reducer_traits.reduce `argot/reducer_traits/reduce.hpp`]]

[def argot/reducer_traits/return_types.hpp [link argot.ref.reducer_traits.return_types `argot/reducer_traits/return_types.hpp`]]

[def argot/reducer_traits/return_types_of_call.hpp [link argot.ref.reducer_traits.return_types_of_call `argot/reducer_traits/return_types_of_call.hpp`]]

[def argot/reducer_traits.hpp [link argot.ref.argot.reducer_traits `argot/reducer_traits.hpp`]]

[def argot/side_effect.hpp [link argot.ref.argot.side_effect `argot/side_effect.hpp`]]

[def argot/state_traits/equal_to.hpp [link argot.ref.state_traits.equal_to `argot/state_traits/equal_to.hpp`]]

[def argot/state_traits/greater_equal.hpp [link argot.ref.state_traits.greater_equal `argot/state_traits/greater_equal.hpp`]]

[def argot/state_traits/greater_than.hpp [link argot.ref.state_traits.greater_than `argot/state_traits/greater_than.hpp`]]

[def argot/state_traits/hash.hpp [link argot.ref.state_traits.hash `argot/state_traits/hash.hpp`]]

[def argot/state_traits/hash_combine.hpp [link argot.ref.state_traits.hash_combine `argot/state_traits/hash_combine.hpp`]]

[def argot/state_traits/less_equal.hpp [link argot.ref.state_traits.less_equal `argot/state_traits/less_equal.hpp`]]

[def argot/state_traits/less_than.hpp [link argot.ref.state_traits.less_than `argot/state_traits/less_than.hpp`]]

[def argot/state_traits/not_equal_to.hpp [link argot.ref.state_traits.not_equal_to `argot/state_traits/not_equal_to.hpp`]]

[def argot/state_traits.hpp [link argot.ref.argot.state_traits `argot/state_traits.hpp`]]

[def argot/switch_traits/argument_list_kinds_of_body_destructive.hpp [link argot.ref.switch_traits.argument_list_kinds_of_body_destructive `argot/switch_traits/argument_list_kinds_of_body_destructive.hpp`]]

[def argot/switch_traits/argument_list_kinds_of_body_persistent.hpp [link argot.ref.switch_traits.argument_list_kinds_of_body_persistent `argot/switch_traits/argument_list_kinds_of_body_persistent.hpp`]]

[def argot/switch_traits/argument_list_kinds_of_case_destructive.hpp [link argot.ref.switch_traits.argument_list_kinds_of_case_destructive `argot/switch_traits/argument_list_kinds_of_case_destructive.hpp`]]

[def argot/switch_traits/argument_list_kinds_of_case_persistent.hpp [link argot.ref.switch_traits.argument_list_kinds_of_case_persistent `argot/switch_traits/argument_list_kinds_of_case_persistent.hpp`]]

[def argot/switch_traits/argument_list_kinds_of_default_destructive.hpp [link argot.ref.switch_traits.argument_list_kinds_of_default_destructive `argot/switch_traits/argument_list_kinds_of_default_destructive.hpp`]]

[def argot/switch_traits/argument_list_kinds_of_default_persistent.hpp [link argot.ref.switch_traits.argument_list_kinds_of_default_persistent `argot/switch_traits/argument_list_kinds_of_default_persistent.hpp`]]

[def argot/switch_traits/case_value_for_type_at.hpp [link argot.ref.switch_traits.case_value_for_type_at `argot/switch_traits/case_value_for_type_at.hpp`]]

[def argot/switch_traits/case_values.hpp [link argot.ref.switch_traits.case_values `argot/switch_traits/case_values.hpp`]]

[def argot/switch_traits/case_values_for_type.hpp [link argot.ref.switch_traits.case_values_for_type `argot/switch_traits/case_values_for_type.hpp`]]

[def argot/switch_traits/combine.hpp [link argot.ref.switch_traits.combine `argot/switch_traits/combine.hpp`]]

[def argot/switch_traits/destructive_provide_case.hpp [link argot.ref.switch_traits.destructive_provide_case `argot/switch_traits/destructive_provide_case.hpp`]]

[def argot/switch_traits/destructive_provide_default.hpp [link argot.ref.switch_traits.destructive_provide_default `argot/switch_traits/destructive_provide_default.hpp`]]

[def argot/switch_traits/destructive_provide_isolated_case.hpp [link argot.ref.switch_traits.destructive_provide_isolated_case `argot/switch_traits/destructive_provide_isolated_case.hpp`]]

[def argot/switch_traits/destructive_provide_isolated_default.hpp [link argot.ref.switch_traits.destructive_provide_isolated_default `argot/switch_traits/destructive_provide_isolated_default.hpp`]]

[def argot/switch_traits/expand_case_values.hpp [link argot.ref.switch_traits.expand_case_values `argot/switch_traits/expand_case_values.hpp`]]

[def argot/switch_traits/expand_case_values_for_type.hpp [link argot.ref.switch_traits.expand_case_values_for_type `argot/switch_traits/expand_case_values_for_type.hpp`]]

[def argot/switch_traits/leading_argument_list_kinds_of_case_destructive.hpp [link argot.ref.switch_traits.leading_argument_list_kinds_of_case_destructive `argot/switch_traits/leading_argument_list_kinds_of_case_destructive.hpp`]]

[def argot/switch_traits/leading_argument_list_kinds_of_case_persistent.hpp [link argot.ref.switch_traits.leading_argument_list_kinds_of_case_persistent `argot/switch_traits/leading_argument_list_kinds_of_case_persistent.hpp`]]

[def argot/switch_traits/leading_argument_list_kinds_of_default_destructive.hpp [link argot.ref.switch_traits.leading_argument_list_kinds_of_default_destructive `argot/switch_traits/leading_argument_list_kinds_of_default_destructive.hpp`]]

[def argot/switch_traits/leading_argument_list_kinds_of_default_persistent.hpp [link argot.ref.switch_traits.leading_argument_list_kinds_of_default_persistent `argot/switch_traits/leading_argument_list_kinds_of_default_persistent.hpp`]]

[def argot/switch_traits/num_cases.hpp [link argot.ref.switch_traits.num_cases `argot/switch_traits/num_cases.hpp`]]

[def argot/switch_traits/persistent_provide_case.hpp [link argot.ref.switch_traits.persistent_provide_case `argot/switch_traits/persistent_provide_case.hpp`]]

[def argot/switch_traits/persistent_provide_default.hpp [link argot.ref.switch_traits.persistent_provide_default `argot/switch_traits/persistent_provide_default.hpp`]]

[def argot/switch_traits/persistent_provide_isolated_case.hpp [link argot.ref.switch_traits.persistent_provide_isolated_case `argot/switch_traits/persistent_provide_isolated_case.hpp`]]

[def argot/switch_traits/persistent_provide_isolated_default.hpp [link argot.ref.switch_traits.persistent_provide_isolated_default `argot/switch_traits/persistent_provide_isolated_default.hpp`]]

[def argot/switch_traits/provider_of_isolated.hpp [link argot.ref.switch_traits.provider_of_isolated `argot/switch_traits/provider_of_isolated.hpp`]]

[def argot/switch_traits/trailing_argument_list_kinds_of_case_destructive.hpp [link argot.ref.switch_traits.trailing_argument_list_kinds_of_case_destructive `argot/switch_traits/trailing_argument_list_kinds_of_case_destructive.hpp`]]

[def argot/switch_traits/trailing_argument_list_kinds_of_case_persistent.hpp [link argot.ref.switch_traits.trailing_argument_list_kinds_of_case_persistent `argot/switch_traits/trailing_argument_list_kinds_of_case_persistent.hpp`]]

[def argot/switch_traits/trailing_argument_list_kinds_of_default_destructive.hpp [link argot.ref.switch_traits.trailing_argument_list_kinds_of_default_destructive `argot/switch_traits/trailing_argument_list_kinds_of_default_destructive.hpp`]]

[def argot/switch_traits/trailing_argument_list_kinds_of_default_persistent.hpp [link argot.ref.switch_traits.trailing_argument_list_kinds_of_default_persistent `argot/switch_traits/trailing_argument_list_kinds_of_default_persistent.hpp`]]

[def argot/switch_traits.hpp [link argot.ref.argot.switch_traits `argot/switch_traits.hpp`]]

[def argot/tag.hpp [link argot.ref.argot.tag `argot/tag.hpp`]]

[def argot/tuple_traits/element_type.hpp [link argot.ref.tuple_traits.element_type `argot/tuple_traits/element_type.hpp`]]

[def argot/tuple_traits/get.hpp [link argot.ref.tuple_traits.get `argot/tuple_traits/get.hpp`]]

[def argot/tuple_traits/index_constant.hpp [link argot.ref.tuple_traits.index_constant `argot/tuple_traits/index_constant.hpp`]]

[def argot/tuple_traits/index_type.hpp [link argot.ref.tuple_traits.index_type `argot/tuple_traits/index_type.hpp`]]

[def argot/tuple_traits/natural_get.hpp [link argot.ref.tuple_traits.natural_get `argot/tuple_traits/natural_get.hpp`]]

[def argot/tuple_traits/num_elements.hpp [link argot.ref.tuple_traits.num_elements `argot/tuple_traits/num_elements.hpp`]]

[def argot/tuple_traits.hpp [link argot.ref.argot.tuple_traits `argot/tuple_traits.hpp`]]

[def argot/type_list.hpp [link argot.ref.argot.type_list `argot/type_list.hpp`]]

[def argot/union_.hpp [link argot.ref.argot.union_ `argot/union_.hpp`]]

[def argot/union_traits/alternative_type.hpp [link argot.ref.union_traits.alternative_type `argot/union_traits/alternative_type.hpp`]]

[def argot/union_traits/get.hpp [link argot.ref.union_traits.get `argot/union_traits/get.hpp`]]

[def argot/union_traits/index_constant.hpp [link argot.ref.union_traits.index_constant `argot/union_traits/index_constant.hpp`]]

[def argot/union_traits/index_type.hpp [link argot.ref.union_traits.index_type `argot/union_traits/index_type.hpp`]]

[def argot/union_traits/natural_get.hpp [link argot.ref.union_traits.natural_get `argot/union_traits/natural_get.hpp`]]

[def argot/union_traits/num_alternatives.hpp [link argot.ref.union_traits.num_alternatives `argot/union_traits/num_alternatives.hpp`]]

[def argot/union_traits.hpp [link argot.ref.argot.union_traits `argot/union_traits.hpp`]]

[def argot/unreachable_function.hpp [link argot.ref.argot.unreachable_function `argot/unreachable_function.hpp`]]

[def argot/value_list.hpp [link argot.ref.argot.value_list `argot/value_list.hpp`]]

[def argot/value_zipper.hpp [link argot.ref.argot.value_zipper `argot/value_zipper.hpp`]]

[def argot/variant_traits/alternative_type.hpp [link argot.ref.variant_traits.alternative_type `argot/variant_traits/alternative_type.hpp`]]

[def argot/variant_traits/get.hpp [link argot.ref.variant_traits.get `argot/variant_traits/get.hpp`]]

[def argot/variant_traits/index_constant.hpp [link argot.ref.variant_traits.index_constant `argot/variant_traits/index_constant.hpp`]]

[def argot/variant_traits/index_of.hpp [link argot.ref.variant_traits.index_of `argot/variant_traits/index_of.hpp`]]

[def argot/variant_traits/index_type.hpp [link argot.ref.variant_traits.index_type `argot/variant_traits/index_type.hpp`]]

[def argot/variant_traits/natural_get.hpp [link argot.ref.variant_traits.natural_get `argot/variant_traits/natural_get.hpp`]]

[def argot/variant_traits/num_alternatives.hpp [link argot.ref.variant_traits.num_alternatives `argot/variant_traits/num_alternatives.hpp`]]

[def argot/variant_traits.hpp [link argot.ref.argot.variant_traits `argot/variant_traits.hpp`]]

[def argot/void_.hpp [link argot.ref.argot.void_ `argot/void_.hpp`]]

[def argot/zipper.hpp [link argot.ref.argot.zipper `argot/zipper.hpp`]]

[def argot.hpp [link argot.ref..argot `argot.hpp`]]
